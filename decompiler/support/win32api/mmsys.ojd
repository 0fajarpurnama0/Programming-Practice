
mmsys.o:     file format pe-i386

SYMBOL TABLE:
[  0](sec -2)(fl 0x00)(ty   0)(scl 103) (nx 1) 0x00000000 mmsys.c
File 
[  2](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 1) 0x00000000 _CloseDriver@12
AUX tagndx 0 ttlsiz 0x0 lnnos 0 next 0
[  4](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000007 _OpenDriver@12
[  5](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x0000000e _SendDriverMessage@16
[  6](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000015 _DrvGetModuleHandle@4
[  7](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x0000001c _GetDriverModuleHandle@4
[  8](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000023 _DefDriverProc@20
[  9](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x0000002a _mmsystemGetVersion@0
[ 10](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x0000002f _sndPlaySoundA@8
[ 11](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000036 _sndPlaySoundW@8
[ 12](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x0000003d _PlaySoundA@12
[ 13](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000044 _PlaySoundW@12
[ 14](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x0000004b _waveOutGetNumDevs@0
[ 15](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000050 _waveOutGetDevCapsA@12
[ 16](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000057 _waveOutGetDevCapsW@12
[ 17](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x0000005e _waveOutGetVolume@8
[ 18](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000065 _waveOutSetVolume@8
[ 19](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x0000006c _waveOutGetErrorTextA@12
[ 20](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000073 _waveOutGetErrorTextW@12
[ 21](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x0000007a _waveOutOpen@24
[ 22](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000081 _waveOutClose@4
[ 23](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000088 _waveOutPrepareHeader@12
[ 24](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x0000008f _waveOutUnprepareHeader@12
[ 25](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000096 _waveOutWrite@12
[ 26](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x0000009d _waveOutPause@4
[ 27](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x000000a4 _waveOutRestart@4
[ 28](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x000000ab _waveOutReset@4
[ 29](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x000000b2 _waveOutBreakLoop@4
[ 30](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x000000b9 _waveOutGetPosition@12
[ 31](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x000000c0 _waveOutGetPitch@8
[ 32](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x000000c7 _waveOutSetPitch@8
[ 33](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x000000ce _waveOutGetPlaybackRate@8
[ 34](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x000000d5 _waveOutSetPlaybackRate@8
[ 35](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x000000dc _waveOutGetID@8
[ 36](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x000000e3 _waveOutMessage@16
[ 37](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x000000ea _waveInGetNumDevs@0
[ 38](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x000000ef _waveInGetDevCapsA@12
[ 39](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x000000f6 _waveInGetDevCapsW@12
[ 40](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x000000fd _waveInGetErrorTextA@12
[ 41](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000104 _waveInGetErrorTextW@12
[ 42](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x0000010b _waveInOpen@24
[ 43](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000112 _waveInClose@4
[ 44](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000119 _waveInPrepareHeader@12
[ 45](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000120 _waveInUnprepareHeader@12
[ 46](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000127 _waveInAddBuffer@12
[ 47](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x0000012e _waveInStart@4
[ 48](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000135 _waveInStop@4
[ 49](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x0000013c _waveInReset@4
[ 50](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000143 _waveInGetPosition@12
[ 51](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x0000014a _waveInGetID@8
[ 52](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000151 _waveInMessage@16
[ 53](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000158 _midiOutGetNumDevs@0
[ 54](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x0000015d _midiStreamOpen@24
[ 55](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000164 _midiStreamClose@4
[ 56](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x0000016b _midiStreamProperty@12
[ 57](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000172 _midiStreamPosition@12
[ 58](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000179 _midiStreamOut@12
[ 59](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000180 _midiStreamPause@4
[ 60](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000187 _midiStreamRestart@4
[ 61](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x0000018e _midiStreamStop@4
[ 62](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000195 _midiConnect@12
[ 63](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x0000019c _midiDisconnect@12
[ 64](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x000001a3 _midiOutGetDevCapsA@12
[ 65](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x000001aa _midiOutGetDevCapsW@12
[ 66](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x000001b1 _midiOutGetVolume@8
[ 67](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x000001b8 _midiOutSetVolume@8
[ 68](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x000001bf _midiOutGetErrorTextA@12
[ 69](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x000001c6 _midiOutGetErrorTextW@12
[ 70](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x000001cd _midiOutOpen@20
[ 71](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x000001d4 _midiOutClose@4
[ 72](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x000001db _midiOutPrepareHeader@12
[ 73](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x000001e2 _midiOutUnprepareHeader@12
[ 74](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x000001e9 _midiOutShortMsg@8
[ 75](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x000001f0 _midiOutLongMsg@12
[ 76](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x000001f7 _midiOutReset@4
[ 77](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x000001fe _midiOutCachePatches@16
[ 78](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000205 _midiOutCacheDrumPatches@16
[ 79](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x0000020c _midiOutGetID@8
[ 80](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000213 _midiOutMessage@16
[ 81](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x0000021a _midiInGetNumDevs@0
[ 82](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x0000021f _midiInGetDevCapsA@12
[ 83](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000226 _midiInGetDevCapsW@12
[ 84](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x0000022d _midiInGetErrorTextA@12
[ 85](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000234 _midiInGetErrorTextW@12
[ 86](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x0000023b _midiInOpen@20
[ 87](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000242 _midiInClose@4
[ 88](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000249 _midiInPrepareHeader@12
[ 89](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000250 _midiInUnprepareHeader@12
[ 90](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000257 _midiInAddBuffer@12
[ 91](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x0000025e _midiInStart@4
[ 92](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000265 _midiInStop@4
[ 93](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x0000026c _midiInReset@4
[ 94](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000273 _midiInGetID@8
[ 95](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x0000027a _midiInMessage@16
[ 96](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000281 _auxGetNumDevs@0
[ 97](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000286 _auxGetDevCapsA@12
[ 98](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x0000028d _auxGetDevCapsW@12
[ 99](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000294 _auxSetVolume@8
[100](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x0000029b _auxGetVolume@8
[101](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x000002a2 _auxOutMessage@16
[102](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x000002a9 _mixerGetNumDevs@0
[103](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x000002ae _mixerGetDevCapsA@12
[104](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x000002b5 _mixerGetDevCapsW@12
[105](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x000002bc _mixerOpen@20
[106](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x000002c3 _mixerClose@4
[107](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x000002ca _mixerMessage@16
[108](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x000002d1 _mixerGetLineInfoA@12
[109](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x000002d8 _mixerGetLineInfoW@12
[110](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x000002df _mixerGetID@12
[111](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x000002e6 _mixerGetLineControlsA@12
[112](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x000002ed _mixerGetLineControlsW@12
[113](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x000002f4 _mixerGetControlDetailsA@12
[114](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x000002fb _mixerGetControlDetailsW@12
[115](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000302 _mixerSetControlDetails@12
[116](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000309 _timeGetSystemTime@8
[117](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000310 _timeGetTime@0
[118](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000315 _timeSetEvent@20
[119](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x0000031c _timeKillEvent@4
[120](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000323 _timeGetDevCaps@8
[121](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x0000032a _timeBeginPeriod@4
[122](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000331 _timeEndPeriod@4
[123](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000338 _joyGetNumDevs@0
[124](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x0000033d _joyGetDevCapsA@12
[125](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000344 _joyGetDevCapsW@12
[126](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x0000034b _joyGetPos@8
[127](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000352 _joyGetPosEx@8
[128](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000359 _joyGetThreshold@8
[129](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000360 _joyReleaseCapture@4
[130](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000367 _joySetCapture@16
[131](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x0000036e _joySetThreshold@8
[132](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000375 _mmioStringToFOURCCA@8
[133](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x0000037c _mmioStringToFOURCCW@8
[134](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000383 _mmioInstallIOProcA@12
[135](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x0000038a _mmioInstallIOProcW@12
[136](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000391 _mmioOpenA@12
[137](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000398 _mmioOpenW@12
[138](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x0000039f _mmioRenameA@16
[139](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x000003a6 _mmioRenameW@16
[140](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x000003ad _mmioClose@8
[141](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x000003b4 _mmioRead@12
[142](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x000003bb _mmioWrite@12
[143](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x000003c2 _mmioSeek@12
[144](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x000003c9 _mmioGetInfo@12
[145](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x000003d0 _mmioSetInfo@12
[146](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x000003d7 _mmioSetBuffer@16
[147](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x000003de _mmioFlush@8
[148](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x000003e5 _mmioAdvance@12
[149](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x000003ec _mmioSendMessage@16
[150](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x000003f3 _mmioDescend@16
[151](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x000003fa _mmioAscend@12
[152](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000401 _mmioCreateChunk@12
[153](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000408 _mciSendCommandA@16
[154](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x0000040f _mciSendCommandW@16
[155](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000416 _mciSendStringA@16
[156](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x0000041d _mciSendStringW@16
[157](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000424 _mciGetDeviceIDA@4
[158](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x0000042b _mciGetDeviceIDW@4
[159](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000432 _mciGetDeviceIDFromElementIDA@8
[160](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000439 _mciGetDeviceIDFromElementIDW@8
[161](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000440 _mciGetErrorStringA@12
[162](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000447 _mciGetErrorStringW@12
[163](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x0000044e _mciSetYieldProc@12
[164](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x00000455 _mciGetCreatorTask@4
[165](sec  1)(fl 0x00)(ty  20)(scl   2) (nx 0) 0x0000045c _mciGetYieldProc@8
[166](sec  1)(fl 0x00)(ty   0)(scl   3) (nx 1) 0x00000000 .text
AUX scnlen 0x463 nreloc 0 nlnno 0
[168](sec  2)(fl 0x00)(ty   0)(scl   3) (nx 1) 0x00000000 .data
AUX scnlen 0x0 nreloc 0 nlnno 0
[170](sec  3)(fl 0x00)(ty   0)(scl   3) (nx 1) 0x00000000 .bss
AUX scnlen 0x0 nreloc 0 nlnno 0
[172](sec  4)(fl 0x00)(ty   0)(scl   3) (nx 1) 0x00000000 .stab
AUX scnlen 0x8814 nreloc 167 nlnno 0
[174](sec  5)(fl 0x00)(ty   0)(scl   3) (nx 1) 0x00000000 .stabstr
AUX scnlen 0x21da2 nreloc 0 nlnno 0


/cygdrive/c/cg/projects/recstudio4/support/win32api/mmsys.c:
typedef int32 int;
typedef int8 char;
typedef int32 long int;
typedef uint32 unsigned int;
typedef uint32 long unsigned int;
typedef int64 long long int;
typedef uint64 long long unsigned int;
typedef int16 short int;
typedef uint16 short unsigned int;
typedef int8 signed char;
typedef uint8 unsigned char;
typedef float float;
typedef double double;
typedef float96 long double;
typedef struct %anon1 { /* size 8 */
  int real; /* bitsize 32, bitpos 0 */
  int imag; /* bitsize 32, bitpos 32 */
} complex int;
typedef complex float0 complex float;
typedef complex float0 complex double;
typedef complex float0 complex long double;
typedef void void;
typedef char *__builtin_va_list;
typedef bool32 boolean;
typedef boolean _Bool;
struct _EXCEPTION_REGISTRATION_RECORD { /* id 0 */
};
 /usr/include/w32api/windef.h:
typedef long unsigned int DWORD;
typedef int WINBOOL;
typedef int *PWINBOOL;
typedef int *LPWINBOOL;
typedef WINBOOL BOOL;
typedef unsigned char BYTE;
typedef BOOL *PBOOL;
typedef BOOL *LPBOOL;
typedef short unsigned int WORD;
typedef float FLOAT;
typedef FLOAT *PFLOAT;
typedef BYTE *PBYTE;
typedef BYTE *LPBYTE;
typedef int *PINT;
typedef int *LPINT;
typedef WORD *PWORD;
typedef WORD *LPWORD;
typedef long int *LPLONG;
typedef DWORD *PDWORD;
typedef DWORD *LPDWORD;
typedef void const *PCVOID;
typedef void const *LPCVOID;
typedef int INT;
typedef unsigned int UINT;
typedef unsigned int *PUINT;
typedef unsigned int *LPUINT;
typedef unsigned int WPARAM;
typedef long int LPARAM;
typedef long int LRESULT;
typedef long int HRESULT;
typedef WORD ATOM;
typedef void *HGLOBAL;
typedef void *HLOCAL;
typedef void *GLOBALHANDLE;
typedef void *LOCALHANDLE;
typedef void *HGDIOBJ;
struct HACCEL__ { /* size 4 id 2 */
  int i; /* bitsize 32, bitpos 0 */
};
typedef struct HACCEL__ /* id 2 */ *HACCEL;
struct HBITMAP__ { /* size 4 id 3 */
  int i; /* bitsize 32, bitpos 0 */
};
typedef struct HBITMAP__ /* id 3 */ *HBITMAP;
struct HBRUSH__ { /* size 4 id 4 */
  int i; /* bitsize 32, bitpos 0 */
};
typedef struct HBRUSH__ /* id 4 */ *HBRUSH;
struct HCOLORSPACE__ { /* size 4 id 5 */
  int i; /* bitsize 32, bitpos 0 */
};
typedef struct HCOLORSPACE__ /* id 5 */ *HCOLORSPACE;
struct HDC__ { /* size 4 id 6 */
  int i; /* bitsize 32, bitpos 0 */
};
typedef struct HDC__ /* id 6 */ *HDC;
struct HGLRC__ { /* size 4 id 7 */
  int i; /* bitsize 32, bitpos 0 */
};
typedef struct HGLRC__ /* id 7 */ *HGLRC;
struct HDESK__ { /* size 4 id 8 */
  int i; /* bitsize 32, bitpos 0 */
};
typedef struct HDESK__ /* id 8 */ *HDESK;
struct HENHMETAFILE__ { /* size 4 id 9 */
  int i; /* bitsize 32, bitpos 0 */
};
typedef struct HENHMETAFILE__ /* id 9 */ *HENHMETAFILE;
struct HFONT__ { /* size 4 id 10 */
  int i; /* bitsize 32, bitpos 0 */
};
typedef struct HFONT__ /* id 10 */ *HFONT;
struct HICON__ { /* size 4 id 11 */
  int i; /* bitsize 32, bitpos 0 */
};
typedef struct HICON__ /* id 11 */ *HICON;
struct HKEY__ { /* size 4 id 12 */
  int i; /* bitsize 32, bitpos 0 */
};
typedef struct HKEY__ /* id 12 */ *HKEY;
struct HMONITOR__ { /* size 4 id 13 */
  int i; /* bitsize 32, bitpos 0 */
};
typedef struct HMONITOR__ /* id 13 */ *HMONITOR;
struct HTERMINAL__ { /* size 4 id 14 */
  int i; /* bitsize 32, bitpos 0 */
};
typedef struct HTERMINAL__ /* id 14 */ *HTERMINAL;
struct HWINEVENTHOOK__ { /* size 4 id 15 */
  int i; /* bitsize 32, bitpos 0 */
};
typedef struct HWINEVENTHOOK__ /* id 15 */ *HWINEVENTHOOK;
typedef HKEY *PHKEY;
struct HMENU__ { /* size 4 id 16 */
  int i; /* bitsize 32, bitpos 0 */
};
typedef struct HMENU__ /* id 16 */ *HMENU;
struct HMETAFILE__ { /* size 4 id 17 */
  int i; /* bitsize 32, bitpos 0 */
};
typedef struct HMETAFILE__ /* id 17 */ *HMETAFILE;
struct HINSTANCE__ { /* size 4 id 18 */
  int i; /* bitsize 32, bitpos 0 */
};
typedef struct HINSTANCE__ /* id 18 */ *HINSTANCE;
typedef HINSTANCE HMODULE;
struct HPALETTE__ { /* size 4 id 19 */
  int i; /* bitsize 32, bitpos 0 */
};
typedef struct HPALETTE__ /* id 19 */ *HPALETTE;
struct HPEN__ { /* size 4 id 20 */
  int i; /* bitsize 32, bitpos 0 */
};
typedef struct HPEN__ /* id 20 */ *HPEN;
struct HRGN__ { /* size 4 id 21 */
  int i; /* bitsize 32, bitpos 0 */
};
typedef struct HRGN__ /* id 21 */ *HRGN;
struct HRSRC__ { /* size 4 id 22 */
  int i; /* bitsize 32, bitpos 0 */
};
typedef struct HRSRC__ /* id 22 */ *HRSRC;
struct HSTR__ { /* size 4 id 23 */
  int i; /* bitsize 32, bitpos 0 */
};
typedef struct HSTR__ /* id 23 */ *HSTR;
struct HTASK__ { /* size 4 id 24 */
  int i; /* bitsize 32, bitpos 0 */
};
typedef struct HTASK__ /* id 24 */ *HTASK;
struct HWND__ { /* size 4 id 25 */
  int i; /* bitsize 32, bitpos 0 */
};
typedef struct HWND__ /* id 25 */ *HWND;
struct HWINSTA__ { /* size 4 id 26 */
  int i; /* bitsize 32, bitpos 0 */
};
typedef struct HWINSTA__ /* id 26 */ *HWINSTA;
struct HKL__ { /* size 4 id 27 */
  int i; /* bitsize 32, bitpos 0 */
};
typedef struct HKL__ /* id 27 */ *HKL;
typedef int HFILE;
typedef HICON HCURSOR;
typedef DWORD COLORREF;
typedef int (*FARPROC) (/* unknown */);
typedef int (*NEARPROC) (/* unknown */);
typedef int (*PROC) (/* unknown */);
struct tagRECT { /* size 16 id 28 */
  long int left; /* bitsize 32, bitpos 0 */
  long int top; /* bitsize 32, bitpos 32 */
  long int right; /* bitsize 32, bitpos 64 */
  long int bottom; /* bitsize 32, bitpos 96 */
};
typedef struct tagRECT /* id 28 */ RECT;
typedef struct tagRECT /* id 28 */ *PRECT;
typedef struct tagRECT /* id 28 */ *LPRECT;
typedef RECT const *LPCRECT;
struct tagRECTL { /* size 16 id 29 */
  long int left; /* bitsize 32, bitpos 0 */
  long int top; /* bitsize 32, bitpos 32 */
  long int right; /* bitsize 32, bitpos 64 */
  long int bottom; /* bitsize 32, bitpos 96 */
};
typedef struct tagRECTL /* id 29 */ RECTL;
typedef struct tagRECTL /* id 29 */ *PRECTL;
typedef struct tagRECTL /* id 29 */ *LPRECTL;
typedef RECTL const *LPCRECTL;
struct tagPOINT { /* size 8 id 30 */
  long int x; /* bitsize 32, bitpos 0 */
  long int y; /* bitsize 32, bitpos 32 */
};
typedef struct tagPOINT /* id 30 */ POINT;
typedef struct tagPOINT /* id 30 */ POINTL;
typedef struct tagPOINT /* id 30 */ *PPOINT;
typedef struct tagPOINT /* id 30 */ *LPPOINT;
typedef struct tagPOINT /* id 30 */ *PPOINTL;
typedef struct tagPOINT /* id 30 */ *LPPOINTL;
struct tagSIZE { /* size 8 id 31 */
  long int cx; /* bitsize 32, bitpos 0 */
  long int cy; /* bitsize 32, bitpos 32 */
};
typedef struct tagSIZE /* id 31 */ SIZE;
typedef struct tagSIZE /* id 31 */ SIZEL;
typedef struct tagSIZE /* id 31 */ *PSIZE;
typedef struct tagSIZE /* id 31 */ *LPSIZE;
typedef struct tagSIZE /* id 31 */ *PSIZEL;
typedef struct tagSIZE /* id 31 */ *LPSIZEL;
struct tagPOINTS { /* size 4 id 32 */
  short int x; /* bitsize 16, bitpos 0 */
  short int y; /* bitsize 16, bitpos 16 */
};
typedef struct tagPOINTS /* id 32 */ POINTS;
typedef struct tagPOINTS /* id 32 */ *PPOINTS;
typedef struct tagPOINTS /* id 32 */ *LPPOINTS;
 /usr/lib/gcc/i686-pc-cygwin/3.4.4/../../../../include/w32api/winnt.h:
typedef char CHAR;
typedef short int SHORT;
typedef long int LONG;
typedef char CCHAR;
typedef char *PCCHAR;
typedef unsigned char UCHAR;
typedef unsigned char *PUCHAR;
typedef short unsigned int USHORT;
typedef short unsigned int *PUSHORT;
typedef long unsigned int ULONG;
typedef long unsigned int *PULONG;
typedef char *PSZ;
typedef void *PVOID;
typedef void *LPVOID;
typedef void *PVOID64;
typedef short unsigned int wchar_t;
typedef wchar_t WCHAR;
typedef WCHAR *PWCHAR;
typedef WCHAR *LPWCH;
typedef WCHAR *PWCH;
typedef WCHAR *NWPSTR;
typedef WCHAR *LPWSTR;
typedef WCHAR *PWSTR;
typedef WCHAR const *LPCWCH;
typedef WCHAR const *PCWCH;
typedef WCHAR const *LPCWSTR;
typedef WCHAR const *PCWSTR;
typedef CHAR *PCHAR;
typedef CHAR *LPCH;
typedef CHAR *PCH;
typedef CHAR *NPSTR;
typedef CHAR *LPSTR;
typedef CHAR *PSTR;
typedef CHAR const *LPCCH;
typedef CHAR const *PCSTR;
typedef CHAR const *LPCSTR;
typedef CHAR TCHAR;
typedef CHAR _TCHAR;
typedef TCHAR TBYTE;
typedef TCHAR *PTCH;
typedef TCHAR *PTBYTE;
typedef TCHAR *LPTCH;
typedef TCHAR *PTSTR;
typedef TCHAR *LPTSTR;
typedef TCHAR *LP;
typedef TCHAR *PTCHAR;
typedef TCHAR const *LPCTSTR;
typedef SHORT *PSHORT;
typedef LONG *PLONG;
typedef void *HANDLE;
typedef HANDLE *PHANDLE;
typedef HANDLE *LPHANDLE;
typedef DWORD LCID;
typedef PDWORD PLCID;
typedef WORD LANGID;
typedef long long int LONGLONG;
typedef long long unsigned int DWORDLONG;
typedef LONGLONG *PLONGLONG;
typedef DWORDLONG *PDWORDLONG;
typedef DWORDLONG ULONGLONG;
typedef DWORDLONG *PULONGLONG;
typedef LONGLONG USN;
typedef BYTE BOOLEAN;
typedef BYTE *PBOOLEAN;
typedef BYTE FCHAR;
typedef WORD FSHORT;
typedef DWORD FLONG;
typedef DWORD ACCESS_MASK;
typedef DWORD *PACCESS_MASK;
struct _GUID { /* size 16 id 33 */
  long unsigned int Data1; /* bitsize 32, bitpos 0 */
  short unsigned int Data2; /* bitsize 16, bitpos 32 */
  short unsigned int Data3; /* bitsize 16, bitpos 48 */
  unsigned char Data4[8]:uint32; /* bitsize 64, bitpos 64 */
};
typedef struct _GUID /* id 33 */ GUID;
typedef struct _GUID /* id 33 */ *REFGUID;
typedef struct _GUID /* id 33 */ *LPGUID;
struct _GENERIC_MAPPING { /* size 16 id 34 */
  ACCESS_MASK GenericRead; /* bitsize 32, bitpos 0 */
  ACCESS_MASK GenericWrite; /* bitsize 32, bitpos 32 */
  ACCESS_MASK GenericExecute; /* bitsize 32, bitpos 64 */
  ACCESS_MASK GenericAll; /* bitsize 32, bitpos 96 */
};
typedef struct _GENERIC_MAPPING /* id 34 */ GENERIC_MAPPING;
typedef struct _GENERIC_MAPPING /* id 34 */ *PGENERIC_MAPPING;
struct _ACE_HEADER { /* size 4 id 35 */
  BYTE AceType; /* bitsize 8, bitpos 0 */
  BYTE AceFlags; /* bitsize 8, bitpos 8 */
  WORD AceSize; /* bitsize 16, bitpos 16 */
};
typedef struct _ACE_HEADER /* id 35 */ ACE_HEADER;
typedef struct _ACE_HEADER /* id 35 */ *PACE_HEADER;
struct _ACCESS_ALLOWED_ACE { /* size 12 id 36 */
  ACE_HEADER Header; /* bitsize 32, bitpos 0 */
  ACCESS_MASK Mask; /* bitsize 32, bitpos 32 */
  DWORD SidStart; /* bitsize 32, bitpos 64 */
};
typedef struct _ACCESS_ALLOWED_ACE /* id 36 */ ACCESS_ALLOWED_ACE;
typedef struct _ACCESS_ALLOWED_ACE /* id 36 */ *PACCESS_ALLOWED_ACE;
struct _ACCESS_DENIED_ACE { /* size 12 id 37 */
  ACE_HEADER Header; /* bitsize 32, bitpos 0 */
  ACCESS_MASK Mask; /* bitsize 32, bitpos 32 */
  DWORD SidStart; /* bitsize 32, bitpos 64 */
};
typedef struct _ACCESS_DENIED_ACE /* id 37 */ ACCESS_DENIED_ACE;
typedef struct _ACCESS_DENIED_ACE /* id 37 */ *PACCESS_DENIED_ACE;
struct _SYSTEM_AUDIT_ACE { /* size 12 id 38 */
  ACE_HEADER Header; /* bitsize 32, bitpos 0 */
  ACCESS_MASK Mask; /* bitsize 32, bitpos 32 */
  DWORD SidStart; /* bitsize 32, bitpos 64 */
};
typedef struct _SYSTEM_AUDIT_ACE /* id 38 */ SYSTEM_AUDIT_ACE;
typedef SYSTEM_AUDIT_ACE *PSYSTEM_AUDIT_ACE;
struct _SYSTEM_ALARM_ACE { /* size 12 id 39 */
  ACE_HEADER Header; /* bitsize 32, bitpos 0 */
  ACCESS_MASK Mask; /* bitsize 32, bitpos 32 */
  DWORD SidStart; /* bitsize 32, bitpos 64 */
};
typedef struct _SYSTEM_ALARM_ACE /* id 39 */ SYSTEM_ALARM_ACE;
typedef struct _SYSTEM_ALARM_ACE /* id 39 */ *PSYSTEM_ALARM_ACE;
struct _ACCESS_ALLOWED_OBJECT_ACE { /* size 48 id 40 */
  ACE_HEADER Header; /* bitsize 32, bitpos 0 */
  ACCESS_MASK Mask; /* bitsize 32, bitpos 32 */
  DWORD Flags; /* bitsize 32, bitpos 64 */
  GUID ObjectType; /* bitsize 128, bitpos 96 */
  GUID InheritedObjectType; /* bitsize 128, bitpos 224 */
  DWORD SidStart; /* bitsize 32, bitpos 352 */
};
typedef struct _ACCESS_ALLOWED_OBJECT_ACE /* id 40 */ ACCESS_ALLOWED_OBJECT_ACE;
typedef struct _ACCESS_ALLOWED_OBJECT_ACE /* id 40 */ *PACCESS_ALLOWED_OBJECT_ACE;
struct _ACCESS_DENIED_OBJECT_ACE { /* size 48 id 41 */
  ACE_HEADER Header; /* bitsize 32, bitpos 0 */
  ACCESS_MASK Mask; /* bitsize 32, bitpos 32 */
  DWORD Flags; /* bitsize 32, bitpos 64 */
  GUID ObjectType; /* bitsize 128, bitpos 96 */
  GUID InheritedObjectType; /* bitsize 128, bitpos 224 */
  DWORD SidStart; /* bitsize 32, bitpos 352 */
};
typedef struct _ACCESS_DENIED_OBJECT_ACE /* id 41 */ ACCESS_DENIED_OBJECT_ACE;
typedef struct _ACCESS_DENIED_OBJECT_ACE /* id 41 */ *PACCESS_DENIED_OBJECT_ACE;
struct _SYSTEM_AUDIT_OBJECT_ACE { /* size 48 id 42 */
  ACE_HEADER Header; /* bitsize 32, bitpos 0 */
  ACCESS_MASK Mask; /* bitsize 32, bitpos 32 */
  DWORD Flags; /* bitsize 32, bitpos 64 */
  GUID ObjectType; /* bitsize 128, bitpos 96 */
  GUID InheritedObjectType; /* bitsize 128, bitpos 224 */
  DWORD SidStart; /* bitsize 32, bitpos 352 */
};
typedef struct _SYSTEM_AUDIT_OBJECT_ACE /* id 42 */ SYSTEM_AUDIT_OBJECT_ACE;
typedef struct _SYSTEM_AUDIT_OBJECT_ACE /* id 42 */ *PSYSTEM_AUDIT_OBJECT_ACE;
struct _SYSTEM_ALARM_OBJECT_ACE { /* size 48 id 43 */
  ACE_HEADER Header; /* bitsize 32, bitpos 0 */
  ACCESS_MASK Mask; /* bitsize 32, bitpos 32 */
  DWORD Flags; /* bitsize 32, bitpos 64 */
  GUID ObjectType; /* bitsize 128, bitpos 96 */
  GUID InheritedObjectType; /* bitsize 128, bitpos 224 */
  DWORD SidStart; /* bitsize 32, bitpos 352 */
};
typedef struct _SYSTEM_ALARM_OBJECT_ACE /* id 43 */ SYSTEM_ALARM_OBJECT_ACE;
typedef struct _SYSTEM_ALARM_OBJECT_ACE /* id 43 */ *PSYSTEM_ALARM_OBJECT_ACE;
struct _ACL { /* size 8 id 44 */
  BYTE AclRevision; /* bitsize 8, bitpos 0 */
  BYTE Sbz1; /* bitsize 8, bitpos 8 */
  WORD AclSize; /* bitsize 16, bitpos 16 */
  WORD AceCount; /* bitsize 16, bitpos 32 */
  WORD Sbz2; /* bitsize 16, bitpos 48 */
};
typedef struct _ACL /* id 44 */ ACL;
typedef struct _ACL /* id 44 */ *PACL;
struct _ACL_REVISION_INFORMATION { /* size 4 id 45 */
  DWORD AclRevision; /* bitsize 32, bitpos 0 */
};
typedef struct _ACL_REVISION_INFORMATION /* id 45 */ ACL_REVISION_INFORMATION;
struct _ACL_SIZE_INFORMATION { /* size 12 id 46 */
  DWORD AceCount; /* bitsize 32, bitpos 0 */
  DWORD AclBytesInUse; /* bitsize 32, bitpos 32 */
  DWORD AclBytesFree; /* bitsize 32, bitpos 64 */
};
typedef struct _ACL_SIZE_INFORMATION /* id 46 */ ACL_SIZE_INFORMATION;
struct _FLOATING_SAVE_AREA { /* size 112 id 47 */
  DWORD ControlWord; /* bitsize 32, bitpos 0 */
  DWORD StatusWord; /* bitsize 32, bitpos 32 */
  DWORD TagWord; /* bitsize 32, bitpos 64 */
  DWORD ErrorOffset; /* bitsize 32, bitpos 96 */
  DWORD ErrorSelector; /* bitsize 32, bitpos 128 */
  DWORD DataOffset; /* bitsize 32, bitpos 160 */
  DWORD DataSelector; /* bitsize 32, bitpos 192 */
  BYTE RegisterArea[80]:uint32; /* bitsize 640, bitpos 224 */
  DWORD Cr0NpxState; /* bitsize 32, bitpos 864 */
};
typedef struct _FLOATING_SAVE_AREA /* id 47 */ FLOATING_SAVE_AREA;
struct _CONTEXT { /* size 716 id 48 */
  DWORD ContextFlags; /* bitsize 32, bitpos 0 */
  DWORD Dr0; /* bitsize 32, bitpos 32 */
  DWORD Dr1; /* bitsize 32, bitpos 64 */
  DWORD Dr2; /* bitsize 32, bitpos 96 */
  DWORD Dr3; /* bitsize 32, bitpos 128 */
  DWORD Dr6; /* bitsize 32, bitpos 160 */
  DWORD Dr7; /* bitsize 32, bitpos 192 */
  FLOATING_SAVE_AREA FloatSave; /* bitsize 896, bitpos 224 */
  DWORD SegGs; /* bitsize 32, bitpos 1120 */
  DWORD SegFs; /* bitsize 32, bitpos 1152 */
  DWORD SegEs; /* bitsize 32, bitpos 1184 */
  DWORD SegDs; /* bitsize 32, bitpos 1216 */
  DWORD Edi; /* bitsize 32, bitpos 1248 */
  DWORD Esi; /* bitsize 32, bitpos 1280 */
  DWORD Ebx; /* bitsize 32, bitpos 1312 */
  DWORD Edx; /* bitsize 32, bitpos 1344 */
  DWORD Ecx; /* bitsize 32, bitpos 1376 */
  DWORD Eax; /* bitsize 32, bitpos 1408 */
  DWORD Ebp; /* bitsize 32, bitpos 1440 */
  DWORD Eip; /* bitsize 32, bitpos 1472 */
  DWORD SegCs; /* bitsize 32, bitpos 1504 */
  DWORD EFlags; /* bitsize 32, bitpos 1536 */
  DWORD Esp; /* bitsize 32, bitpos 1568 */
  DWORD SegSs; /* bitsize 32, bitpos 1600 */
  BYTE ExtendedRegisters[512]:uint32; /* bitsize 4096, bitpos 1632 */
};
typedef struct _CONTEXT /* id 48 */ CONTEXT;
typedef CONTEXT *PCONTEXT;
typedef CONTEXT *LPCONTEXT;
struct _EXCEPTION_RECORD { /* size 80 id 49 */
  DWORD ExceptionCode; /* bitsize 32, bitpos 0 */
  DWORD ExceptionFlags; /* bitsize 32, bitpos 32 */
  struct _EXCEPTION_RECORD /* id 49 */ *ExceptionRecord; /* bitsize 32, bitpos 64 */
  PVOID ExceptionAddress; /* bitsize 32, bitpos 96 */
  DWORD NumberParameters; /* bitsize 32, bitpos 128 */
  DWORD ExceptionInformation[15]:uint32; /* bitsize 480, bitpos 160 */
};
typedef struct _EXCEPTION_RECORD /* id 49 */ EXCEPTION_RECORD;
typedef struct _EXCEPTION_RECORD /* id 49 */ *PEXCEPTION_RECORD;
typedef struct _EXCEPTION_RECORD /* id 49 */ *LPEXCEPTION_RECORD;
struct _EXCEPTION_POINTERS { /* size 8 id 50 */
  PEXCEPTION_RECORD ExceptionRecord; /* bitsize 32, bitpos 0 */
  PCONTEXT ContextRecord; /* bitsize 32, bitpos 32 */
};
typedef struct _EXCEPTION_POINTERS /* id 50 */ EXCEPTION_POINTERS;
typedef struct _EXCEPTION_POINTERS /* id 50 */ *PEXCEPTION_POINTERS;
typedef struct _EXCEPTION_POINTERS /* id 50 */ *LPEXCEPTION_POINTERS;
union _LARGE_INTEGER { /* size 8 id 51 */
  struct %anon52 { /* size 8 */
    DWORD LowPart; /* bitsize 32, bitpos 0 */
    LONG HighPart; /* bitsize 32, bitpos 32 */
  } u; /* bitsize 64, bitpos 0 */
  struct %anon52 { /* size 8 */
    DWORD LowPart; /* bitsize 32, bitpos 0 */
    LONG HighPart; /* bitsize 32, bitpos 32 */
  }; /* bitsize 64, bitpos 0 */
  LONGLONG QuadPart; /* bitsize 64, bitpos 0 */
};
typedef union _LARGE_INTEGER /* id 51 */ LARGE_INTEGER;
typedef union _LARGE_INTEGER /* id 51 */ *PLARGE_INTEGER;
union _ULARGE_INTEGER { /* size 8 id 53 */
  struct %anon54 { /* size 8 */
    DWORD LowPart; /* bitsize 32, bitpos 0 */
    DWORD HighPart; /* bitsize 32, bitpos 32 */
  } u; /* bitsize 64, bitpos 0 */
  struct %anon54 { /* size 8 */
    DWORD LowPart; /* bitsize 32, bitpos 0 */
    DWORD HighPart; /* bitsize 32, bitpos 32 */
  }; /* bitsize 64, bitpos 0 */
  ULONGLONG QuadPart; /* bitsize 64, bitpos 0 */
};
typedef union _ULARGE_INTEGER /* id 53 */ ULARGE_INTEGER;
typedef union _ULARGE_INTEGER /* id 53 */ *PULARGE_INTEGER;
struct _LUID { /* size 8 id 55 */
  DWORD LowPart; /* bitsize 32, bitpos 0 */
  LONG HighPart; /* bitsize 32, bitpos 32 */
};
typedef struct _LUID /* id 55 */ LUID;
typedef struct _LUID /* id 55 */ *PLUID;
struct _LUID_AND_ATTRIBUTES { /* size 12 id 56 */
  LUID Luid; /* bitsize 64, bitpos 0 */
  DWORD Attributes; /* bitsize 32, bitpos 64 */
};
typedef struct _LUID_AND_ATTRIBUTES /* id 56 */ LUID_AND_ATTRIBUTES;
typedef struct _LUID_AND_ATTRIBUTES /* id 56 */ *PLUID_AND_ATTRIBUTES;
typedef LUID_AND_ATTRIBUTES LUID_AND_ATTRIBUTES_ARRAY[1]:uint32;
typedef LUID_AND_ATTRIBUTES_ARRAY *PLUID_AND_ATTRIBUTES_ARRAY;
struct _PRIVILEGE_SET { /* size 20 id 57 */
  DWORD PrivilegeCount; /* bitsize 32, bitpos 0 */
  DWORD Control; /* bitsize 32, bitpos 32 */
  LUID_AND_ATTRIBUTES Privilege[1]:uint32; /* bitsize 96, bitpos 64 */
};
typedef struct _PRIVILEGE_SET /* id 57 */ PRIVILEGE_SET;
typedef struct _PRIVILEGE_SET /* id 57 */ *PPRIVILEGE_SET;
struct _SECURITY_ATTRIBUTES { /* size 12 id 58 */
  DWORD nLength; /* bitsize 32, bitpos 0 */
  LPVOID lpSecurityDescriptor; /* bitsize 32, bitpos 32 */
  BOOL bInheritHandle; /* bitsize 32, bitpos 64 */
};
typedef struct _SECURITY_ATTRIBUTES /* id 58 */ SECURITY_ATTRIBUTES;
typedef struct _SECURITY_ATTRIBUTES /* id 58 */ *PSECURITY_ATTRIBUTES;
typedef struct _SECURITY_ATTRIBUTES /* id 58 */ *LPSECURITY_ATTRIBUTES;
enum _SECURITY_IMPERSONATION_LEVEL { SecurityAnonymous, SecurityIdentification, SecurityImpersonation, SecurityDelegation };
typedef enum _SECURITY_IMPERSONATION_LEVEL SECURITY_IMPERSONATION_LEVEL;
typedef enum _SECURITY_IMPERSONATION_LEVEL *PSECURITY_IMPERSONATION_LEVEL;
typedef BOOLEAN SECURITY_CONTEXT_TRACKING_MODE;
typedef BOOLEAN *PSECURITY_CONTEXT_TRACKING_MODE;
struct _SECURITY_QUALITY_OF_SERVICE { /* size 12 id 59 */
  DWORD Length; /* bitsize 32, bitpos 0 */
  SECURITY_IMPERSONATION_LEVEL ImpersonationLevel; /* bitsize 32, bitpos 32 */
  SECURITY_CONTEXT_TRACKING_MODE ContextTrackingMode; /* bitsize 8, bitpos 64 */
  BOOLEAN EffectiveOnly; /* bitsize 8, bitpos 72 */
};
typedef struct _SECURITY_QUALITY_OF_SERVICE /* id 59 */ SECURITY_QUALITY_OF_SERVICE;
typedef struct _SECURITY_QUALITY_OF_SERVICE /* id 59 */ *PSECURITY_QUALITY_OF_SERVICE;
typedef PVOID PACCESS_TOKEN;
struct _SE_IMPERSONATION_STATE { /* size 12 id 60 */
  PACCESS_TOKEN Token; /* bitsize 32, bitpos 0 */
  BOOLEAN CopyOnOpen; /* bitsize 8, bitpos 32 */
  BOOLEAN EffectiveOnly; /* bitsize 8, bitpos 40 */
  SECURITY_IMPERSONATION_LEVEL Level; /* bitsize 32, bitpos 64 */
};
typedef struct _SE_IMPERSONATION_STATE /* id 60 */ SE_IMPERSONATION_STATE;
typedef struct _SE_IMPERSONATION_STATE /* id 60 */ *PSE_IMPERSONATION_STATE;
struct _SID_IDENTIFIER_AUTHORITY { /* size 6 id 61 */
  BYTE Value[6]:uint32; /* bitsize 48, bitpos 0 */
};
typedef struct _SID_IDENTIFIER_AUTHORITY /* id 61 */ SID_IDENTIFIER_AUTHORITY;
typedef struct _SID_IDENTIFIER_AUTHORITY /* id 61 */ *PSID_IDENTIFIER_AUTHORITY;
typedef struct _SID_IDENTIFIER_AUTHORITY /* id 61 */ *LPSID_IDENTIFIER_AUTHORITY;
typedef PVOID PSID;
struct _SID { /* size 12 id 62 */
  BYTE Revision; /* bitsize 8, bitpos 0 */
  BYTE SubAuthorityCount; /* bitsize 8, bitpos 8 */
  SID_IDENTIFIER_AUTHORITY IdentifierAuthority; /* bitsize 48, bitpos 16 */
  DWORD SubAuthority[1]:uint32; /* bitsize 32, bitpos 64 */
};
typedef struct _SID /* id 62 */ SID;
typedef struct _SID /* id 62 */ *PISID;
struct _SID_AND_ATTRIBUTES { /* size 8 id 63 */
  PSID Sid; /* bitsize 32, bitpos 0 */
  DWORD Attributes; /* bitsize 32, bitpos 32 */
};
typedef struct _SID_AND_ATTRIBUTES /* id 63 */ SID_AND_ATTRIBUTES;
typedef struct _SID_AND_ATTRIBUTES /* id 63 */ *PSID_AND_ATTRIBUTES;
typedef SID_AND_ATTRIBUTES SID_AND_ATTRIBUTES_ARRAY[1]:uint32;
typedef SID_AND_ATTRIBUTES_ARRAY *PSID_AND_ATTRIBUTES_ARRAY;
struct _TOKEN_SOURCE { /* size 16 id 64 */
  CHAR SourceName[8]:uint32; /* bitsize 64, bitpos 0 */
  LUID SourceIdentifier; /* bitsize 64, bitpos 64 */
};
typedef struct _TOKEN_SOURCE /* id 64 */ TOKEN_SOURCE;
typedef struct _TOKEN_SOURCE /* id 64 */ *PTOKEN_SOURCE;
struct _TOKEN_CONTROL { /* size 40 id 65 */
  LUID TokenId; /* bitsize 64, bitpos 0 */
  LUID AuthenticationId; /* bitsize 64, bitpos 64 */
  LUID ModifiedId; /* bitsize 64, bitpos 128 */
  TOKEN_SOURCE TokenSource; /* bitsize 128, bitpos 192 */
};
typedef struct _TOKEN_CONTROL /* id 65 */ TOKEN_CONTROL;
typedef struct _TOKEN_CONTROL /* id 65 */ *PTOKEN_CONTROL;
struct _TOKEN_DEFAULT_DACL { /* size 4 id 66 */
  PACL DefaultDacl; /* bitsize 32, bitpos 0 */
};
typedef struct _TOKEN_DEFAULT_DACL /* id 66 */ TOKEN_DEFAULT_DACL;
typedef struct _TOKEN_DEFAULT_DACL /* id 66 */ *PTOKEN_DEFAULT_DACL;
struct _TOKEN_GROUPS { /* size 12 id 67 */
  DWORD GroupCount; /* bitsize 32, bitpos 0 */
  SID_AND_ATTRIBUTES Groups[1]:uint32; /* bitsize 64, bitpos 32 */
};
typedef struct _TOKEN_GROUPS /* id 67 */ TOKEN_GROUPS;
typedef struct _TOKEN_GROUPS /* id 67 */ *PTOKEN_GROUPS;
typedef struct _TOKEN_GROUPS /* id 67 */ *LPTOKEN_GROUPS;
struct _TOKEN_OWNER { /* size 4 id 68 */
  PSID Owner; /* bitsize 32, bitpos 0 */
};
typedef struct _TOKEN_OWNER /* id 68 */ TOKEN_OWNER;
typedef struct _TOKEN_OWNER /* id 68 */ *PTOKEN_OWNER;
struct _TOKEN_PRIMARY_GROUP { /* size 4 id 69 */
  PSID PrimaryGroup; /* bitsize 32, bitpos 0 */
};
typedef struct _TOKEN_PRIMARY_GROUP /* id 69 */ TOKEN_PRIMARY_GROUP;
typedef struct _TOKEN_PRIMARY_GROUP /* id 69 */ *PTOKEN_PRIMARY_GROUP;
struct _TOKEN_PRIVILEGES { /* size 16 id 70 */
  DWORD PrivilegeCount; /* bitsize 32, bitpos 0 */
  LUID_AND_ATTRIBUTES Privileges[1]:uint32; /* bitsize 96, bitpos 32 */
};
typedef struct _TOKEN_PRIVILEGES /* id 70 */ TOKEN_PRIVILEGES;
typedef struct _TOKEN_PRIVILEGES /* id 70 */ *PTOKEN_PRIVILEGES;
typedef struct _TOKEN_PRIVILEGES /* id 70 */ *LPTOKEN_PRIVILEGES;
enum tagTOKEN_TYPE { TokenPrimary = 1, TokenImpersonation };
typedef enum tagTOKEN_TYPE TOKEN_TYPE;
typedef enum tagTOKEN_TYPE *PTOKEN_TYPE;
struct _TOKEN_STATISTICS { /* size 56 id 71 */
  LUID TokenId; /* bitsize 64, bitpos 0 */
  LUID AuthenticationId; /* bitsize 64, bitpos 64 */
  LARGE_INTEGER ExpirationTime; /* bitsize 64, bitpos 128 */
  TOKEN_TYPE TokenType; /* bitsize 32, bitpos 192 */
  SECURITY_IMPERSONATION_LEVEL ImpersonationLevel; /* bitsize 32, bitpos 224 */
  DWORD DynamicCharged; /* bitsize 32, bitpos 256 */
  DWORD DynamicAvailable; /* bitsize 32, bitpos 288 */
  DWORD GroupCount; /* bitsize 32, bitpos 320 */
  DWORD PrivilegeCount; /* bitsize 32, bitpos 352 */
  LUID ModifiedId; /* bitsize 64, bitpos 384 */
};
typedef struct _TOKEN_STATISTICS /* id 71 */ TOKEN_STATISTICS;
typedef struct _TOKEN_STATISTICS /* id 71 */ *PTOKEN_STATISTICS;
struct _TOKEN_USER { /* size 8 id 72 */
  SID_AND_ATTRIBUTES User; /* bitsize 64, bitpos 0 */
};
typedef struct _TOKEN_USER /* id 72 */ TOKEN_USER;
typedef struct _TOKEN_USER /* id 72 */ *PTOKEN_USER;
typedef DWORD SECURITY_INFORMATION;
typedef DWORD *PSECURITY_INFORMATION;
typedef WORD SECURITY_DESCRIPTOR_CONTROL;
typedef WORD *PSECURITY_DESCRIPTOR_CONTROL;
struct _SECURITY_DESCRIPTOR { /* size 20 id 73 */
  BYTE Revision; /* bitsize 8, bitpos 0 */
  BYTE Sbz1; /* bitsize 8, bitpos 8 */
  SECURITY_DESCRIPTOR_CONTROL Control; /* bitsize 16, bitpos 16 */
  PSID Owner; /* bitsize 32, bitpos 32 */
  PSID Group; /* bitsize 32, bitpos 64 */
  PACL Sacl; /* bitsize 32, bitpos 96 */
  PACL Dacl; /* bitsize 32, bitpos 128 */
};
typedef struct _SECURITY_DESCRIPTOR /* id 73 */ SECURITY_DESCRIPTOR;
typedef struct _SECURITY_DESCRIPTOR /* id 73 */ *PSECURITY_DESCRIPTOR;
typedef struct _SECURITY_DESCRIPTOR /* id 73 */ *PISECURITY_DESCRIPTOR;
enum _TOKEN_INFORMATION_CLASS { TokenUser = 1, TokenGroups, TokenPrivileges, TokenOwner, TokenPrimaryGroup, TokenDefaultDacl, TokenSource, TokenType, TokenImpersonationLevel, TokenStatistics, TokenRestrictedSids, TokenSessionId, TokenGroupsAndPrivileges, TokenSessionReference, TokenSandBoxInert, TokenAuditPolicy, TokenOrigin };
typedef enum _TOKEN_INFORMATION_CLASS TOKEN_INFORMATION_CLASS;
enum _SID_NAME_USE { SidTypeUser = 1, SidTypeGroup, SidTypeDomain, SidTypeAlias, SidTypeWellKnownGroup, SidTypeDeletedAccount, SidTypeInvalid, SidTypeUnknown, SidTypeComputer };
typedef enum _SID_NAME_USE SID_NAME_USE;
typedef enum _SID_NAME_USE *PSID_NAME_USE;
struct _QUOTA_LIMITS { /* size 32 id 74 */
  long unsigned int PagedPoolLimit; /* bitsize 32, bitpos 0 */
  long unsigned int NonPagedPoolLimit; /* bitsize 32, bitpos 32 */
  long unsigned int MinimumWorkingSetSize; /* bitsize 32, bitpos 64 */
  long unsigned int MaximumWorkingSetSize; /* bitsize 32, bitpos 96 */
  long unsigned int PagefileLimit; /* bitsize 32, bitpos 128 */
  LARGE_INTEGER TimeLimit; /* bitsize 64, bitpos 192 */
};
typedef struct _QUOTA_LIMITS /* id 74 */ QUOTA_LIMITS;
typedef struct _QUOTA_LIMITS /* id 74 */ *PQUOTA_LIMITS;
struct _IO_COUNTERS { /* size 48 id 75 */
  ULONGLONG ReadOperationCount; /* bitsize 64, bitpos 0 */
  ULONGLONG WriteOperationCount; /* bitsize 64, bitpos 64 */
  ULONGLONG OtherOperationCount; /* bitsize 64, bitpos 128 */
  ULONGLONG ReadTransferCount; /* bitsize 64, bitpos 192 */
  ULONGLONG WriteTransferCount; /* bitsize 64, bitpos 256 */
  ULONGLONG OtherTransferCount; /* bitsize 64, bitpos 320 */
};
typedef struct _IO_COUNTERS /* id 75 */ IO_COUNTERS;
typedef struct _IO_COUNTERS /* id 75 */ *PIO_COUNTERS;
struct _FILE_NOTIFY_INFORMATION { /* size 16 id 76 */
  DWORD NextEntryOffset; /* bitsize 32, bitpos 0 */
  DWORD Action; /* bitsize 32, bitpos 32 */
  DWORD FileNameLength; /* bitsize 32, bitpos 64 */
  WCHAR FileName[1]:uint32; /* bitsize 16, bitpos 96 */
};
typedef struct _FILE_NOTIFY_INFORMATION /* id 76 */ FILE_NOTIFY_INFORMATION;
typedef struct _FILE_NOTIFY_INFORMATION /* id 76 */ *PFILE_NOTIFY_INFORMATION;
struct _TAPE_ERASE { /* size 8 id 77 */
  DWORD Type; /* bitsize 32, bitpos 0 */
  BOOLEAN Immediate; /* bitsize 8, bitpos 32 */
};
typedef struct _TAPE_ERASE /* id 77 */ TAPE_ERASE;
typedef struct _TAPE_ERASE /* id 77 */ *PTAPE_ERASE;
struct _TAPE_GET_DRIVE_PARAMETERS { /* size 32 id 78 */
  BOOLEAN ECC; /* bitsize 8, bitpos 0 */
  BOOLEAN Compression; /* bitsize 8, bitpos 8 */
  BOOLEAN DataPadding; /* bitsize 8, bitpos 16 */
  BOOLEAN ReportSetmarks; /* bitsize 8, bitpos 24 */
  DWORD DefaultBlockSize; /* bitsize 32, bitpos 32 */
  DWORD MaximumBlockSize; /* bitsize 32, bitpos 64 */
  DWORD MinimumBlockSize; /* bitsize 32, bitpos 96 */
  DWORD MaximumPartitionCount; /* bitsize 32, bitpos 128 */
  DWORD FeaturesLow; /* bitsize 32, bitpos 160 */
  DWORD FeaturesHigh; /* bitsize 32, bitpos 192 */
  DWORD EOTWarningZoneSize; /* bitsize 32, bitpos 224 */
};
typedef struct _TAPE_GET_DRIVE_PARAMETERS /* id 78 */ TAPE_GET_DRIVE_PARAMETERS;
typedef struct _TAPE_GET_DRIVE_PARAMETERS /* id 78 */ *PTAPE_GET_DRIVE_PARAMETERS;
struct _TAPE_GET_MEDIA_PARAMETERS { /* size 32 id 79 */
  LARGE_INTEGER Capacity; /* bitsize 64, bitpos 0 */
  LARGE_INTEGER Remaining; /* bitsize 64, bitpos 64 */
  DWORD BlockSize; /* bitsize 32, bitpos 128 */
  DWORD PartitionCount; /* bitsize 32, bitpos 160 */
  BOOLEAN WriteProtected; /* bitsize 8, bitpos 192 */
};
typedef struct _TAPE_GET_MEDIA_PARAMETERS /* id 79 */ TAPE_GET_MEDIA_PARAMETERS;
typedef struct _TAPE_GET_MEDIA_PARAMETERS /* id 79 */ *PTAPE_GET_MEDIA_PARAMETERS;
struct _TAPE_GET_POSITION { /* size 16 id 80 */
  ULONG Type; /* bitsize 32, bitpos 0 */
  ULONG Partition; /* bitsize 32, bitpos 32 */
  ULONG OffsetLow; /* bitsize 32, bitpos 64 */
  ULONG OffsetHigh; /* bitsize 32, bitpos 96 */
};
typedef struct _TAPE_GET_POSITION /* id 80 */ TAPE_GET_POSITION;
typedef struct _TAPE_GET_POSITION /* id 80 */ *PTAPE_GET_POSITION;
struct _TAPE_PREPARE { /* size 8 id 81 */
  DWORD Operation; /* bitsize 32, bitpos 0 */
  BOOLEAN Immediate; /* bitsize 8, bitpos 32 */
};
typedef struct _TAPE_PREPARE /* id 81 */ TAPE_PREPARE;
typedef struct _TAPE_PREPARE /* id 81 */ *PTAPE_PREPARE;
struct _TAPE_SET_DRIVE_PARAMETERS { /* size 8 id 82 */
  BOOLEAN ECC; /* bitsize 8, bitpos 0 */
  BOOLEAN Compression; /* bitsize 8, bitpos 8 */
  BOOLEAN DataPadding; /* bitsize 8, bitpos 16 */
  BOOLEAN ReportSetmarks; /* bitsize 8, bitpos 24 */
  ULONG EOTWarningZoneSize; /* bitsize 32, bitpos 32 */
};
typedef struct _TAPE_SET_DRIVE_PARAMETERS /* id 82 */ TAPE_SET_DRIVE_PARAMETERS;
typedef struct _TAPE_SET_DRIVE_PARAMETERS /* id 82 */ *PTAPE_SET_DRIVE_PARAMETERS;
struct _TAPE_SET_MEDIA_PARAMETERS { /* size 4 id 83 */
  ULONG BlockSize; /* bitsize 32, bitpos 0 */
};
typedef struct _TAPE_SET_MEDIA_PARAMETERS /* id 83 */ TAPE_SET_MEDIA_PARAMETERS;
typedef struct _TAPE_SET_MEDIA_PARAMETERS /* id 83 */ *PTAPE_SET_MEDIA_PARAMETERS;
struct _TAPE_SET_POSITION { /* size 24 id 84 */
  DWORD Method; /* bitsize 32, bitpos 0 */
  DWORD Partition; /* bitsize 32, bitpos 32 */
  LARGE_INTEGER Offset; /* bitsize 64, bitpos 64 */
  BOOLEAN Immediate; /* bitsize 8, bitpos 128 */
};
typedef struct _TAPE_SET_POSITION /* id 84 */ TAPE_SET_POSITION;
typedef struct _TAPE_SET_POSITION /* id 84 */ *PTAPE_SET_POSITION;
struct _TAPE_WRITE_MARKS { /* size 12 id 85 */
  DWORD Type; /* bitsize 32, bitpos 0 */
  DWORD Count; /* bitsize 32, bitpos 32 */
  BOOLEAN Immediate; /* bitsize 8, bitpos 64 */
};
typedef struct _TAPE_WRITE_MARKS /* id 85 */ TAPE_WRITE_MARKS;
typedef struct _TAPE_WRITE_MARKS /* id 85 */ *PTAPE_WRITE_MARKS;
struct _TAPE_CREATE_PARTITION { /* size 12 id 86 */
  DWORD Method; /* bitsize 32, bitpos 0 */
  DWORD Count; /* bitsize 32, bitpos 32 */
  DWORD Size; /* bitsize 32, bitpos 64 */
};
typedef struct _TAPE_CREATE_PARTITION /* id 86 */ TAPE_CREATE_PARTITION;
typedef struct _TAPE_CREATE_PARTITION /* id 86 */ *PTAPE_CREATE_PARTITION;
struct _MEMORY_BASIC_INFORMATION { /* size 28 id 87 */
  PVOID BaseAddress; /* bitsize 32, bitpos 0 */
  PVOID AllocationBase; /* bitsize 32, bitpos 32 */
  DWORD AllocationProtect; /* bitsize 32, bitpos 64 */
  DWORD RegionSize; /* bitsize 32, bitpos 96 */
  DWORD State; /* bitsize 32, bitpos 128 */
  DWORD Protect; /* bitsize 32, bitpos 160 */
  DWORD Type; /* bitsize 32, bitpos 192 */
};
typedef struct _MEMORY_BASIC_INFORMATION /* id 87 */ MEMORY_BASIC_INFORMATION;
typedef struct _MEMORY_BASIC_INFORMATION /* id 87 */ *PMEMORY_BASIC_INFORMATION;
struct _MESSAGE_RESOURCE_ENTRY { /* size 6 id 88 */
  WORD Length; /* bitsize 16, bitpos 0 */
  WORD Flags; /* bitsize 16, bitpos 16 */
  BYTE Text[1]:uint32; /* bitsize 8, bitpos 32 */
};
typedef struct _MESSAGE_RESOURCE_ENTRY /* id 88 */ MESSAGE_RESOURCE_ENTRY;
typedef struct _MESSAGE_RESOURCE_ENTRY /* id 88 */ *PMESSAGE_RESOURCE_ENTRY;
struct _MESSAGE_RESOURCE_BLOCK { /* size 12 id 89 */
  DWORD LowId; /* bitsize 32, bitpos 0 */
  DWORD HighId; /* bitsize 32, bitpos 32 */
  DWORD OffsetToEntries; /* bitsize 32, bitpos 64 */
};
typedef struct _MESSAGE_RESOURCE_BLOCK /* id 89 */ MESSAGE_RESOURCE_BLOCK;
typedef struct _MESSAGE_RESOURCE_BLOCK /* id 89 */ *PMESSAGE_RESOURCE_BLOCK;
struct _MESSAGE_RESOURCE_DATA { /* size 16 id 90 */
  DWORD NumberOfBlocks; /* bitsize 32, bitpos 0 */
  MESSAGE_RESOURCE_BLOCK Blocks[1]:uint32; /* bitsize 96, bitpos 32 */
};
typedef struct _MESSAGE_RESOURCE_DATA /* id 90 */ MESSAGE_RESOURCE_DATA;
typedef struct _MESSAGE_RESOURCE_DATA /* id 90 */ *PMESSAGE_RESOURCE_DATA;
struct _LIST_ENTRY { /* size 8 id 91 */
  struct _LIST_ENTRY /* id 91 */ *Flink; /* bitsize 32, bitpos 0 */
  struct _LIST_ENTRY /* id 91 */ *Blink; /* bitsize 32, bitpos 32 */
};
typedef struct _LIST_ENTRY /* id 91 */ LIST_ENTRY;
typedef struct _LIST_ENTRY /* id 91 */ *PLIST_ENTRY;
struct _SINGLE_LIST_ENTRY { /* size 4 id 92 */
  struct _SINGLE_LIST_ENTRY /* id 92 */ *Next; /* bitsize 32, bitpos 0 */
};
typedef struct _SINGLE_LIST_ENTRY /* id 92 */ SINGLE_LIST_ENTRY;
typedef struct _SINGLE_LIST_ENTRY /* id 92 */ *PSINGLE_LIST_ENTRY;
union _SLIST_HEADER { /* size 8 id 93 */
  ULONGLONG Alignment; /* bitsize 64, bitpos 0 */
  struct %anon94 { /* size 8 */
    SINGLE_LIST_ENTRY Next; /* bitsize 32, bitpos 0 */
    WORD Depth; /* bitsize 16, bitpos 32 */
    WORD Sequence; /* bitsize 16, bitpos 48 */
  }; /* bitsize 64, bitpos 0 */
};
typedef union _SLIST_HEADER /* id 93 */ SLIST_HEADER;
typedef union _SLIST_HEADER /* id 93 */ *PSLIST_HEADER;
struct _RTL_CRITICAL_SECTION_DEBUG { /* size 32 id 95 */
  WORD Type; /* bitsize 16, bitpos 0 */
  WORD CreatorBackTraceIndex; /* bitsize 16, bitpos 16 */
  struct _RTL_CRITICAL_SECTION /* id 96 */ *CriticalSection; /* bitsize 32, bitpos 32 */
  LIST_ENTRY ProcessLocksList; /* bitsize 64, bitpos 64 */
  DWORD EntryCount; /* bitsize 32, bitpos 128 */
  DWORD ContentionCount; /* bitsize 32, bitpos 160 */
  DWORD Spare[2]:uint32; /* bitsize 64, bitpos 192 */
};
typedef struct _RTL_CRITICAL_SECTION_DEBUG /* id 95 */ RTL_CRITICAL_SECTION_DEBUG;
typedef struct _RTL_CRITICAL_SECTION_DEBUG /* id 95 */ *PRTL_CRITICAL_SECTION_DEBUG;
struct _RTL_CRITICAL_SECTION { /* size 24 id 96 */
  PRTL_CRITICAL_SECTION_DEBUG DebugInfo; /* bitsize 32, bitpos 0 */
  LONG LockCount; /* bitsize 32, bitpos 32 */
  LONG RecursionCount; /* bitsize 32, bitpos 64 */
  HANDLE OwningThread; /* bitsize 32, bitpos 96 */
  HANDLE LockSemaphore; /* bitsize 32, bitpos 128 */
  DWORD Reserved; /* bitsize 32, bitpos 160 */
};
typedef struct _RTL_CRITICAL_SECTION /* id 96 */ RTL_CRITICAL_SECTION;
typedef struct _RTL_CRITICAL_SECTION /* id 96 */ *PRTL_CRITICAL_SECTION;
struct _EVENTLOGRECORD { /* size 56 id 97 */
  DWORD Length; /* bitsize 32, bitpos 0 */
  DWORD Reserved; /* bitsize 32, bitpos 32 */
  DWORD RecordNumber; /* bitsize 32, bitpos 64 */
  DWORD TimeGenerated; /* bitsize 32, bitpos 96 */
  DWORD TimeWritten; /* bitsize 32, bitpos 128 */
  DWORD EventID; /* bitsize 32, bitpos 160 */
  WORD EventType; /* bitsize 16, bitpos 192 */
  WORD NumStrings; /* bitsize 16, bitpos 208 */
  WORD EventCategory; /* bitsize 16, bitpos 224 */
  WORD ReservedFlags; /* bitsize 16, bitpos 240 */
  DWORD ClosingRecordNumber; /* bitsize 32, bitpos 256 */
  DWORD StringOffset; /* bitsize 32, bitpos 288 */
  DWORD UserSidLength; /* bitsize 32, bitpos 320 */
  DWORD UserSidOffset; /* bitsize 32, bitpos 352 */
  DWORD DataLength; /* bitsize 32, bitpos 384 */
  DWORD DataOffset; /* bitsize 32, bitpos 416 */
};
typedef struct _EVENTLOGRECORD /* id 97 */ EVENTLOGRECORD;
typedef struct _EVENTLOGRECORD /* id 97 */ *PEVENTLOGRECORD;
struct _OSVERSIONINFOA { /* size 148 id 98 */
  DWORD dwOSVersionInfoSize; /* bitsize 32, bitpos 0 */
  DWORD dwMajorVersion; /* bitsize 32, bitpos 32 */
  DWORD dwMinorVersion; /* bitsize 32, bitpos 64 */
  DWORD dwBuildNumber; /* bitsize 32, bitpos 96 */
  DWORD dwPlatformId; /* bitsize 32, bitpos 128 */
  CHAR szCSDVersion[128]:uint32; /* bitsize 1024, bitpos 160 */
};
typedef struct _OSVERSIONINFOA /* id 98 */ OSVERSIONINFOA;
typedef struct _OSVERSIONINFOA /* id 98 */ *POSVERSIONINFOA;
typedef struct _OSVERSIONINFOA /* id 98 */ *LPOSVERSIONINFOA;
struct _OSVERSIONINFOW { /* size 276 id 99 */
  DWORD dwOSVersionInfoSize; /* bitsize 32, bitpos 0 */
  DWORD dwMajorVersion; /* bitsize 32, bitpos 32 */
  DWORD dwMinorVersion; /* bitsize 32, bitpos 64 */
  DWORD dwBuildNumber; /* bitsize 32, bitpos 96 */
  DWORD dwPlatformId; /* bitsize 32, bitpos 128 */
  WCHAR szCSDVersion[128]:uint32; /* bitsize 2048, bitpos 160 */
};
typedef struct _OSVERSIONINFOW /* id 99 */ OSVERSIONINFOW;
typedef struct _OSVERSIONINFOW /* id 99 */ *POSVERSIONINFOW;
typedef struct _OSVERSIONINFOW /* id 99 */ *LPOSVERSIONINFOW;
struct _OSVERSIONINFOEXA { /* size 156 id 100 */
  DWORD dwOSVersionInfoSize; /* bitsize 32, bitpos 0 */
  DWORD dwMajorVersion; /* bitsize 32, bitpos 32 */
  DWORD dwMinorVersion; /* bitsize 32, bitpos 64 */
  DWORD dwBuildNumber; /* bitsize 32, bitpos 96 */
  DWORD dwPlatformId; /* bitsize 32, bitpos 128 */
  CHAR szCSDVersion[128]:uint32; /* bitsize 1024, bitpos 160 */
  WORD wServicePackMajor; /* bitsize 16, bitpos 1184 */
  WORD wServicePackMinor; /* bitsize 16, bitpos 1200 */
  WORD wSuiteMask; /* bitsize 16, bitpos 1216 */
  BYTE wProductType; /* bitsize 8, bitpos 1232 */
  BYTE wReserved; /* bitsize 8, bitpos 1240 */
};
typedef struct _OSVERSIONINFOEXA /* id 100 */ OSVERSIONINFOEXA;
typedef struct _OSVERSIONINFOEXA /* id 100 */ *POSVERSIONINFOEXA;
typedef struct _OSVERSIONINFOEXA /* id 100 */ *LPOSVERSIONINFOEXA;
struct _OSVERSIONINFOEXW { /* size 284 id 101 */
  DWORD dwOSVersionInfoSize; /* bitsize 32, bitpos 0 */
  DWORD dwMajorVersion; /* bitsize 32, bitpos 32 */
  DWORD dwMinorVersion; /* bitsize 32, bitpos 64 */
  DWORD dwBuildNumber; /* bitsize 32, bitpos 96 */
  DWORD dwPlatformId; /* bitsize 32, bitpos 128 */
  WCHAR szCSDVersion[128]:uint32; /* bitsize 2048, bitpos 160 */
  WORD wServicePackMajor; /* bitsize 16, bitpos 2208 */
  WORD wServicePackMinor; /* bitsize 16, bitpos 2224 */
  WORD wSuiteMask; /* bitsize 16, bitpos 2240 */
  BYTE wProductType; /* bitsize 8, bitpos 2256 */
  BYTE wReserved; /* bitsize 8, bitpos 2264 */
};
typedef struct _OSVERSIONINFOEXW /* id 101 */ OSVERSIONINFOEXW;
typedef struct _OSVERSIONINFOEXW /* id 101 */ *POSVERSIONINFOEXW;
typedef struct _OSVERSIONINFOEXW /* id 101 */ *LPOSVERSIONINFOEXW;
struct _IMAGE_VXD_HEADER { /* size 196 id 102 */
  WORD e32_magic; /* bitsize 16, bitpos 0 */
  BYTE e32_border; /* bitsize 8, bitpos 16 */
  BYTE e32_worder; /* bitsize 8, bitpos 24 */
  DWORD e32_level; /* bitsize 32, bitpos 32 */
  WORD e32_cpu; /* bitsize 16, bitpos 64 */
  WORD e32_os; /* bitsize 16, bitpos 80 */
  DWORD e32_ver; /* bitsize 32, bitpos 96 */
  DWORD e32_mflags; /* bitsize 32, bitpos 128 */
  DWORD e32_mpages; /* bitsize 32, bitpos 160 */
  DWORD e32_startobj; /* bitsize 32, bitpos 192 */
  DWORD e32_eip; /* bitsize 32, bitpos 224 */
  DWORD e32_stackobj; /* bitsize 32, bitpos 256 */
  DWORD e32_esp; /* bitsize 32, bitpos 288 */
  DWORD e32_pagesize; /* bitsize 32, bitpos 320 */
  DWORD e32_lastpagesize; /* bitsize 32, bitpos 352 */
  DWORD e32_fixupsize; /* bitsize 32, bitpos 384 */
  DWORD e32_fixupsum; /* bitsize 32, bitpos 416 */
  DWORD e32_ldrsize; /* bitsize 32, bitpos 448 */
  DWORD e32_ldrsum; /* bitsize 32, bitpos 480 */
  DWORD e32_objtab; /* bitsize 32, bitpos 512 */
  DWORD e32_objcnt; /* bitsize 32, bitpos 544 */
  DWORD e32_objmap; /* bitsize 32, bitpos 576 */
  DWORD e32_itermap; /* bitsize 32, bitpos 608 */
  DWORD e32_rsrctab; /* bitsize 32, bitpos 640 */
  DWORD e32_rsrccnt; /* bitsize 32, bitpos 672 */
  DWORD e32_restab; /* bitsize 32, bitpos 704 */
  DWORD e32_enttab; /* bitsize 32, bitpos 736 */
  DWORD e32_dirtab; /* bitsize 32, bitpos 768 */
  DWORD e32_dircnt; /* bitsize 32, bitpos 800 */
  DWORD e32_fpagetab; /* bitsize 32, bitpos 832 */
  DWORD e32_frectab; /* bitsize 32, bitpos 864 */
  DWORD e32_impmod; /* bitsize 32, bitpos 896 */
  DWORD e32_impmodcnt; /* bitsize 32, bitpos 928 */
  DWORD e32_impproc; /* bitsize 32, bitpos 960 */
  DWORD e32_pagesum; /* bitsize 32, bitpos 992 */
  DWORD e32_datapage; /* bitsize 32, bitpos 1024 */
  DWORD e32_preload; /* bitsize 32, bitpos 1056 */
  DWORD e32_nrestab; /* bitsize 32, bitpos 1088 */
  DWORD e32_cbnrestab; /* bitsize 32, bitpos 1120 */
  DWORD e32_nressum; /* bitsize 32, bitpos 1152 */
  DWORD e32_autodata; /* bitsize 32, bitpos 1184 */
  DWORD e32_debuginfo; /* bitsize 32, bitpos 1216 */
  DWORD e32_debuglen; /* bitsize 32, bitpos 1248 */
  DWORD e32_instpreload; /* bitsize 32, bitpos 1280 */
  DWORD e32_instdemand; /* bitsize 32, bitpos 1312 */
  DWORD e32_heapsize; /* bitsize 32, bitpos 1344 */
  BYTE e32_res3[12]:uint32; /* bitsize 96, bitpos 1376 */
  DWORD e32_winresoff; /* bitsize 32, bitpos 1472 */
  DWORD e32_winreslen; /* bitsize 32, bitpos 1504 */
  WORD e32_devid; /* bitsize 16, bitpos 1536 */
  WORD e32_ddkver; /* bitsize 16, bitpos 1552 */
};
typedef struct _IMAGE_VXD_HEADER /* id 102 */ IMAGE_VXD_HEADER;
typedef struct _IMAGE_VXD_HEADER /* id 102 */ *PIMAGE_VXD_HEADER;
struct _IMAGE_FILE_HEADER { /* size 20 id 103 */
  WORD Machine; /* bitsize 16, bitpos 0 */
  WORD NumberOfSections; /* bitsize 16, bitpos 16 */
  DWORD TimeDateStamp; /* bitsize 32, bitpos 32 */
  DWORD PointerToSymbolTable; /* bitsize 32, bitpos 64 */
  DWORD NumberOfSymbols; /* bitsize 32, bitpos 96 */
  WORD SizeOfOptionalHeader; /* bitsize 16, bitpos 128 */
  WORD Characteristics; /* bitsize 16, bitpos 144 */
};
typedef struct _IMAGE_FILE_HEADER /* id 103 */ IMAGE_FILE_HEADER;
typedef struct _IMAGE_FILE_HEADER /* id 103 */ *PIMAGE_FILE_HEADER;
struct _IMAGE_DATA_DIRECTORY { /* size 8 id 104 */
  DWORD VirtualAddress; /* bitsize 32, bitpos 0 */
  DWORD Size; /* bitsize 32, bitpos 32 */
};
typedef struct _IMAGE_DATA_DIRECTORY /* id 104 */ IMAGE_DATA_DIRECTORY;
typedef struct _IMAGE_DATA_DIRECTORY /* id 104 */ *PIMAGE_DATA_DIRECTORY;
struct _IMAGE_OPTIONAL_HEADER { /* size 224 id 105 */
  WORD Magic; /* bitsize 16, bitpos 0 */
  BYTE MajorLinkerVersion; /* bitsize 8, bitpos 16 */
  BYTE MinorLinkerVersion; /* bitsize 8, bitpos 24 */
  DWORD SizeOfCode; /* bitsize 32, bitpos 32 */
  DWORD SizeOfInitializedData; /* bitsize 32, bitpos 64 */
  DWORD SizeOfUninitializedData; /* bitsize 32, bitpos 96 */
  DWORD AddressOfEntryPoint; /* bitsize 32, bitpos 128 */
  DWORD BaseOfCode; /* bitsize 32, bitpos 160 */
  DWORD BaseOfData; /* bitsize 32, bitpos 192 */
  DWORD ImageBase; /* bitsize 32, bitpos 224 */
  DWORD SectionAlignment; /* bitsize 32, bitpos 256 */
  DWORD FileAlignment; /* bitsize 32, bitpos 288 */
  WORD MajorOperatingSystemVersion; /* bitsize 16, bitpos 320 */
  WORD MinorOperatingSystemVersion; /* bitsize 16, bitpos 336 */
  WORD MajorImageVersion; /* bitsize 16, bitpos 352 */
  WORD MinorImageVersion; /* bitsize 16, bitpos 368 */
  WORD MajorSubsystemVersion; /* bitsize 16, bitpos 384 */
  WORD MinorSubsystemVersion; /* bitsize 16, bitpos 400 */
  DWORD Win32VersionValue; /* bitsize 32, bitpos 416 */
  DWORD SizeOfImage; /* bitsize 32, bitpos 448 */
  DWORD SizeOfHeaders; /* bitsize 32, bitpos 480 */
  DWORD CheckSum; /* bitsize 32, bitpos 512 */
  WORD Subsystem; /* bitsize 16, bitpos 544 */
  WORD DllCharacteristics; /* bitsize 16, bitpos 560 */
  DWORD SizeOfStackReserve; /* bitsize 32, bitpos 576 */
  DWORD SizeOfStackCommit; /* bitsize 32, bitpos 608 */
  DWORD SizeOfHeapReserve; /* bitsize 32, bitpos 640 */
  DWORD SizeOfHeapCommit; /* bitsize 32, bitpos 672 */
  DWORD LoaderFlags; /* bitsize 32, bitpos 704 */
  DWORD NumberOfRvaAndSizes; /* bitsize 32, bitpos 736 */
  IMAGE_DATA_DIRECTORY DataDirectory[16]:uint32; /* bitsize 1024, bitpos 768 */
};
typedef struct _IMAGE_OPTIONAL_HEADER /* id 105 */ IMAGE_OPTIONAL_HEADER32;
typedef struct _IMAGE_OPTIONAL_HEADER /* id 105 */ *PIMAGE_OPTIONAL_HEADER32;
struct _IMAGE_OPTIONAL_HEADER64 { /* size 240 id 106 */
  WORD Magic; /* bitsize 16, bitpos 0 */
  BYTE MajorLinkerVersion; /* bitsize 8, bitpos 16 */
  BYTE MinorLinkerVersion; /* bitsize 8, bitpos 24 */
  DWORD SizeOfCode; /* bitsize 32, bitpos 32 */
  DWORD SizeOfInitializedData; /* bitsize 32, bitpos 64 */
  DWORD SizeOfUninitializedData; /* bitsize 32, bitpos 96 */
  DWORD AddressOfEntryPoint; /* bitsize 32, bitpos 128 */
  DWORD BaseOfCode; /* bitsize 32, bitpos 160 */
  ULONGLONG ImageBase; /* bitsize 64, bitpos 192 */
  DWORD SectionAlignment; /* bitsize 32, bitpos 256 */
  DWORD FileAlignment; /* bitsize 32, bitpos 288 */
  WORD MajorOperatingSystemVersion; /* bitsize 16, bitpos 320 */
  WORD MinorOperatingSystemVersion; /* bitsize 16, bitpos 336 */
  WORD MajorImageVersion; /* bitsize 16, bitpos 352 */
  WORD MinorImageVersion; /* bitsize 16, bitpos 368 */
  WORD MajorSubsystemVersion; /* bitsize 16, bitpos 384 */
  WORD MinorSubsystemVersion; /* bitsize 16, bitpos 400 */
  DWORD Win32VersionValue; /* bitsize 32, bitpos 416 */
  DWORD SizeOfImage; /* bitsize 32, bitpos 448 */
  DWORD SizeOfHeaders; /* bitsize 32, bitpos 480 */
  DWORD CheckSum; /* bitsize 32, bitpos 512 */
  WORD Subsystem; /* bitsize 16, bitpos 544 */
  WORD DllCharacteristics; /* bitsize 16, bitpos 560 */
  ULONGLONG SizeOfStackReserve; /* bitsize 64, bitpos 576 */
  ULONGLONG SizeOfStackCommit; /* bitsize 64, bitpos 640 */
  ULONGLONG SizeOfHeapReserve; /* bitsize 64, bitpos 704 */
  ULONGLONG SizeOfHeapCommit; /* bitsize 64, bitpos 768 */
  DWORD LoaderFlags; /* bitsize 32, bitpos 832 */
  DWORD NumberOfRvaAndSizes; /* bitsize 32, bitpos 864 */
  IMAGE_DATA_DIRECTORY DataDirectory[16]:uint32; /* bitsize 1024, bitpos 896 */
};
typedef struct _IMAGE_OPTIONAL_HEADER64 /* id 106 */ IMAGE_OPTIONAL_HEADER64;
typedef struct _IMAGE_OPTIONAL_HEADER64 /* id 106 */ *PIMAGE_OPTIONAL_HEADER64;
typedef IMAGE_OPTIONAL_HEADER32 IMAGE_OPTIONAL_HEADER;
typedef PIMAGE_OPTIONAL_HEADER32 PIMAGE_OPTIONAL_HEADER;
struct _IMAGE_ROM_OPTIONAL_HEADER { /* size 56 id 107 */
  WORD Magic; /* bitsize 16, bitpos 0 */
  BYTE MajorLinkerVersion; /* bitsize 8, bitpos 16 */
  BYTE MinorLinkerVersion; /* bitsize 8, bitpos 24 */
  DWORD SizeOfCode; /* bitsize 32, bitpos 32 */
  DWORD SizeOfInitializedData; /* bitsize 32, bitpos 64 */
  DWORD SizeOfUninitializedData; /* bitsize 32, bitpos 96 */
  DWORD AddressOfEntryPoint; /* bitsize 32, bitpos 128 */
  DWORD BaseOfCode; /* bitsize 32, bitpos 160 */
  DWORD BaseOfData; /* bitsize 32, bitpos 192 */
  DWORD BaseOfBss; /* bitsize 32, bitpos 224 */
  DWORD GprMask; /* bitsize 32, bitpos 256 */
  DWORD CprMask[4]:uint32; /* bitsize 128, bitpos 288 */
  DWORD GpValue; /* bitsize 32, bitpos 416 */
};
typedef struct _IMAGE_ROM_OPTIONAL_HEADER /* id 107 */ IMAGE_ROM_OPTIONAL_HEADER;
typedef struct _IMAGE_ROM_OPTIONAL_HEADER /* id 107 */ *PIMAGE_ROM_OPTIONAL_HEADER;
struct _IMAGE_DOS_HEADER { /* size 64 id 108 */
  WORD e_magic; /* bitsize 16, bitpos 0 */
  WORD e_cblp; /* bitsize 16, bitpos 16 */
  WORD e_cp; /* bitsize 16, bitpos 32 */
  WORD e_crlc; /* bitsize 16, bitpos 48 */
  WORD e_cparhdr; /* bitsize 16, bitpos 64 */
  WORD e_minalloc; /* bitsize 16, bitpos 80 */
  WORD e_maxalloc; /* bitsize 16, bitpos 96 */
  WORD e_ss; /* bitsize 16, bitpos 112 */
  WORD e_sp; /* bitsize 16, bitpos 128 */
  WORD e_csum; /* bitsize 16, bitpos 144 */
  WORD e_ip; /* bitsize 16, bitpos 160 */
  WORD e_cs; /* bitsize 16, bitpos 176 */
  WORD e_lfarlc; /* bitsize 16, bitpos 192 */
  WORD e_ovno; /* bitsize 16, bitpos 208 */
  WORD e_res[4]:uint32; /* bitsize 64, bitpos 224 */
  WORD e_oemid; /* bitsize 16, bitpos 288 */
  WORD e_oeminfo; /* bitsize 16, bitpos 304 */
  WORD e_res2[10]:uint32; /* bitsize 160, bitpos 320 */
  LONG e_lfanew; /* bitsize 32, bitpos 480 */
};
typedef struct _IMAGE_DOS_HEADER /* id 108 */ IMAGE_DOS_HEADER;
typedef struct _IMAGE_DOS_HEADER /* id 108 */ *PIMAGE_DOS_HEADER;
struct _IMAGE_OS2_HEADER { /* size 64 id 109 */
  WORD ne_magic; /* bitsize 16, bitpos 0 */
  CHAR ne_ver; /* bitsize 8, bitpos 16 */
  CHAR ne_rev; /* bitsize 8, bitpos 24 */
  WORD ne_enttab; /* bitsize 16, bitpos 32 */
  WORD ne_cbenttab; /* bitsize 16, bitpos 48 */
  LONG ne_crc; /* bitsize 32, bitpos 64 */
  WORD ne_flags; /* bitsize 16, bitpos 96 */
  WORD ne_autodata; /* bitsize 16, bitpos 112 */
  WORD ne_heap; /* bitsize 16, bitpos 128 */
  WORD ne_stack; /* bitsize 16, bitpos 144 */
  LONG ne_csip; /* bitsize 32, bitpos 160 */
  LONG ne_sssp; /* bitsize 32, bitpos 192 */
  WORD ne_cseg; /* bitsize 16, bitpos 224 */
  WORD ne_cmod; /* bitsize 16, bitpos 240 */
  WORD ne_cbnrestab; /* bitsize 16, bitpos 256 */
  WORD ne_segtab; /* bitsize 16, bitpos 272 */
  WORD ne_rsrctab; /* bitsize 16, bitpos 288 */
  WORD ne_restab; /* bitsize 16, bitpos 304 */
  WORD ne_modtab; /* bitsize 16, bitpos 320 */
  WORD ne_imptab; /* bitsize 16, bitpos 336 */
  LONG ne_nrestab; /* bitsize 32, bitpos 352 */
  WORD ne_cmovent; /* bitsize 16, bitpos 384 */
  WORD ne_align; /* bitsize 16, bitpos 400 */
  WORD ne_cres; /* bitsize 16, bitpos 416 */
  BYTE ne_exetyp; /* bitsize 8, bitpos 432 */
  BYTE ne_flagsothers; /* bitsize 8, bitpos 440 */
  WORD ne_pretthunks; /* bitsize 16, bitpos 448 */
  WORD ne_psegrefbytes; /* bitsize 16, bitpos 464 */
  WORD ne_swaparea; /* bitsize 16, bitpos 480 */
  WORD ne_expver; /* bitsize 16, bitpos 496 */
};
typedef struct _IMAGE_OS2_HEADER /* id 109 */ IMAGE_OS2_HEADER;
typedef struct _IMAGE_OS2_HEADER /* id 109 */ *PIMAGE_OS2_HEADER;
struct _IMAGE_NT_HEADERS { /* size 248 id 110 */
  DWORD Signature; /* bitsize 32, bitpos 0 */
  IMAGE_FILE_HEADER FileHeader; /* bitsize 160, bitpos 32 */
  IMAGE_OPTIONAL_HEADER OptionalHeader; /* bitsize 1792, bitpos 192 */
};
typedef struct _IMAGE_NT_HEADERS /* id 110 */ IMAGE_NT_HEADERS32;
typedef struct _IMAGE_NT_HEADERS /* id 110 */ *PIMAGE_NT_HEADERS32;
struct _IMAGE_NT_HEADERS64 { /* size 248 id 111 */
  DWORD Signature; /* bitsize 32, bitpos 0 */
  IMAGE_FILE_HEADER FileHeader; /* bitsize 160, bitpos 32 */
  IMAGE_OPTIONAL_HEADER OptionalHeader; /* bitsize 1792, bitpos 192 */
};
typedef struct _IMAGE_NT_HEADERS64 /* id 111 */ IMAGE_NT_HEADERS64;
typedef struct _IMAGE_NT_HEADERS64 /* id 111 */ *PIMAGE_NT_HEADERS64;
typedef IMAGE_NT_HEADERS32 IMAGE_NT_HEADERS;
typedef PIMAGE_NT_HEADERS32 PIMAGE_NT_HEADERS;
struct _IMAGE_ROM_HEADERS { /* size 76 id 112 */
  IMAGE_FILE_HEADER FileHeader; /* bitsize 160, bitpos 0 */
  IMAGE_ROM_OPTIONAL_HEADER OptionalHeader; /* bitsize 448, bitpos 160 */
};
typedef struct _IMAGE_ROM_HEADERS /* id 112 */ IMAGE_ROM_HEADERS;
typedef struct _IMAGE_ROM_HEADERS /* id 112 */ *PIMAGE_ROM_HEADERS;
struct _IMAGE_SECTION_HEADER { /* size 40 id 113 */
  BYTE Name[8]:uint32; /* bitsize 64, bitpos 0 */
  union %anon114 { /* size 4 */
    DWORD PhysicalAddress; /* bitsize 32, bitpos 0 */
    DWORD VirtualSize; /* bitsize 32, bitpos 0 */
  } Misc; /* bitsize 32, bitpos 64 */
  DWORD VirtualAddress; /* bitsize 32, bitpos 96 */
  DWORD SizeOfRawData; /* bitsize 32, bitpos 128 */
  DWORD PointerToRawData; /* bitsize 32, bitpos 160 */
  DWORD PointerToRelocations; /* bitsize 32, bitpos 192 */
  DWORD PointerToLinenumbers; /* bitsize 32, bitpos 224 */
  WORD NumberOfRelocations; /* bitsize 16, bitpos 256 */
  WORD NumberOfLinenumbers; /* bitsize 16, bitpos 272 */
  DWORD Characteristics; /* bitsize 32, bitpos 288 */
};
typedef struct _IMAGE_SECTION_HEADER /* id 113 */ IMAGE_SECTION_HEADER;
typedef struct _IMAGE_SECTION_HEADER /* id 113 */ *PIMAGE_SECTION_HEADER;
struct _IMAGE_SYMBOL { /* size 18 id 115 */
  union %anon116 { /* size 8 */
    BYTE ShortName[8]:uint32; /* bitsize 64, bitpos 0 */
    struct %anon117 { /* size 8 */
      DWORD Short; /* bitsize 32, bitpos 0 */
      DWORD Long; /* bitsize 32, bitpos 32 */
    } Name; /* bitsize 64, bitpos 0 */
    PBYTE LongName[2]:uint32; /* bitsize 64, bitpos 0 */
  } N; /* bitsize 64, bitpos 0 */
  DWORD Value; /* bitsize 32, bitpos 64 */
  SHORT SectionNumber; /* bitsize 16, bitpos 96 */
  WORD Type; /* bitsize 16, bitpos 112 */
  BYTE StorageClass; /* bitsize 8, bitpos 128 */
  BYTE NumberOfAuxSymbols; /* bitsize 8, bitpos 136 */
};
typedef struct _IMAGE_SYMBOL /* id 115 */ IMAGE_SYMBOL;
typedef struct _IMAGE_SYMBOL /* id 115 */ *PIMAGE_SYMBOL;
union _IMAGE_AUX_SYMBOL { /* size 18 id 118 */
  struct %anon119 { /* size 18 */
    DWORD TagIndex; /* bitsize 32, bitpos 0 */
    union %anon120 { /* size 4 */
      struct %anon121 { /* size 4 */
        WORD Linenumber; /* bitsize 16, bitpos 0 */
        WORD Size; /* bitsize 16, bitpos 16 */
      } LnSz; /* bitsize 32, bitpos 0 */
      DWORD TotalSize; /* bitsize 32, bitpos 0 */
    } Misc; /* bitsize 32, bitpos 32 */
    union %anon122 { /* size 8 */
      struct %anon123 { /* size 8 */
        DWORD PointerToLinenumber; /* bitsize 32, bitpos 0 */
        DWORD PointerToNextFunction; /* bitsize 32, bitpos 32 */
      } Function; /* bitsize 64, bitpos 0 */
      struct %anon124 { /* size 8 */
        WORD Dimension[4]:uint32; /* bitsize 64, bitpos 0 */
      } Array; /* bitsize 64, bitpos 0 */
    } FcnAry; /* bitsize 64, bitpos 64 */
    WORD TvIndex; /* bitsize 16, bitpos 128 */
  } Sym; /* bitsize 144, bitpos 0 */
  struct %anon125 { /* size 18 */
    BYTE Name[18]:uint32; /* bitsize 144, bitpos 0 */
  } File; /* bitsize 144, bitpos 0 */
  struct %anon126 { /* size 16 */
    DWORD Length; /* bitsize 32, bitpos 0 */
    WORD NumberOfRelocations; /* bitsize 16, bitpos 32 */
    WORD NumberOfLinenumbers; /* bitsize 16, bitpos 48 */
    DWORD CheckSum; /* bitsize 32, bitpos 64 */
    SHORT Number; /* bitsize 16, bitpos 96 */
    BYTE Selection; /* bitsize 8, bitpos 112 */
  } Section; /* bitsize 128, bitpos 0 */
};
typedef union _IMAGE_AUX_SYMBOL /* id 118 */ IMAGE_AUX_SYMBOL;
typedef union _IMAGE_AUX_SYMBOL /* id 118 */ *PIMAGE_AUX_SYMBOL;
struct _IMAGE_COFF_SYMBOLS_HEADER { /* size 32 id 127 */
  DWORD NumberOfSymbols; /* bitsize 32, bitpos 0 */
  DWORD LvaToFirstSymbol; /* bitsize 32, bitpos 32 */
  DWORD NumberOfLinenumbers; /* bitsize 32, bitpos 64 */
  DWORD LvaToFirstLinenumber; /* bitsize 32, bitpos 96 */
  DWORD RvaToFirstByteOfCode; /* bitsize 32, bitpos 128 */
  DWORD RvaToLastByteOfCode; /* bitsize 32, bitpos 160 */
  DWORD RvaToFirstByteOfData; /* bitsize 32, bitpos 192 */
  DWORD RvaToLastByteOfData; /* bitsize 32, bitpos 224 */
};
typedef struct _IMAGE_COFF_SYMBOLS_HEADER /* id 127 */ IMAGE_COFF_SYMBOLS_HEADER;
typedef struct _IMAGE_COFF_SYMBOLS_HEADER /* id 127 */ *PIMAGE_COFF_SYMBOLS_HEADER;
struct _IMAGE_RELOCATION { /* size 10 id 128 */
  union %anon129 { /* size 4 */
    DWORD VirtualAddress; /* bitsize 32, bitpos 0 */
    DWORD RelocCount; /* bitsize 32, bitpos 0 */
  }; /* bitsize 32, bitpos 0 */
  DWORD SymbolTableIndex; /* bitsize 32, bitpos 32 */
  WORD Type; /* bitsize 16, bitpos 64 */
};
typedef struct _IMAGE_RELOCATION /* id 128 */ IMAGE_RELOCATION;
typedef struct _IMAGE_RELOCATION /* id 128 */ *PIMAGE_RELOCATION;
struct _IMAGE_BASE_RELOCATION { /* size 8 id 130 */
  DWORD VirtualAddress; /* bitsize 32, bitpos 0 */
  DWORD SizeOfBlock; /* bitsize 32, bitpos 32 */
};
typedef struct _IMAGE_BASE_RELOCATION /* id 130 */ IMAGE_BASE_RELOCATION;
typedef struct _IMAGE_BASE_RELOCATION /* id 130 */ *PIMAGE_BASE_RELOCATION;
struct _IMAGE_LINENUMBER { /* size 6 id 131 */
  union %anon132 { /* size 4 */
    DWORD SymbolTableIndex; /* bitsize 32, bitpos 0 */
    DWORD VirtualAddress; /* bitsize 32, bitpos 0 */
  } Type; /* bitsize 32, bitpos 0 */
  WORD Linenumber; /* bitsize 16, bitpos 32 */
};
typedef struct _IMAGE_LINENUMBER /* id 131 */ IMAGE_LINENUMBER;
typedef struct _IMAGE_LINENUMBER /* id 131 */ *PIMAGE_LINENUMBER;
struct _IMAGE_ARCHIVE_MEMBER_HEADER { /* size 60 id 133 */
  BYTE Name[16]:uint32; /* bitsize 128, bitpos 0 */
  BYTE Date[12]:uint32; /* bitsize 96, bitpos 128 */
  BYTE UserID[6]:uint32; /* bitsize 48, bitpos 224 */
  BYTE GroupID[6]:uint32; /* bitsize 48, bitpos 272 */
  BYTE Mode[8]:uint32; /* bitsize 64, bitpos 320 */
  BYTE Size[10]:uint32; /* bitsize 80, bitpos 384 */
  BYTE EndHeader[2]:uint32; /* bitsize 16, bitpos 464 */
};
typedef struct _IMAGE_ARCHIVE_MEMBER_HEADER /* id 133 */ IMAGE_ARCHIVE_MEMBER_HEADER;
typedef struct _IMAGE_ARCHIVE_MEMBER_HEADER /* id 133 */ *PIMAGE_ARCHIVE_MEMBER_HEADER;
struct _IMAGE_EXPORT_DIRECTORY { /* size 40 id 134 */
  DWORD Characteristics; /* bitsize 32, bitpos 0 */
  DWORD TimeDateStamp; /* bitsize 32, bitpos 32 */
  WORD MajorVersion; /* bitsize 16, bitpos 64 */
  WORD MinorVersion; /* bitsize 16, bitpos 80 */
  DWORD Name; /* bitsize 32, bitpos 96 */
  DWORD Base; /* bitsize 32, bitpos 128 */
  DWORD NumberOfFunctions; /* bitsize 32, bitpos 160 */
  DWORD NumberOfNames; /* bitsize 32, bitpos 192 */
  DWORD AddressOfFunctions; /* bitsize 32, bitpos 224 */
  DWORD AddressOfNames; /* bitsize 32, bitpos 256 */
  DWORD AddressOfNameOrdinals; /* bitsize 32, bitpos 288 */
};
typedef struct _IMAGE_EXPORT_DIRECTORY /* id 134 */ IMAGE_EXPORT_DIRECTORY;
typedef struct _IMAGE_EXPORT_DIRECTORY /* id 134 */ *PIMAGE_EXPORT_DIRECTORY;
struct _IMAGE_IMPORT_BY_NAME { /* size 4 id 135 */
  WORD Hint; /* bitsize 16, bitpos 0 */
  BYTE Name[1]:uint32; /* bitsize 8, bitpos 16 */
};
typedef struct _IMAGE_IMPORT_BY_NAME /* id 135 */ IMAGE_IMPORT_BY_NAME;
typedef struct _IMAGE_IMPORT_BY_NAME /* id 135 */ *PIMAGE_IMPORT_BY_NAME;
struct _IMAGE_THUNK_DATA32 { /* size 4 id 136 */
  union %anon137 { /* size 4 */
    DWORD ForwarderString; /* bitsize 32, bitpos 0 */
    DWORD Function; /* bitsize 32, bitpos 0 */
    DWORD Ordinal; /* bitsize 32, bitpos 0 */
    DWORD AddressOfData; /* bitsize 32, bitpos 0 */
  } u1; /* bitsize 32, bitpos 0 */
};
typedef struct _IMAGE_THUNK_DATA32 /* id 136 */ IMAGE_THUNK_DATA32;
typedef struct _IMAGE_THUNK_DATA32 /* id 136 */ *PIMAGE_THUNK_DATA32;
struct _IMAGE_THUNK_DATA64 { /* size 8 id 138 */
  union %anon139 { /* size 8 */
    ULONGLONG ForwarderString; /* bitsize 64, bitpos 0 */
    ULONGLONG Function; /* bitsize 64, bitpos 0 */
    ULONGLONG Ordinal; /* bitsize 64, bitpos 0 */
    ULONGLONG AddressOfData; /* bitsize 64, bitpos 0 */
  } u1; /* bitsize 64, bitpos 0 */
};
typedef struct _IMAGE_THUNK_DATA64 /* id 138 */ IMAGE_THUNK_DATA64;
typedef struct _IMAGE_THUNK_DATA64 /* id 138 */ *PIMAGE_THUNK_DATA64;
typedef IMAGE_THUNK_DATA32 IMAGE_THUNK_DATA;
typedef PIMAGE_THUNK_DATA32 PIMAGE_THUNK_DATA;
struct _IMAGE_IMPORT_DESCRIPTOR { /* size 20 id 140 */
  union %anon141 { /* size 4 */
    DWORD Characteristics; /* bitsize 32, bitpos 0 */
    DWORD OriginalFirstThunk; /* bitsize 32, bitpos 0 */
  }; /* bitsize 32, bitpos 0 */
  DWORD TimeDateStamp; /* bitsize 32, bitpos 32 */
  DWORD ForwarderChain; /* bitsize 32, bitpos 64 */
  DWORD Name; /* bitsize 32, bitpos 96 */
  DWORD FirstThunk; /* bitsize 32, bitpos 128 */
};
typedef struct _IMAGE_IMPORT_DESCRIPTOR /* id 140 */ IMAGE_IMPORT_DESCRIPTOR;
typedef struct _IMAGE_IMPORT_DESCRIPTOR /* id 140 */ *PIMAGE_IMPORT_DESCRIPTOR;
struct _IMAGE_BOUND_IMPORT_DESCRIPTOR { /* size 8 id 142 */
  DWORD TimeDateStamp; /* bitsize 32, bitpos 0 */
  WORD OffsetModuleName; /* bitsize 16, bitpos 32 */
  WORD NumberOfModuleForwarderRefs; /* bitsize 16, bitpos 48 */
};
typedef struct _IMAGE_BOUND_IMPORT_DESCRIPTOR /* id 142 */ IMAGE_BOUND_IMPORT_DESCRIPTOR;
typedef struct _IMAGE_BOUND_IMPORT_DESCRIPTOR /* id 142 */ *PIMAGE_BOUND_IMPORT_DESCRIPTOR;
struct _IMAGE_BOUND_FORWARDER_REF { /* size 8 id 143 */
  DWORD TimeDateStamp; /* bitsize 32, bitpos 0 */
  WORD OffsetModuleName; /* bitsize 16, bitpos 32 */
  WORD Reserved; /* bitsize 16, bitpos 48 */
};
typedef struct _IMAGE_BOUND_FORWARDER_REF /* id 143 */ IMAGE_BOUND_FORWARDER_REF;
typedef struct _IMAGE_BOUND_FORWARDER_REF /* id 143 */ *PIMAGE_BOUND_FORWARDER_REF;
typedef void (*PIMAGE_TLS_CALLBACK) (/* unknown */);
struct _IMAGE_TLS_DIRECTORY32 { /* size 24 id 144 */
  DWORD StartAddressOfRawData; /* bitsize 32, bitpos 0 */
  DWORD EndAddressOfRawData; /* bitsize 32, bitpos 32 */
  DWORD AddressOfIndex; /* bitsize 32, bitpos 64 */
  DWORD AddressOfCallBacks; /* bitsize 32, bitpos 96 */
  DWORD SizeOfZeroFill; /* bitsize 32, bitpos 128 */
  DWORD Characteristics; /* bitsize 32, bitpos 160 */
};
typedef struct _IMAGE_TLS_DIRECTORY32 /* id 144 */ IMAGE_TLS_DIRECTORY32;
typedef struct _IMAGE_TLS_DIRECTORY32 /* id 144 */ *PIMAGE_TLS_DIRECTORY32;
struct _IMAGE_TLS_DIRECTORY64 { /* size 40 id 145 */
  ULONGLONG StartAddressOfRawData; /* bitsize 64, bitpos 0 */
  ULONGLONG EndAddressOfRawData; /* bitsize 64, bitpos 64 */
  ULONGLONG AddressOfIndex; /* bitsize 64, bitpos 128 */
  ULONGLONG AddressOfCallBacks; /* bitsize 64, bitpos 192 */
  DWORD SizeOfZeroFill; /* bitsize 32, bitpos 256 */
  DWORD Characteristics; /* bitsize 32, bitpos 288 */
};
typedef struct _IMAGE_TLS_DIRECTORY64 /* id 145 */ IMAGE_TLS_DIRECTORY64;
typedef struct _IMAGE_TLS_DIRECTORY64 /* id 145 */ *PIMAGE_TLS_DIRECTORY64;
typedef IMAGE_TLS_DIRECTORY32 IMAGE_TLS_DIRECTORY;
typedef PIMAGE_TLS_DIRECTORY32 PIMAGE_TLS_DIRECTORY;
struct _IMAGE_RESOURCE_DIRECTORY { /* size 16 id 146 */
  DWORD Characteristics; /* bitsize 32, bitpos 0 */
  DWORD TimeDateStamp; /* bitsize 32, bitpos 32 */
  WORD MajorVersion; /* bitsize 16, bitpos 64 */
  WORD MinorVersion; /* bitsize 16, bitpos 80 */
  WORD NumberOfNamedEntries; /* bitsize 16, bitpos 96 */
  WORD NumberOfIdEntries; /* bitsize 16, bitpos 112 */
};
typedef struct _IMAGE_RESOURCE_DIRECTORY /* id 146 */ IMAGE_RESOURCE_DIRECTORY;
typedef struct _IMAGE_RESOURCE_DIRECTORY /* id 146 */ *PIMAGE_RESOURCE_DIRECTORY;
struct _IMAGE_RESOURCE_DIRECTORY_ENTRY { /* size 8 id 147 */
  union %anon148 { /* size 4 */
    struct %anon149 { /* size 4 */
      DWORD NameOffset; /* bitsize 31, bitpos 0 */
      DWORD NameIsString; /* bitsize 1, bitpos 31 */
    }; /* bitsize 32, bitpos 0 */
    DWORD Name; /* bitsize 32, bitpos 0 */
    WORD Id; /* bitsize 16, bitpos 0 */
  }; /* bitsize 32, bitpos 0 */
  union %anon150 { /* size 4 */
    DWORD OffsetToData; /* bitsize 32, bitpos 0 */
    struct %anon151 { /* size 4 */
      DWORD OffsetToDirectory; /* bitsize 31, bitpos 0 */
      DWORD DataIsDirectory; /* bitsize 1, bitpos 31 */
    }; /* bitsize 32, bitpos 0 */
  }; /* bitsize 32, bitpos 32 */
};
typedef struct _IMAGE_RESOURCE_DIRECTORY_ENTRY /* id 147 */ IMAGE_RESOURCE_DIRECTORY_ENTRY;
typedef struct _IMAGE_RESOURCE_DIRECTORY_ENTRY /* id 147 */ *PIMAGE_RESOURCE_DIRECTORY_ENTRY;
struct _IMAGE_RESOURCE_DIRECTORY_STRING { /* size 4 id 152 */
  WORD Length; /* bitsize 16, bitpos 0 */
  CHAR NameString[1]:uint32; /* bitsize 8, bitpos 16 */
};
typedef struct _IMAGE_RESOURCE_DIRECTORY_STRING /* id 152 */ IMAGE_RESOURCE_DIRECTORY_STRING;
typedef struct _IMAGE_RESOURCE_DIRECTORY_STRING /* id 152 */ *PIMAGE_RESOURCE_DIRECTORY_STRING;
struct _IMAGE_RESOURCE_DIR_STRING_U { /* size 4 id 153 */
  WORD Length; /* bitsize 16, bitpos 0 */
  WCHAR NameString[1]:uint32; /* bitsize 16, bitpos 16 */
};
typedef struct _IMAGE_RESOURCE_DIR_STRING_U /* id 153 */ IMAGE_RESOURCE_DIR_STRING_U;
typedef struct _IMAGE_RESOURCE_DIR_STRING_U /* id 153 */ *PIMAGE_RESOURCE_DIR_STRING_U;
struct _IMAGE_RESOURCE_DATA_ENTRY { /* size 16 id 154 */
  DWORD OffsetToData; /* bitsize 32, bitpos 0 */
  DWORD Size; /* bitsize 32, bitpos 32 */
  DWORD CodePage; /* bitsize 32, bitpos 64 */
  DWORD Reserved; /* bitsize 32, bitpos 96 */
};
typedef struct _IMAGE_RESOURCE_DATA_ENTRY /* id 154 */ IMAGE_RESOURCE_DATA_ENTRY;
typedef struct _IMAGE_RESOURCE_DATA_ENTRY /* id 154 */ *PIMAGE_RESOURCE_DATA_ENTRY;
struct _IMAGE_LOAD_CONFIG_DIRECTORY { /* size 64 id 155 */
  DWORD Characteristics; /* bitsize 32, bitpos 0 */
  DWORD TimeDateStamp; /* bitsize 32, bitpos 32 */
  WORD MajorVersion; /* bitsize 16, bitpos 64 */
  WORD MinorVersion; /* bitsize 16, bitpos 80 */
  DWORD GlobalFlagsClear; /* bitsize 32, bitpos 96 */
  DWORD GlobalFlagsSet; /* bitsize 32, bitpos 128 */
  DWORD CriticalSectionDefaultTimeout; /* bitsize 32, bitpos 160 */
  DWORD DeCommitFreeBlockThreshold; /* bitsize 32, bitpos 192 */
  DWORD DeCommitTotalFreeThreshold; /* bitsize 32, bitpos 224 */
  PVOID LockPrefixTable; /* bitsize 32, bitpos 256 */
  DWORD MaximumAllocationSize; /* bitsize 32, bitpos 288 */
  DWORD VirtualMemoryThreshold; /* bitsize 32, bitpos 320 */
  DWORD ProcessHeapFlags; /* bitsize 32, bitpos 352 */
  DWORD Reserved[4]:uint32; /* bitsize 128, bitpos 384 */
};
typedef struct _IMAGE_LOAD_CONFIG_DIRECTORY /* id 155 */ IMAGE_LOAD_CONFIG_DIRECTORY;
typedef struct _IMAGE_LOAD_CONFIG_DIRECTORY /* id 155 */ *PIMAGE_LOAD_CONFIG_DIRECTORY;
typedef struct %anon156 { /* size 96 */
  DWORD Characteristics; /* bitsize 32, bitpos 0 */
  DWORD TimeDateStamp; /* bitsize 32, bitpos 32 */
  WORD MajorVersion; /* bitsize 16, bitpos 64 */
  WORD MinorVersion; /* bitsize 16, bitpos 80 */
  DWORD GlobalFlagsClear; /* bitsize 32, bitpos 96 */
  DWORD GlobalFlagsSet; /* bitsize 32, bitpos 128 */
  DWORD CriticalSectionDefaultTimeout; /* bitsize 32, bitpos 160 */
  ULONGLONG DeCommitFreeBlockThreshold; /* bitsize 64, bitpos 192 */
  ULONGLONG DeCommitTotalFreeThreshold; /* bitsize 64, bitpos 256 */
  ULONGLONG LockPrefixTable; /* bitsize 64, bitpos 320 */
  ULONGLONG MaximumAllocationSize; /* bitsize 64, bitpos 384 */
  ULONGLONG VirtualMemoryThreshold; /* bitsize 64, bitpos 448 */
  ULONGLONG ProcessAffinityMask; /* bitsize 64, bitpos 512 */
  DWORD ProcessHeapFlags; /* bitsize 32, bitpos 576 */
  WORD CSDFlags; /* bitsize 16, bitpos 608 */
  WORD Reserved1; /* bitsize 16, bitpos 624 */
  ULONGLONG EditList; /* bitsize 64, bitpos 640 */
  DWORD Reserved[2]:uint32; /* bitsize 64, bitpos 704 */
} IMAGE_LOAD_CONFIG_DIRECTORY64;
typedef struct %anon156 *PIMAGE_LOAD_CONFIG_DIRECTORY64;
struct _IMAGE_RUNTIME_FUNCTION_ENTRY { /* size 20 id 157 */
  DWORD BeginAddress; /* bitsize 32, bitpos 0 */
  DWORD EndAddress; /* bitsize 32, bitpos 32 */
  PVOID ExceptionHandler; /* bitsize 32, bitpos 64 */
  PVOID HandlerData; /* bitsize 32, bitpos 96 */
  DWORD PrologEndAddress; /* bitsize 32, bitpos 128 */
};
typedef struct _IMAGE_RUNTIME_FUNCTION_ENTRY /* id 157 */ IMAGE_RUNTIME_FUNCTION_ENTRY;
typedef struct _IMAGE_RUNTIME_FUNCTION_ENTRY /* id 157 */ *PIMAGE_RUNTIME_FUNCTION_ENTRY;
struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY { /* size 8 id 158 */
  unsigned int FuncStart; /* bitsize 32, bitpos 0 */
  unsigned int PrologLen; /* bitsize 8, bitpos 32 */
  unsigned int FuncLen; /* bitsize 22, bitpos 40 */
  unsigned int ThirtyTwoBit; /* bitsize 1, bitpos 62 */
  unsigned int ExceptionFlag; /* bitsize 1, bitpos 63 */
};
typedef struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY /* id 158 */ IMAGE_CE_RUNTIME_FUNCTION_ENTRY;
typedef struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY /* id 158 */ *PIMAGE_CE_RUNTIME_FUNCTION_ENTRY;
struct _IMAGE_DEBUG_DIRECTORY { /* size 28 id 159 */
  DWORD Characteristics; /* bitsize 32, bitpos 0 */
  DWORD TimeDateStamp; /* bitsize 32, bitpos 32 */
  WORD MajorVersion; /* bitsize 16, bitpos 64 */
  WORD MinorVersion; /* bitsize 16, bitpos 80 */
  DWORD Type; /* bitsize 32, bitpos 96 */
  DWORD SizeOfData; /* bitsize 32, bitpos 128 */
  DWORD AddressOfRawData; /* bitsize 32, bitpos 160 */
  DWORD PointerToRawData; /* bitsize 32, bitpos 192 */
};
typedef struct _IMAGE_DEBUG_DIRECTORY /* id 159 */ IMAGE_DEBUG_DIRECTORY;
typedef struct _IMAGE_DEBUG_DIRECTORY /* id 159 */ *PIMAGE_DEBUG_DIRECTORY;
struct _FPO_DATA { /* size 16 id 160 */
  DWORD ulOffStart; /* bitsize 32, bitpos 0 */
  DWORD cbProcSize; /* bitsize 32, bitpos 32 */
  DWORD cdwLocals; /* bitsize 32, bitpos 64 */
  WORD cdwParams; /* bitsize 16, bitpos 96 */
  WORD cbProlog; /* bitsize 8, bitpos 112 */
  WORD cbRegs; /* bitsize 3, bitpos 120 */
  WORD fHasSEH; /* bitsize 1, bitpos 123 */
  WORD fUseBP; /* bitsize 1, bitpos 124 */
  WORD reserved; /* bitsize 1, bitpos 125 */
  WORD cbFrame; /* bitsize 2, bitpos 126 */
};
typedef struct _FPO_DATA /* id 160 */ FPO_DATA;
typedef struct _FPO_DATA /* id 160 */ *PFPO_DATA;
struct _IMAGE_DEBUG_MISC { /* size 16 id 161 */
  DWORD DataType; /* bitsize 32, bitpos 0 */
  DWORD Length; /* bitsize 32, bitpos 32 */
  BOOLEAN Unicode; /* bitsize 8, bitpos 64 */
  BYTE Reserved[3]:uint32; /* bitsize 24, bitpos 72 */
  BYTE Data[1]:uint32; /* bitsize 8, bitpos 96 */
};
typedef struct _IMAGE_DEBUG_MISC /* id 161 */ IMAGE_DEBUG_MISC;
typedef struct _IMAGE_DEBUG_MISC /* id 161 */ *PIMAGE_DEBUG_MISC;
struct _IMAGE_FUNCTION_ENTRY { /* size 12 id 162 */
  DWORD StartingAddress; /* bitsize 32, bitpos 0 */
  DWORD EndingAddress; /* bitsize 32, bitpos 32 */
  DWORD EndOfPrologue; /* bitsize 32, bitpos 64 */
};
typedef struct _IMAGE_FUNCTION_ENTRY /* id 162 */ IMAGE_FUNCTION_ENTRY;
typedef struct _IMAGE_FUNCTION_ENTRY /* id 162 */ *PIMAGE_FUNCTION_ENTRY;
struct _IMAGE_FUNCTION_ENTRY64 { /* size 24 id 163 */
  ULONGLONG StartingAddress; /* bitsize 64, bitpos 0 */
  ULONGLONG EndingAddress; /* bitsize 64, bitpos 64 */
  union %anon164 { /* size 8 */
    ULONGLONG EndOfPrologue; /* bitsize 64, bitpos 0 */
    ULONGLONG UnwindInfoAddress; /* bitsize 64, bitpos 0 */
  }; /* bitsize 64, bitpos 128 */
};
typedef struct _IMAGE_FUNCTION_ENTRY64 /* id 163 */ IMAGE_FUNCTION_ENTRY64;
typedef struct _IMAGE_FUNCTION_ENTRY64 /* id 163 */ *PIMAGE_FUNCTION_ENTRY64;
struct _IMAGE_SEPARATE_DEBUG_HEADER { /* size 48 id 165 */
  WORD Signature; /* bitsize 16, bitpos 0 */
  WORD Flags; /* bitsize 16, bitpos 16 */
  WORD Machine; /* bitsize 16, bitpos 32 */
  WORD Characteristics; /* bitsize 16, bitpos 48 */
  DWORD TimeDateStamp; /* bitsize 32, bitpos 64 */
  DWORD CheckSum; /* bitsize 32, bitpos 96 */
  DWORD ImageBase; /* bitsize 32, bitpos 128 */
  DWORD SizeOfImage; /* bitsize 32, bitpos 160 */
  DWORD NumberOfSections; /* bitsize 32, bitpos 192 */
  DWORD ExportedNamesSize; /* bitsize 32, bitpos 224 */
  DWORD DebugDirectorySize; /* bitsize 32, bitpos 256 */
  DWORD SectionAlignment; /* bitsize 32, bitpos 288 */
  DWORD Reserved[2]:uint32; /* bitsize 64, bitpos 320 */
};
typedef struct _IMAGE_SEPARATE_DEBUG_HEADER /* id 165 */ IMAGE_SEPARATE_DEBUG_HEADER;
typedef struct _IMAGE_SEPARATE_DEBUG_HEADER /* id 165 */ *PIMAGE_SEPARATE_DEBUG_HEADER;
enum _CM_SERVICE_NODE_TYPE { DriverType = 1, FileSystemType, Win32ServiceOwnProcess = 16, Win32ServiceShareProcess = 32, AdapterType = 4, RecognizerType = 8 };
typedef enum _CM_SERVICE_NODE_TYPE SERVICE_NODE_TYPE;
enum _CM_SERVICE_LOAD_TYPE { BootLoad, SystemLoad, AutoLoad, DemandLoad, DisableLoad };
typedef enum _CM_SERVICE_LOAD_TYPE SERVICE_LOAD_TYPE;
enum _CM_ERROR_CONTROL_TYPE { IgnoreError, NormalError, SevereError, CriticalError };
typedef enum _CM_ERROR_CONTROL_TYPE SERVICE_ERROR_TYPE;
struct _NT_TIB { /* size 28 id 166 */
  struct _EXCEPTION_REGISTRATION_RECORD /* id 0 */ *ExceptionList; /* bitsize 32, bitpos 0 */
  PVOID StackBase; /* bitsize 32, bitpos 32 */
  PVOID StackLimit; /* bitsize 32, bitpos 64 */
  PVOID SubSystemTib; /* bitsize 32, bitpos 96 */
  union %anon167 { /* size 4 */
    PVOID FiberData; /* bitsize 32, bitpos 0 */
    DWORD Version; /* bitsize 32, bitpos 0 */
  }; /* bitsize 32, bitpos 128 */
  PVOID ArbitraryUserPointer; /* bitsize 32, bitpos 160 */
  struct _NT_TIB /* id 166 */ *Self; /* bitsize 32, bitpos 192 */
};
typedef struct _NT_TIB /* id 166 */ NT_TIB;
typedef struct _NT_TIB /* id 166 */ *PNT_TIB;
struct _REPARSE_DATA_BUFFER { /* size 24 id 168 */
  DWORD ReparseTag; /* bitsize 32, bitpos 0 */
  WORD ReparseDataLength; /* bitsize 16, bitpos 32 */
  WORD Reserved; /* bitsize 16, bitpos 48 */
  union %anon169 { /* size 16 */
    struct %anon170 { /* size 16 */
      WORD SubstituteNameOffset; /* bitsize 16, bitpos 0 */
      WORD SubstituteNameLength; /* bitsize 16, bitpos 16 */
      WORD PrintNameOffset; /* bitsize 16, bitpos 32 */
      WORD PrintNameLength; /* bitsize 16, bitpos 48 */
      ULONG Flags; /* bitsize 32, bitpos 64 */
      WCHAR PathBuffer[1]:uint32; /* bitsize 16, bitpos 96 */
    } SymbolicLinkReparseBuffer; /* bitsize 128, bitpos 0 */
    struct %anon171 { /* size 10 */
      WORD SubstituteNameOffset; /* bitsize 16, bitpos 0 */
      WORD SubstituteNameLength; /* bitsize 16, bitpos 16 */
      WORD PrintNameOffset; /* bitsize 16, bitpos 32 */
      WORD PrintNameLength; /* bitsize 16, bitpos 48 */
      WCHAR PathBuffer[1]:uint32; /* bitsize 16, bitpos 64 */
    } MountPointReparseBuffer; /* bitsize 80, bitpos 0 */
    struct %anon172 { /* size 1 */
      BYTE DataBuffer[1]:uint32; /* bitsize 8, bitpos 0 */
    } GenericReparseBuffer; /* bitsize 8, bitpos 0 */
  }; /* bitsize 128, bitpos 64 */
};
typedef struct _REPARSE_DATA_BUFFER /* id 168 */ REPARSE_DATA_BUFFER;
typedef struct _REPARSE_DATA_BUFFER /* id 168 */ *PREPARSE_DATA_BUFFER;
struct _REPARSE_GUID_DATA_BUFFER { /* size 28 id 173 */
  DWORD ReparseTag; /* bitsize 32, bitpos 0 */
  WORD ReparseDataLength; /* bitsize 16, bitpos 32 */
  WORD Reserved; /* bitsize 16, bitpos 48 */
  GUID ReparseGuid; /* bitsize 128, bitpos 64 */
  struct %anon172 { /* size 1 */
    BYTE DataBuffer[1]:uint32; /* bitsize 8, bitpos 0 */
  } GenericReparseBuffer; /* bitsize 8, bitpos 192 */
};
typedef struct _REPARSE_GUID_DATA_BUFFER /* id 173 */ REPARSE_GUID_DATA_BUFFER;
typedef struct _REPARSE_GUID_DATA_BUFFER /* id 173 */ *PREPARSE_GUID_DATA_BUFFER;
struct _REPARSE_POINT_INFORMATION { /* size 4 id 174 */
  WORD ReparseDataLength; /* bitsize 16, bitpos 0 */
  WORD UnparsedNameLength; /* bitsize 16, bitpos 16 */
};
typedef struct _REPARSE_POINT_INFORMATION /* id 174 */ REPARSE_POINT_INFORMATION;
typedef struct _REPARSE_POINT_INFORMATION /* id 174 */ *PREPARSE_POINT_INFORMATION;
union _FILE_SEGMENT_ELEMENT { /* size 8 id 175 */
  PVOID64 Buffer; /* bitsize 32, bitpos 0 */
  ULONGLONG Alignment; /* bitsize 64, bitpos 0 */
};
typedef union _FILE_SEGMENT_ELEMENT /* id 175 */ FILE_SEGMENT_ELEMENT;
typedef union _FILE_SEGMENT_ELEMENT /* id 175 */ *PFILE_SEGMENT_ELEMENT;
enum _JOBOBJECTINFOCLASS { JobObjectBasicAccountingInformation = 1, JobObjectBasicLimitInformation, JobObjectBasicProcessIdList, JobObjectBasicUIRestrictions, JobObjectSecurityLimitInformation, JobObjectEndOfJobTimeInformation, JobObjectAssociateCompletionPortInformation, JobObjectBasicAndIoAccountingInformation, JobObjectExtendedLimitInformation, JobObjectJobSetInformation, MaxJobObjectInfoClass };
typedef enum _JOBOBJECTINFOCLASS JOBOBJECTINFOCLASS;
struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION { /* size 48 id 176 */
  LARGE_INTEGER TotalUserTime; /* bitsize 64, bitpos 0 */
  LARGE_INTEGER TotalKernelTime; /* bitsize 64, bitpos 64 */
  LARGE_INTEGER ThisPeriodTotalUserTime; /* bitsize 64, bitpos 128 */
  LARGE_INTEGER ThisPeriodTotalKernelTime; /* bitsize 64, bitpos 192 */
  DWORD TotalPageFaultCount; /* bitsize 32, bitpos 256 */
  DWORD TotalProcesses; /* bitsize 32, bitpos 288 */
  DWORD ActiveProcesses; /* bitsize 32, bitpos 320 */
  DWORD TotalTerminatedProcesses; /* bitsize 32, bitpos 352 */
};
typedef struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION /* id 176 */ JOBOBJECT_BASIC_ACCOUNTING_INFORMATION;
typedef struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION /* id 176 */ *PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION;
struct _JOBOBJECT_BASIC_LIMIT_INFORMATION { /* size 48 id 177 */
  LARGE_INTEGER PerProcessUserTimeLimit; /* bitsize 64, bitpos 0 */
  LARGE_INTEGER PerJobUserTimeLimit; /* bitsize 64, bitpos 64 */
  DWORD LimitFlags; /* bitsize 32, bitpos 128 */
  long unsigned int MinimumWorkingSetSize; /* bitsize 32, bitpos 160 */
  long unsigned int MaximumWorkingSetSize; /* bitsize 32, bitpos 192 */
  DWORD ActiveProcessLimit; /* bitsize 32, bitpos 224 */
  long unsigned int Affinity; /* bitsize 32, bitpos 256 */
  DWORD PriorityClass; /* bitsize 32, bitpos 288 */
  DWORD SchedulingClass; /* bitsize 32, bitpos 320 */
};
typedef struct _JOBOBJECT_BASIC_LIMIT_INFORMATION /* id 177 */ JOBOBJECT_BASIC_LIMIT_INFORMATION;
typedef struct _JOBOBJECT_BASIC_LIMIT_INFORMATION /* id 177 */ *PJOBOBJECT_BASIC_LIMIT_INFORMATION;
struct _JOBOBJECT_BASIC_PROCESS_ID_LIST { /* size 12 id 178 */
  DWORD NumberOfAssignedProcesses; /* bitsize 32, bitpos 0 */
  DWORD NumberOfProcessIdsInList; /* bitsize 32, bitpos 32 */
  long unsigned int ProcessIdList[1]:uint32; /* bitsize 32, bitpos 64 */
};
typedef struct _JOBOBJECT_BASIC_PROCESS_ID_LIST /* id 178 */ JOBOBJECT_BASIC_PROCESS_ID_LIST;
typedef struct _JOBOBJECT_BASIC_PROCESS_ID_LIST /* id 178 */ *PJOBOBJECT_BASIC_PROCESS_ID_LIST;
struct _JOBOBJECT_BASIC_UI_RESTRICTIONS { /* size 4 id 179 */
  DWORD UIRestrictionsClass; /* bitsize 32, bitpos 0 */
};
typedef struct _JOBOBJECT_BASIC_UI_RESTRICTIONS /* id 179 */ JOBOBJECT_BASIC_UI_RESTRICTIONS;
typedef struct _JOBOBJECT_BASIC_UI_RESTRICTIONS /* id 179 */ *PJOBOBJECT_BASIC_UI_RESTRICTIONS;
struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION { /* size 20 id 180 */
  DWORD SecurityLimitFlags; /* bitsize 32, bitpos 0 */
  HANDLE JobToken; /* bitsize 32, bitpos 32 */
  PTOKEN_GROUPS SidsToDisable; /* bitsize 32, bitpos 64 */
  PTOKEN_PRIVILEGES PrivilegesToDelete; /* bitsize 32, bitpos 96 */
  PTOKEN_GROUPS RestrictedSids; /* bitsize 32, bitpos 128 */
};
typedef struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION /* id 180 */ JOBOBJECT_SECURITY_LIMIT_INFORMATION;
typedef struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION /* id 180 */ *PJOBOBJECT_SECURITY_LIMIT_INFORMATION;
struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION { /* size 4 id 181 */
  DWORD EndOfJobTimeAction; /* bitsize 32, bitpos 0 */
};
typedef struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION /* id 181 */ JOBOBJECT_END_OF_JOB_TIME_INFORMATION;
typedef struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION /* id 181 */ *PJOBOBJECT_END_OF_JOB_TIME_INFORMATION;
struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT { /* size 8 id 182 */
  PVOID CompletionKey; /* bitsize 32, bitpos 0 */
  HANDLE CompletionPort; /* bitsize 32, bitpos 32 */
};
typedef struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT /* id 182 */ JOBOBJECT_ASSOCIATE_COMPLETION_PORT;
typedef struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT /* id 182 */ *PJOBOBJECT_ASSOCIATE_COMPLETION_PORT;
struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION { /* size 96 id 183 */
  JOBOBJECT_BASIC_ACCOUNTING_INFORMATION BasicInfo; /* bitsize 384, bitpos 0 */
  IO_COUNTERS IoInfo; /* bitsize 384, bitpos 384 */
};
typedef struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION /* id 183 */ JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION;
typedef struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION /* id 183 */ *PJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION;
struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION { /* size 112 id 184 */
  JOBOBJECT_BASIC_LIMIT_INFORMATION BasicLimitInformation; /* bitsize 384, bitpos 0 */
  IO_COUNTERS IoInfo; /* bitsize 384, bitpos 384 */
  long unsigned int ProcessMemoryLimit; /* bitsize 32, bitpos 768 */
  long unsigned int JobMemoryLimit; /* bitsize 32, bitpos 800 */
  long unsigned int PeakProcessMemoryUsed; /* bitsize 32, bitpos 832 */
  long unsigned int PeakJobMemoryUsed; /* bitsize 32, bitpos 864 */
};
typedef struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION /* id 184 */ JOBOBJECT_EXTENDED_LIMIT_INFORMATION;
typedef struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION /* id 184 */ *PJOBOBJECT_EXTENDED_LIMIT_INFORMATION;
struct _JOBOBJECT_JOBSET_INFORMATION { /* size 4 id 185 */
  DWORD MemberLevel; /* bitsize 32, bitpos 0 */
};
typedef struct _JOBOBJECT_JOBSET_INFORMATION /* id 185 */ JOBOBJECT_JOBSET_INFORMATION;
typedef struct _JOBOBJECT_JOBSET_INFORMATION /* id 185 */ *PJOBOBJECT_JOBSET_INFORMATION;
enum _LATENCY_TIME { LT_DONT_CARE, LT_LOWEST_LATENCY };
typedef enum _LATENCY_TIME LATENCY_TIME;
typedef enum _LATENCY_TIME *PLATENCY_TIME;
enum _SYSTEM_POWER_STATE { PowerSystemUnspecified, PowerSystemWorking, PowerSystemSleeping1, PowerSystemSleeping2, PowerSystemSleeping3, PowerSystemHibernate, PowerSystemShutdown, PowerSystemMaximum };
typedef enum _SYSTEM_POWER_STATE SYSTEM_POWER_STATE;
typedef enum _SYSTEM_POWER_STATE *PSYSTEM_POWER_STATE;
typedef enum { PowerActionNone, PowerActionReserved, PowerActionSleep, PowerActionHibernate, PowerActionShutdown, PowerActionShutdownReset, PowerActionShutdownOff, PowerActionWarmEject } POWER_ACTION;
typedef (enum { PowerActionNone, PowerActionReserved, PowerActionSleep, PowerActionHibernate, PowerActionShutdown, PowerActionShutdownReset, PowerActionShutdownOff, PowerActionWarmEject }) *PPOWER_ACTION;
enum _DEVICE_POWER_STATE { PowerDeviceUnspecified, PowerDeviceD0, PowerDeviceD1, PowerDeviceD2, PowerDeviceD3, PowerDeviceMaximum };
typedef enum _DEVICE_POWER_STATE DEVICE_POWER_STATE;
typedef enum _DEVICE_POWER_STATE *PDEVICE_POWER_STATE;
typedef struct %anon186 { /* size 8 */
  DWORD Granularity; /* bitsize 32, bitpos 0 */
  DWORD Capacity; /* bitsize 32, bitpos 32 */
} BATTERY_REPORTING_SCALE;
typedef struct %anon186 *PBATTERY_REPORTING_SCALE;
struct _POWER_ACTION_POLICY { /* size 12 id 187 */
  POWER_ACTION Action; /* bitsize 32, bitpos 0 */
  ULONG Flags; /* bitsize 32, bitpos 32 */
  ULONG EventCode; /* bitsize 32, bitpos 64 */
};
typedef struct _POWER_ACTION_POLICY /* id 187 */ POWER_ACTION_POLICY;
typedef struct _POWER_ACTION_POLICY /* id 187 */ *PPOWER_ACTION_POLICY;
struct _SYSTEM_POWER_LEVEL { /* size 24 id 188 */
  BOOLEAN Enable; /* bitsize 8, bitpos 0 */
  UCHAR Spare[3]:uint32; /* bitsize 24, bitpos 8 */
  ULONG BatteryLevel; /* bitsize 32, bitpos 32 */
  POWER_ACTION_POLICY PowerPolicy; /* bitsize 96, bitpos 64 */
  SYSTEM_POWER_STATE MinSystemState; /* bitsize 32, bitpos 160 */
};
typedef struct _SYSTEM_POWER_LEVEL /* id 188 */ SYSTEM_POWER_LEVEL;
typedef struct _SYSTEM_POWER_LEVEL /* id 188 */ *PSYSTEM_POWER_LEVEL;
struct _SYSTEM_POWER_POLICY { /* size 232 id 189 */
  ULONG Revision; /* bitsize 32, bitpos 0 */
  POWER_ACTION_POLICY PowerButton; /* bitsize 96, bitpos 32 */
  POWER_ACTION_POLICY SleepButton; /* bitsize 96, bitpos 128 */
  POWER_ACTION_POLICY LidClose; /* bitsize 96, bitpos 224 */
  SYSTEM_POWER_STATE LidOpenWake; /* bitsize 32, bitpos 320 */
  ULONG Reserved; /* bitsize 32, bitpos 352 */
  POWER_ACTION_POLICY Idle; /* bitsize 96, bitpos 384 */
  ULONG IdleTimeout; /* bitsize 32, bitpos 480 */
  UCHAR IdleSensitivity; /* bitsize 8, bitpos 512 */
  UCHAR DynamicThrottle; /* bitsize 8, bitpos 520 */
  UCHAR Spare2[2]:uint32; /* bitsize 16, bitpos 528 */
  SYSTEM_POWER_STATE MinSleep; /* bitsize 32, bitpos 544 */
  SYSTEM_POWER_STATE MaxSleep; /* bitsize 32, bitpos 576 */
  SYSTEM_POWER_STATE ReducedLatencySleep; /* bitsize 32, bitpos 608 */
  ULONG WinLogonFlags; /* bitsize 32, bitpos 640 */
  ULONG Spare3; /* bitsize 32, bitpos 672 */
  ULONG DozeS4Timeout; /* bitsize 32, bitpos 704 */
  ULONG BroadcastCapacityResolution; /* bitsize 32, bitpos 736 */
  SYSTEM_POWER_LEVEL DischargePolicy[4]:uint32; /* bitsize 768, bitpos 768 */
  ULONG VideoTimeout; /* bitsize 32, bitpos 1536 */
  BOOLEAN VideoDimDisplay; /* bitsize 8, bitpos 1568 */
  ULONG VideoReserved[3]:uint32; /* bitsize 96, bitpos 1600 */
  ULONG SpindownTimeout; /* bitsize 32, bitpos 1696 */
  BOOLEAN OptimizeForPower; /* bitsize 8, bitpos 1728 */
  UCHAR FanThrottleTolerance; /* bitsize 8, bitpos 1736 */
  UCHAR ForcedThrottle; /* bitsize 8, bitpos 1744 */
  UCHAR MinThrottle; /* bitsize 8, bitpos 1752 */
  POWER_ACTION_POLICY OverThrottled; /* bitsize 96, bitpos 1760 */
};
typedef struct _SYSTEM_POWER_POLICY /* id 189 */ SYSTEM_POWER_POLICY;
typedef struct _SYSTEM_POWER_POLICY /* id 189 */ *PSYSTEM_POWER_POLICY;
struct _SYSTEM_POWER_CAPABILITIES { /* size 76 id 190 */
  BOOLEAN PowerButtonPresent; /* bitsize 8, bitpos 0 */
  BOOLEAN SleepButtonPresent; /* bitsize 8, bitpos 8 */
  BOOLEAN LidPresent; /* bitsize 8, bitpos 16 */
  BOOLEAN SystemS1; /* bitsize 8, bitpos 24 */
  BOOLEAN SystemS2; /* bitsize 8, bitpos 32 */
  BOOLEAN SystemS3; /* bitsize 8, bitpos 40 */
  BOOLEAN SystemS4; /* bitsize 8, bitpos 48 */
  BOOLEAN SystemS5; /* bitsize 8, bitpos 56 */
  BOOLEAN HiberFilePresent; /* bitsize 8, bitpos 64 */
  BOOLEAN FullWake; /* bitsize 8, bitpos 72 */
  BOOLEAN VideoDimPresent; /* bitsize 8, bitpos 80 */
  BOOLEAN ApmPresent; /* bitsize 8, bitpos 88 */
  BOOLEAN UpsPresent; /* bitsize 8, bitpos 96 */
  BOOLEAN ThermalControl; /* bitsize 8, bitpos 104 */
  BOOLEAN ProcessorThrottle; /* bitsize 8, bitpos 112 */
  UCHAR ProcessorMinThrottle; /* bitsize 8, bitpos 120 */
  UCHAR ProcessorMaxThrottle; /* bitsize 8, bitpos 128 */
  UCHAR spare2[4]:uint32; /* bitsize 32, bitpos 136 */
  BOOLEAN DiskSpinDown; /* bitsize 8, bitpos 168 */
  UCHAR spare3[8]:uint32; /* bitsize 64, bitpos 176 */
  BOOLEAN SystemBatteriesPresent; /* bitsize 8, bitpos 240 */
  BOOLEAN BatteriesAreShortTerm; /* bitsize 8, bitpos 248 */
  BATTERY_REPORTING_SCALE BatteryScale[3]:uint32; /* bitsize 192, bitpos 256 */
  SYSTEM_POWER_STATE AcOnLineWake; /* bitsize 32, bitpos 448 */
  SYSTEM_POWER_STATE SoftLidWake; /* bitsize 32, bitpos 480 */
  SYSTEM_POWER_STATE RtcWake; /* bitsize 32, bitpos 512 */
  SYSTEM_POWER_STATE MinDeviceWakeState; /* bitsize 32, bitpos 544 */
  SYSTEM_POWER_STATE DefaultLowLatencyWake; /* bitsize 32, bitpos 576 */
};
typedef struct _SYSTEM_POWER_CAPABILITIES /* id 190 */ SYSTEM_POWER_CAPABILITIES;
typedef struct _SYSTEM_POWER_CAPABILITIES /* id 190 */ *PSYSTEM_POWER_CAPABILITIES;
struct _SYSTEM_BATTERY_STATE { /* size 32 id 191 */
  BOOLEAN AcOnLine; /* bitsize 8, bitpos 0 */
  BOOLEAN BatteryPresent; /* bitsize 8, bitpos 8 */
  BOOLEAN Charging; /* bitsize 8, bitpos 16 */
  BOOLEAN Discharging; /* bitsize 8, bitpos 24 */
  BOOLEAN Spare1[4]:uint32; /* bitsize 32, bitpos 32 */
  ULONG MaxCapacity; /* bitsize 32, bitpos 64 */
  ULONG RemainingCapacity; /* bitsize 32, bitpos 96 */
  ULONG Rate; /* bitsize 32, bitpos 128 */
  ULONG EstimatedTime; /* bitsize 32, bitpos 160 */
  ULONG DefaultAlert1; /* bitsize 32, bitpos 192 */
  ULONG DefaultAlert2; /* bitsize 32, bitpos 224 */
};
typedef struct _SYSTEM_BATTERY_STATE /* id 191 */ SYSTEM_BATTERY_STATE;
typedef struct _SYSTEM_BATTERY_STATE /* id 191 */ *PSYSTEM_BATTERY_STATE;
enum _POWER_INFORMATION_LEVEL { SystemPowerPolicyAc, SystemPowerPolicyDc, VerifySystemPolicyAc, VerifySystemPolicyDc, SystemPowerCapabilities, SystemBatteryState, SystemPowerStateHandler, ProcessorStateHandler, SystemPowerPolicyCurrent, AdministratorPowerPolicy, SystemReserveHiberFile, ProcessorInformation, SystemPowerInformation, ProcessorStateHandler2, LastWakeTime, LastSleepTime, SystemExecutionState, SystemPowerStateNotifyHandler, ProcessorPowerPolicyAc, ProcessorPowerPolicyDc, VerifyProcessorPowerPolicyAc, VerifyProcessorPowerPolicyDc, ProcessorPowerPolicyCurrent };
typedef enum _POWER_INFORMATION_LEVEL POWER_INFORMATION_LEVEL;
struct _SYSTEM_POWER_INFORMATION { /* size 16 id 192 */
  ULONG MaxIdlenessAllowed; /* bitsize 32, bitpos 0 */
  ULONG Idleness; /* bitsize 32, bitpos 32 */
  ULONG TimeRemaining; /* bitsize 32, bitpos 64 */
  UCHAR CoolingMode; /* bitsize 8, bitpos 96 */
};
typedef struct _SYSTEM_POWER_INFORMATION /* id 192 */ SYSTEM_POWER_INFORMATION;
typedef struct _SYSTEM_POWER_INFORMATION /* id 192 */ *PSYSTEM_POWER_INFORMATION;
struct _PROCESSOR_POWER_POLICY_INFO { /* size 20 id 193 */
  ULONG TimeCheck; /* bitsize 32, bitpos 0 */
  ULONG DemoteLimit; /* bitsize 32, bitpos 32 */
  ULONG PromoteLimit; /* bitsize 32, bitpos 64 */
  UCHAR DemotePercent; /* bitsize 8, bitpos 96 */
  UCHAR PromotePercent; /* bitsize 8, bitpos 104 */
  UCHAR Spare[2]:uint32; /* bitsize 16, bitpos 112 */
  ULONG AllowDemotion; /* bitsize 1, bitpos 128 */
  ULONG AllowPromotion; /* bitsize 1, bitpos 129 */
  ULONG Reserved; /* bitsize 30, bitpos 130 */
};
typedef struct _PROCESSOR_POWER_POLICY_INFO /* id 193 */ PROCESSOR_POWER_POLICY_INFO;
typedef struct _PROCESSOR_POWER_POLICY_INFO /* id 193 */ *PPROCESSOR_POWER_POLICY_INFO;
struct _PROCESSOR_POWER_POLICY { /* size 76 id 194 */
  ULONG Revision; /* bitsize 32, bitpos 0 */
  UCHAR DynamicThrottle; /* bitsize 8, bitpos 32 */
  UCHAR Spare[3]:uint32; /* bitsize 24, bitpos 40 */
  ULONG Reserved; /* bitsize 32, bitpos 64 */
  ULONG PolicyCount; /* bitsize 32, bitpos 96 */
  PROCESSOR_POWER_POLICY_INFO Policy[3]:uint32; /* bitsize 480, bitpos 128 */
};
typedef struct _PROCESSOR_POWER_POLICY /* id 194 */ PROCESSOR_POWER_POLICY;
typedef struct _PROCESSOR_POWER_POLICY /* id 194 */ *PPROCESSOR_POWER_POLICY;
struct _ADMINISTRATOR_POWER_POLICY { /* size 24 id 195 */
  SYSTEM_POWER_STATE MinSleep; /* bitsize 32, bitpos 0 */
  SYSTEM_POWER_STATE MaxSleep; /* bitsize 32, bitpos 32 */
  ULONG MinVideoTimeout; /* bitsize 32, bitpos 64 */
  ULONG MaxVideoTimeout; /* bitsize 32, bitpos 96 */
  ULONG MinSpindownTimeout; /* bitsize 32, bitpos 128 */
  ULONG MaxSpindownTimeout; /* bitsize 32, bitpos 160 */
};
typedef struct _ADMINISTRATOR_POWER_POLICY /* id 195 */ ADMINISTRATOR_POWER_POLICY;
typedef struct _ADMINISTRATOR_POWER_POLICY /* id 195 */ *PADMINISTRATOR_POWER_POLICY;
typedef OSVERSIONINFOA OSVERSIONINFO;
typedef OSVERSIONINFOA *POSVERSIONINFO;
typedef OSVERSIONINFOA *LPOSVERSIONINFO;
typedef OSVERSIONINFOEXA OSVERSIONINFOEX;
typedef OSVERSIONINFOEXA *POSVERSIONINFOEX;
typedef OSVERSIONINFOEXA *LPOSVERSIONINFOEX;
 /usr/include/string.h:
 /usr/include/sys/reent.h:
typedef long unsigned int __ULong;
struct _Bigint { /* size 24 id 196 */
  struct _Bigint /* id 196 */ *_next; /* bitsize 32, bitpos 0 */
  int _k; /* bitsize 32, bitpos 32 */
  int _maxwds; /* bitsize 32, bitpos 64 */
  int _sign; /* bitsize 32, bitpos 96 */
  int _wds; /* bitsize 32, bitpos 128 */
  __ULong _x[1]:uint32; /* bitsize 32, bitpos 160 */
};
struct __tm { /* size 36 id 197 */
  int __tm_sec; /* bitsize 32, bitpos 0 */
  int __tm_min; /* bitsize 32, bitpos 32 */
  int __tm_hour; /* bitsize 32, bitpos 64 */
  int __tm_mday; /* bitsize 32, bitpos 96 */
  int __tm_mon; /* bitsize 32, bitpos 128 */
  int __tm_year; /* bitsize 32, bitpos 160 */
  int __tm_wday; /* bitsize 32, bitpos 192 */
  int __tm_yday; /* bitsize 32, bitpos 224 */
  int __tm_isdst; /* bitsize 32, bitpos 256 */
};
struct _on_exit_args { /* size 264 id 198 */
  void *_fnargs[32]:uint32; /* bitsize 1024, bitpos 0 */
  void *_dso_handle[32]:uint32; /* bitsize 1024, bitpos 1024 */
  __ULong _fntypes; /* bitsize 32, bitpos 2048 */
  __ULong _is_cxa; /* bitsize 32, bitpos 2080 */
};
struct _atexit { /* size 400 id 199 */
  struct _atexit /* id 199 */ *_next; /* bitsize 32, bitpos 0 */
  int _ind; /* bitsize 32, bitpos 32 */
  void (*_fns[32]) (/* unknown */):uint32; /* bitsize 1024, bitpos 64 */
  struct _on_exit_args /* id 198 */ _on_exit_args; /* bitsize 2112, bitpos 1088 */
};
struct __sbuf { /* size 8 id 200 */
  unsigned char *_base; /* bitsize 32, bitpos 0 */
  int _size; /* bitsize 32, bitpos 32 */
};
typedef long int _fpos_t;
typedef long long int _fpos64_t;
struct __sFILE { /* size 92 id 201 */
  unsigned char *_p; /* bitsize 32, bitpos 0 */
  int _r; /* bitsize 32, bitpos 32 */
  int _w; /* bitsize 32, bitpos 64 */
  short int _flags; /* bitsize 16, bitpos 96 */
  short int _file; /* bitsize 16, bitpos 112 */
  struct __sbuf /* id 200 */ _bf; /* bitsize 64, bitpos 128 */
  int _lbfsize; /* bitsize 32, bitpos 192 */
  void *_cookie; /* bitsize 32, bitpos 224 */
  int (*_read) (/* unknown */); /* bitsize 32, bitpos 256 */
  int (*_write) (/* unknown */); /* bitsize 32, bitpos 288 */
  _fpos_t (*_seek) (/* unknown */); /* bitsize 32, bitpos 320 */
  int (*_close) (/* unknown */); /* bitsize 32, bitpos 352 */
  struct __sbuf /* id 200 */ _ub; /* bitsize 64, bitpos 384 */
  unsigned char *_up; /* bitsize 32, bitpos 448 */
  int _ur; /* bitsize 32, bitpos 480 */
  unsigned char _ubuf[3]:uint32; /* bitsize 24, bitpos 512 */
  unsigned char _nbuf[1]:uint32; /* bitsize 8, bitpos 536 */
  struct __sbuf /* id 200 */ _lb; /* bitsize 64, bitpos 544 */
  int _blksize; /* bitsize 32, bitpos 608 */
  int _offset; /* bitsize 32, bitpos 640 */
  struct _reent /* id 202 */ *_data; /* bitsize 32, bitpos 672 */
  void *_lock; /* bitsize 32, bitpos 704 */
};
struct __sFILE64 { /* size 104 id 203 */
  unsigned char *_p; /* bitsize 32, bitpos 0 */
  int _r; /* bitsize 32, bitpos 32 */
  int _w; /* bitsize 32, bitpos 64 */
  short int _flags; /* bitsize 16, bitpos 96 */
  short int _file; /* bitsize 16, bitpos 112 */
  struct __sbuf /* id 200 */ _bf; /* bitsize 64, bitpos 128 */
  int _lbfsize; /* bitsize 32, bitpos 192 */
  struct _reent /* id 202 */ *_data; /* bitsize 32, bitpos 224 */
  void *_cookie; /* bitsize 32, bitpos 256 */
  int (*_read) (/* unknown */); /* bitsize 32, bitpos 288 */
  int (*_write) (/* unknown */); /* bitsize 32, bitpos 320 */
  _fpos_t (*_seek) (/* unknown */); /* bitsize 32, bitpos 352 */
  int (*_close) (/* unknown */); /* bitsize 32, bitpos 384 */
  struct __sbuf /* id 200 */ _ub; /* bitsize 64, bitpos 416 */
  unsigned char *_up; /* bitsize 32, bitpos 480 */
  int _ur; /* bitsize 32, bitpos 512 */
  unsigned char _ubuf[3]:uint32; /* bitsize 24, bitpos 544 */
  unsigned char _nbuf[1]:uint32; /* bitsize 8, bitpos 568 */
  struct __sbuf /* id 200 */ _lb; /* bitsize 64, bitpos 576 */
  int _blksize; /* bitsize 32, bitpos 640 */
  int _flags2; /* bitsize 32, bitpos 672 */
  long long int _offset; /* bitsize 64, bitpos 704 */
  _fpos64_t (*_seek64) (/* unknown */); /* bitsize 32, bitpos 768 */
  void *_lock; /* bitsize 32, bitpos 800 */
};
typedef struct __sFILE64 /* id 203 */ __FILE;
struct _glue { /* size 12 id 204 */
  struct _glue /* id 204 */ *_next; /* bitsize 32, bitpos 0 */
  int _niobs; /* bitsize 32, bitpos 32 */
  __FILE *_iobs; /* bitsize 32, bitpos 64 */
};
struct _rand48 { /* size 14 id 205 */
  short unsigned int _seed[3]:uint32; /* bitsize 48, bitpos 0 */
  short unsigned int _mult[3]:uint32; /* bitsize 48, bitpos 48 */
  short unsigned int _add; /* bitsize 16, bitpos 96 */
};
struct _reent { /* size 1064 id 202 */
  int _errno; /* bitsize 32, bitpos 0 */
  __FILE *_stdin; /* bitsize 32, bitpos 32 */
  __FILE *_stdout; /* bitsize 32, bitpos 64 */
  __FILE *_stderr; /* bitsize 32, bitpos 96 */
  int _inc; /* bitsize 32, bitpos 128 */
  char _emergency[25]:uint32; /* bitsize 200, bitpos 160 */
  int _current_category; /* bitsize 32, bitpos 384 */
  char const *_current_locale; /* bitsize 32, bitpos 416 */
  int __sdidinit; /* bitsize 32, bitpos 448 */
  void (*__cleanup) (/* unknown */); /* bitsize 32, bitpos 480 */
  struct _Bigint /* id 196 */ *_result; /* bitsize 32, bitpos 512 */
  int _result_k; /* bitsize 32, bitpos 544 */
  struct _Bigint /* id 196 */ *_p5s; /* bitsize 32, bitpos 576 */
  struct _Bigint /* id 196 */ **_freelist; /* bitsize 32, bitpos 608 */
  int _cvtlen; /* bitsize 32, bitpos 640 */
  char *_cvtbuf; /* bitsize 32, bitpos 672 */
  union %anon206 { /* size 240 */
    struct %anon207 { /* size 208 */
      unsigned int _unused_rand; /* bitsize 32, bitpos 0 */
      char *_strtok_last; /* bitsize 32, bitpos 32 */
      char _asctime_buf[26]:uint32; /* bitsize 208, bitpos 64 */
      struct __tm /* id 197 */ _localtime_buf; /* bitsize 288, bitpos 288 */
      int _gamma_signgam; /* bitsize 32, bitpos 576 */
      long long unsigned int _rand_next; /* bitsize 64, bitpos 640 */
      struct _rand48 /* id 205 */ _r48; /* bitsize 112, bitpos 704 */
      struct %anon208 { /* size 8 */
        int __count; /* bitsize 32, bitpos 0 */
        union %anon209 { /* size 4 */
          unsigned int __wch; /* bitsize 32, bitpos 0 */
          unsigned char __wchb[4]:uint32; /* bitsize 32, bitpos 0 */
        } __value; /* bitsize 32, bitpos 32 */
      } _mblen_state; /* bitsize 64, bitpos 832 */
      struct %anon208 _mbtowc_state; /* bitsize 64, bitpos 896 */
      struct %anon208 _wctomb_state; /* bitsize 64, bitpos 960 */
      char _l64a_buf[8]:uint32; /* bitsize 64, bitpos 1024 */
      char _signal_buf[24]:uint32; /* bitsize 192, bitpos 1088 */
      int _getdate_err; /* bitsize 32, bitpos 1280 */
      struct %anon208 _mbrlen_state; /* bitsize 64, bitpos 1312 */
      struct %anon208 _mbrtowc_state; /* bitsize 64, bitpos 1376 */
      struct %anon208 _mbsrtowcs_state; /* bitsize 64, bitpos 1440 */
      struct %anon208 _wcrtomb_state; /* bitsize 64, bitpos 1504 */
      struct %anon208 _wcsrtombs_state; /* bitsize 64, bitpos 1568 */
    } _reent; /* bitsize 1664, bitpos 0 */
    struct %anon210 { /* size 240 */
      unsigned char *_nextf[30]:uint32; /* bitsize 960, bitpos 0 */
      unsigned int _nmalloc[30]:uint32; /* bitsize 960, bitpos 960 */
    } _unused; /* bitsize 1920, bitpos 0 */
  } _new; /* bitsize 1920, bitpos 704 */
  struct _atexit /* id 199 */ *_atexit; /* bitsize 32, bitpos 2624 */
  struct _atexit /* id 199 */ _atexit0; /* bitsize 3200, bitpos 2656 */
  void (**_sig_func) (/* unknown */); /* bitsize 32, bitpos 5856 */
  struct _glue /* id 204 */ __sglue; /* bitsize 96, bitpos 5888 */
  __FILE __sf[3]:uint32; /* bitsize 2496, bitpos 6016 */
};
 /usr/include/sys/_types.h:
typedef long int _off_t;
typedef long long int _off64_t;
typedef int _ssize_t;
typedef struct %anon208 _mbstate_t;
typedef void *_flock_t;
typedef void *_iconv_t;
 /usr/include/sys/lock.h:
typedef void *_LOCK_T;
 /usr/lib/gcc/i686-pc-cygwin/3.4.4/include/stddef.h:
typedef unsigned int wint_t;
typedef unsigned int size_t;
 /usr/lib/gcc/i686-pc-cygwin/3.4.4/../../../../include/w32api/basetsd.h:
typedef int LONG32;
typedef int *PLONG32;
typedef int INT32;
typedef int *PINT32;
typedef unsigned int ULONG32;
typedef unsigned int *PULONG32;
typedef unsigned int DWORD32;
typedef unsigned int *PDWORD32;
typedef unsigned int UINT32;
typedef unsigned int *PUINT32;
typedef int INT_PTR;
typedef int *PINT_PTR;
typedef unsigned int UINT_PTR;
typedef unsigned int *PUINT_PTR;
typedef long int LONG_PTR;
typedef long int *PLONG_PTR;
typedef long unsigned int ULONG_PTR;
typedef long unsigned int *PULONG_PTR;
typedef short unsigned int UHALF_PTR;
typedef short unsigned int *PUHALF_PTR;
typedef short int HALF_PTR;
typedef short int *PHALF_PTR;
typedef long unsigned int HANDLE_PTR;
typedef ULONG_PTR SIZE_T;
typedef ULONG_PTR *PSIZE_T;
typedef LONG_PTR SSIZE_T;
typedef LONG_PTR *PSSIZE_T;
typedef ULONG_PTR DWORD_PTR;
typedef ULONG_PTR *PDWORD_PTR;
typedef long long int LONG64;
typedef long long int *PLONG64;
typedef long long int INT64;
typedef long long int *PINT64;
typedef long long unsigned int ULONG64;
typedef long long unsigned int *PULONG64;
typedef long long unsigned int DWORD64;
typedef long long unsigned int *PDWORD64;
typedef long long unsigned int UINT64;
typedef long long unsigned int *PUINT64;
 /usr/include/w32api/wingdi.h:
struct _ABC { /* size 12 id 211 */
  int abcA; /* bitsize 32, bitpos 0 */
  UINT abcB; /* bitsize 32, bitpos 32 */
  int abcC; /* bitsize 32, bitpos 64 */
};
typedef struct _ABC /* id 211 */ ABC;
typedef struct _ABC /* id 211 */ *LPABC;
struct _ABCFLOAT { /* size 12 id 212 */
  FLOAT abcfA; /* bitsize 32, bitpos 0 */
  FLOAT abcfB; /* bitsize 32, bitpos 32 */
  FLOAT abcfC; /* bitsize 32, bitpos 64 */
};
typedef struct _ABCFLOAT /* id 212 */ ABCFLOAT;
typedef struct _ABCFLOAT /* id 212 */ *LPABCFLOAT;
struct tagBITMAP { /* size 24 id 213 */
  LONG bmType; /* bitsize 32, bitpos 0 */
  LONG bmWidth; /* bitsize 32, bitpos 32 */
  LONG bmHeight; /* bitsize 32, bitpos 64 */
  LONG bmWidthBytes; /* bitsize 32, bitpos 96 */
  WORD bmPlanes; /* bitsize 16, bitpos 128 */
  WORD bmBitsPixel; /* bitsize 16, bitpos 144 */
  LPVOID bmBits; /* bitsize 32, bitpos 160 */
};
typedef struct tagBITMAP /* id 213 */ BITMAP;
typedef struct tagBITMAP /* id 213 */ *PBITMAP;
typedef struct tagBITMAP /* id 213 */ *LPBITMAP;
struct tagBITMAPCOREHEADER { /* size 12 id 214 */
  DWORD bcSize; /* bitsize 32, bitpos 0 */
  WORD bcWidth; /* bitsize 16, bitpos 32 */
  WORD bcHeight; /* bitsize 16, bitpos 48 */
  WORD bcPlanes; /* bitsize 16, bitpos 64 */
  WORD bcBitCount; /* bitsize 16, bitpos 80 */
};
typedef struct tagBITMAPCOREHEADER /* id 214 */ BITMAPCOREHEADER;
typedef struct tagBITMAPCOREHEADER /* id 214 */ *LPBITMAPCOREHEADER;
typedef struct tagBITMAPCOREHEADER /* id 214 */ *PBITMAPCOREHEADER;
struct tagRGBTRIPLE { /* size 3 id 215 */
  BYTE rgbtBlue; /* bitsize 8, bitpos 0 */
  BYTE rgbtGreen; /* bitsize 8, bitpos 8 */
  BYTE rgbtRed; /* bitsize 8, bitpos 16 */
};
typedef struct tagRGBTRIPLE /* id 215 */ RGBTRIPLE;
typedef struct tagRGBTRIPLE /* id 215 */ *LPRGBTRIPLE;
struct tagBITMAPFILEHEADER { /* size 14 id 216 */
  WORD bfType; /* bitsize 16, bitpos 0 */
  DWORD bfSize; /* bitsize 32, bitpos 16 */
  WORD bfReserved1; /* bitsize 16, bitpos 48 */
  WORD bfReserved2; /* bitsize 16, bitpos 64 */
  DWORD bfOffBits; /* bitsize 32, bitpos 80 */
};
typedef struct tagBITMAPFILEHEADER /* id 216 */ BITMAPFILEHEADER;
typedef struct tagBITMAPFILEHEADER /* id 216 */ *LPBITMAPFILEHEADER;
typedef struct tagBITMAPFILEHEADER /* id 216 */ *PBITMAPFILEHEADER;
struct _BITMAPCOREINFO { /* size 16 id 217 */
  BITMAPCOREHEADER bmciHeader; /* bitsize 96, bitpos 0 */
  RGBTRIPLE bmciColors[1]:uint32; /* bitsize 24, bitpos 96 */
};
typedef struct _BITMAPCOREINFO /* id 217 */ BITMAPCOREINFO;
typedef struct _BITMAPCOREINFO /* id 217 */ *LPBITMAPCOREINFO;
typedef struct _BITMAPCOREINFO /* id 217 */ *PBITMAPCOREINFO;
struct tagBITMAPINFOHEADER { /* size 40 id 218 */
  DWORD biSize; /* bitsize 32, bitpos 0 */
  LONG biWidth; /* bitsize 32, bitpos 32 */
  LONG biHeight; /* bitsize 32, bitpos 64 */
  WORD biPlanes; /* bitsize 16, bitpos 96 */
  WORD biBitCount; /* bitsize 16, bitpos 112 */
  DWORD biCompression; /* bitsize 32, bitpos 128 */
  DWORD biSizeImage; /* bitsize 32, bitpos 160 */
  LONG biXPelsPerMeter; /* bitsize 32, bitpos 192 */
  LONG biYPelsPerMeter; /* bitsize 32, bitpos 224 */
  DWORD biClrUsed; /* bitsize 32, bitpos 256 */
  DWORD biClrImportant; /* bitsize 32, bitpos 288 */
};
typedef struct tagBITMAPINFOHEADER /* id 218 */ BITMAPINFOHEADER;
typedef struct tagBITMAPINFOHEADER /* id 218 */ *LPBITMAPINFOHEADER;
typedef struct tagBITMAPINFOHEADER /* id 218 */ *PBITMAPINFOHEADER;
struct tagRGBQUAD { /* size 4 id 219 */
  BYTE rgbBlue; /* bitsize 8, bitpos 0 */
  BYTE rgbGreen; /* bitsize 8, bitpos 8 */
  BYTE rgbRed; /* bitsize 8, bitpos 16 */
  BYTE rgbReserved; /* bitsize 8, bitpos 24 */
};
typedef struct tagRGBQUAD /* id 219 */ RGBQUAD;
typedef struct tagRGBQUAD /* id 219 */ *LPRGBQUAD;
struct tagBITMAPINFO { /* size 44 id 220 */
  BITMAPINFOHEADER bmiHeader; /* bitsize 320, bitpos 0 */
  RGBQUAD bmiColors[1]:uint32; /* bitsize 32, bitpos 320 */
};
typedef struct tagBITMAPINFO /* id 220 */ BITMAPINFO;
typedef struct tagBITMAPINFO /* id 220 */ *LPBITMAPINFO;
typedef struct tagBITMAPINFO /* id 220 */ *PBITMAPINFO;
typedef long int FXPT16DOT16;
typedef long int *LPFXPT16DOT16;
typedef long int FXPT2DOT30;
typedef long int *LPFXPT2DOT30;
struct tagCIEXYZ { /* size 12 id 221 */
  FXPT2DOT30 ciexyzX; /* bitsize 32, bitpos 0 */
  FXPT2DOT30 ciexyzY; /* bitsize 32, bitpos 32 */
  FXPT2DOT30 ciexyzZ; /* bitsize 32, bitpos 64 */
};
typedef struct tagCIEXYZ /* id 221 */ CIEXYZ;
typedef struct tagCIEXYZ /* id 221 */ *LPCIEXYZ;
struct tagCIEXYZTRIPLE { /* size 36 id 222 */
  CIEXYZ ciexyzRed; /* bitsize 96, bitpos 0 */
  CIEXYZ ciexyzGreen; /* bitsize 96, bitpos 96 */
  CIEXYZ ciexyzBlue; /* bitsize 96, bitpos 192 */
};
typedef struct tagCIEXYZTRIPLE /* id 222 */ CIEXYZTRIPLE;
typedef struct tagCIEXYZTRIPLE /* id 222 */ *LPCIEXYZTRIPLE;
typedef struct %anon223 { /* size 108 */
  DWORD bV4Size; /* bitsize 32, bitpos 0 */
  LONG bV4Width; /* bitsize 32, bitpos 32 */
  LONG bV4Height; /* bitsize 32, bitpos 64 */
  WORD bV4Planes; /* bitsize 16, bitpos 96 */
  WORD bV4BitCount; /* bitsize 16, bitpos 112 */
  DWORD bV4V4Compression; /* bitsize 32, bitpos 128 */
  DWORD bV4SizeImage; /* bitsize 32, bitpos 160 */
  LONG bV4XPelsPerMeter; /* bitsize 32, bitpos 192 */
  LONG bV4YPelsPerMeter; /* bitsize 32, bitpos 224 */
  DWORD bV4ClrUsed; /* bitsize 32, bitpos 256 */
  DWORD bV4ClrImportant; /* bitsize 32, bitpos 288 */
  DWORD bV4RedMask; /* bitsize 32, bitpos 320 */
  DWORD bV4GreenMask; /* bitsize 32, bitpos 352 */
  DWORD bV4BlueMask; /* bitsize 32, bitpos 384 */
  DWORD bV4AlphaMask; /* bitsize 32, bitpos 416 */
  DWORD bV4CSType; /* bitsize 32, bitpos 448 */
  CIEXYZTRIPLE bV4Endpoints; /* bitsize 288, bitpos 480 */
  DWORD bV4GammaRed; /* bitsize 32, bitpos 768 */
  DWORD bV4GammaGreen; /* bitsize 32, bitpos 800 */
  DWORD bV4GammaBlue; /* bitsize 32, bitpos 832 */
} BITMAPV4HEADER;
typedef struct %anon223 *LPBITMAPV4HEADER;
typedef struct %anon223 *PBITMAPV4HEADER;
typedef struct %anon224 { /* size 124 */
  DWORD bV5Size; /* bitsize 32, bitpos 0 */
  LONG bV5Width; /* bitsize 32, bitpos 32 */
  LONG bV5Height; /* bitsize 32, bitpos 64 */
  WORD bV5Planes; /* bitsize 16, bitpos 96 */
  WORD bV5BitCount; /* bitsize 16, bitpos 112 */
  DWORD bV5Compression; /* bitsize 32, bitpos 128 */
  DWORD bV5SizeImage; /* bitsize 32, bitpos 160 */
  LONG bV5XPelsPerMeter; /* bitsize 32, bitpos 192 */
  LONG bV5YPelsPerMeter; /* bitsize 32, bitpos 224 */
  DWORD bV5ClrUsed; /* bitsize 32, bitpos 256 */
  DWORD bV5ClrImportant; /* bitsize 32, bitpos 288 */
  DWORD bV5RedMask; /* bitsize 32, bitpos 320 */
  DWORD bV5GreenMask; /* bitsize 32, bitpos 352 */
  DWORD bV5BlueMask; /* bitsize 32, bitpos 384 */
  DWORD bV5AlphaMask; /* bitsize 32, bitpos 416 */
  DWORD bV5CSType; /* bitsize 32, bitpos 448 */
  CIEXYZTRIPLE bV5Endpoints; /* bitsize 288, bitpos 480 */
  DWORD bV5GammaRed; /* bitsize 32, bitpos 768 */
  DWORD bV5GammaGreen; /* bitsize 32, bitpos 800 */
  DWORD bV5GammaBlue; /* bitsize 32, bitpos 832 */
  DWORD bV5Intent; /* bitsize 32, bitpos 864 */
  DWORD bV5ProfileData; /* bitsize 32, bitpos 896 */
  DWORD bV5ProfileSize; /* bitsize 32, bitpos 928 */
  DWORD bV5Reserved; /* bitsize 32, bitpos 960 */
} BITMAPV5HEADER;
typedef struct %anon224 *LPBITMAPV5HEADER;
typedef struct %anon224 *PBITMAPV5HEADER;
struct tagFONTSIGNATURE { /* size 24 id 225 */
  DWORD fsUsb[4]:uint32; /* bitsize 128, bitpos 0 */
  DWORD fsCsb[2]:uint32; /* bitsize 64, bitpos 128 */
};
typedef struct tagFONTSIGNATURE /* id 225 */ FONTSIGNATURE;
typedef struct tagFONTSIGNATURE /* id 225 */ *LPFONTSIGNATURE;
typedef struct %anon226 { /* size 32 */
  UINT ciCharset; /* bitsize 32, bitpos 0 */
  UINT ciACP; /* bitsize 32, bitpos 32 */
  FONTSIGNATURE fs; /* bitsize 192, bitpos 64 */
} CHARSETINFO;
typedef struct %anon226 *LPCHARSETINFO;
struct tagCOLORADJUSTMENT { /* size 24 id 227 */
  WORD caSize; /* bitsize 16, bitpos 0 */
  WORD caFlags; /* bitsize 16, bitpos 16 */
  WORD caIlluminantIndex; /* bitsize 16, bitpos 32 */
  WORD caRedGamma; /* bitsize 16, bitpos 48 */
  WORD caGreenGamma; /* bitsize 16, bitpos 64 */
  WORD caBlueGamma; /* bitsize 16, bitpos 80 */
  WORD caReferenceBlack; /* bitsize 16, bitpos 96 */
  WORD caReferenceWhite; /* bitsize 16, bitpos 112 */
  SHORT caContrast; /* bitsize 16, bitpos 128 */
  SHORT caBrightness; /* bitsize 16, bitpos 144 */
  SHORT caColorfulness; /* bitsize 16, bitpos 160 */
  SHORT caRedGreenTint; /* bitsize 16, bitpos 176 */
};
typedef struct tagCOLORADJUSTMENT /* id 227 */ COLORADJUSTMENT;
typedef struct tagCOLORADJUSTMENT /* id 227 */ *LPCOLORADJUSTMENT;
struct _devicemodeA { /* size 156 id 228 */
  BYTE dmDeviceName[32]:uint32; /* bitsize 256, bitpos 0 */
  WORD dmSpecVersion; /* bitsize 16, bitpos 256 */
  WORD dmDriverVersion; /* bitsize 16, bitpos 272 */
  WORD dmSize; /* bitsize 16, bitpos 288 */
  WORD dmDriverExtra; /* bitsize 16, bitpos 304 */
  DWORD dmFields; /* bitsize 32, bitpos 320 */
  union %anon229 { /* size 16 */
    struct %anon230 { /* size 16 */
      short int dmOrientation; /* bitsize 16, bitpos 0 */
      short int dmPaperSize; /* bitsize 16, bitpos 16 */
      short int dmPaperLength; /* bitsize 16, bitpos 32 */
      short int dmPaperWidth; /* bitsize 16, bitpos 48 */
      short int dmScale; /* bitsize 16, bitpos 64 */
      short int dmCopies; /* bitsize 16, bitpos 80 */
      short int dmDefaultSource; /* bitsize 16, bitpos 96 */
      short int dmPrintQuality; /* bitsize 16, bitpos 112 */
    }; /* bitsize 128, bitpos 0 */
    POINTL dmPosition; /* bitsize 64, bitpos 0 */
    DWORD dmDisplayOrientation; /* bitsize 32, bitpos 0 */
    DWORD dmDisplayFixedOutput; /* bitsize 32, bitpos 0 */
  }; /* bitsize 128, bitpos 352 */
  short int dmColor; /* bitsize 16, bitpos 480 */
  short int dmDuplex; /* bitsize 16, bitpos 496 */
  short int dmYResolution; /* bitsize 16, bitpos 512 */
  short int dmTTOption; /* bitsize 16, bitpos 528 */
  short int dmCollate; /* bitsize 16, bitpos 544 */
  BYTE dmFormName[32]:uint32; /* bitsize 256, bitpos 560 */
  WORD dmLogPixels; /* bitsize 16, bitpos 816 */
  DWORD dmBitsPerPel; /* bitsize 32, bitpos 832 */
  DWORD dmPelsWidth; /* bitsize 32, bitpos 864 */
  DWORD dmPelsHeight; /* bitsize 32, bitpos 896 */
  union %anon231 { /* size 4 */
    DWORD dmDisplayFlags; /* bitsize 32, bitpos 0 */
    DWORD dmNup; /* bitsize 32, bitpos 0 */
  }; /* bitsize 32, bitpos 928 */
  DWORD dmDisplayFrequency; /* bitsize 32, bitpos 960 */
  DWORD dmICMMethod; /* bitsize 32, bitpos 992 */
  DWORD dmICMIntent; /* bitsize 32, bitpos 1024 */
  DWORD dmMediaType; /* bitsize 32, bitpos 1056 */
  DWORD dmDitherType; /* bitsize 32, bitpos 1088 */
  DWORD dmReserved1; /* bitsize 32, bitpos 1120 */
  DWORD dmReserved2; /* bitsize 32, bitpos 1152 */
  DWORD dmPanningWidth; /* bitsize 32, bitpos 1184 */
  DWORD dmPanningHeight; /* bitsize 32, bitpos 1216 */
};
typedef struct _devicemodeA /* id 228 */ DEVMODEA;
typedef struct _devicemodeA /* id 228 */ *LPDEVMODEA;
typedef struct _devicemodeA /* id 228 */ *PDEVMODEA;
struct _devicemodeW { /* size 220 id 232 */
  WCHAR dmDeviceName[32]:uint32; /* bitsize 512, bitpos 0 */
  WORD dmSpecVersion; /* bitsize 16, bitpos 512 */
  WORD dmDriverVersion; /* bitsize 16, bitpos 528 */
  WORD dmSize; /* bitsize 16, bitpos 544 */
  WORD dmDriverExtra; /* bitsize 16, bitpos 560 */
  DWORD dmFields; /* bitsize 32, bitpos 576 */
  union %anon229 { /* size 16 */
    struct %anon230 { /* size 16 */
      short int dmOrientation; /* bitsize 16, bitpos 0 */
      short int dmPaperSize; /* bitsize 16, bitpos 16 */
      short int dmPaperLength; /* bitsize 16, bitpos 32 */
      short int dmPaperWidth; /* bitsize 16, bitpos 48 */
      short int dmScale; /* bitsize 16, bitpos 64 */
      short int dmCopies; /* bitsize 16, bitpos 80 */
      short int dmDefaultSource; /* bitsize 16, bitpos 96 */
      short int dmPrintQuality; /* bitsize 16, bitpos 112 */
    }; /* bitsize 128, bitpos 0 */
    POINTL dmPosition; /* bitsize 64, bitpos 0 */
    DWORD dmDisplayOrientation; /* bitsize 32, bitpos 0 */
    DWORD dmDisplayFixedOutput; /* bitsize 32, bitpos 0 */
  }; /* bitsize 128, bitpos 608 */
  short int dmColor; /* bitsize 16, bitpos 736 */
  short int dmDuplex; /* bitsize 16, bitpos 752 */
  short int dmYResolution; /* bitsize 16, bitpos 768 */
  short int dmTTOption; /* bitsize 16, bitpos 784 */
  short int dmCollate; /* bitsize 16, bitpos 800 */
  WCHAR dmFormName[32]:uint32; /* bitsize 512, bitpos 816 */
  WORD dmLogPixels; /* bitsize 16, bitpos 1328 */
  DWORD dmBitsPerPel; /* bitsize 32, bitpos 1344 */
  DWORD dmPelsWidth; /* bitsize 32, bitpos 1376 */
  DWORD dmPelsHeight; /* bitsize 32, bitpos 1408 */
  union %anon231 { /* size 4 */
    DWORD dmDisplayFlags; /* bitsize 32, bitpos 0 */
    DWORD dmNup; /* bitsize 32, bitpos 0 */
  }; /* bitsize 32, bitpos 1440 */
  DWORD dmDisplayFrequency; /* bitsize 32, bitpos 1472 */
  DWORD dmICMMethod; /* bitsize 32, bitpos 1504 */
  DWORD dmICMIntent; /* bitsize 32, bitpos 1536 */
  DWORD dmMediaType; /* bitsize 32, bitpos 1568 */
  DWORD dmDitherType; /* bitsize 32, bitpos 1600 */
  DWORD dmReserved1; /* bitsize 32, bitpos 1632 */
  DWORD dmReserved2; /* bitsize 32, bitpos 1664 */
  DWORD dmPanningWidth; /* bitsize 32, bitpos 1696 */
  DWORD dmPanningHeight; /* bitsize 32, bitpos 1728 */
};
typedef struct _devicemodeW /* id 232 */ DEVMODEW;
typedef struct _devicemodeW /* id 232 */ *LPDEVMODEW;
typedef struct _devicemodeW /* id 232 */ *PDEVMODEW;
struct tagDIBSECTION { /* size 84 id 233 */
  BITMAP dsBm; /* bitsize 192, bitpos 0 */
  BITMAPINFOHEADER dsBmih; /* bitsize 320, bitpos 192 */
  DWORD dsBitfields[3]:uint32; /* bitsize 96, bitpos 512 */
  HANDLE dshSection; /* bitsize 32, bitpos 608 */
  DWORD dsOffset; /* bitsize 32, bitpos 640 */
};
typedef struct tagDIBSECTION /* id 233 */ DIBSECTION;
struct _DOCINFOA { /* size 20 id 234 */
  int cbSize; /* bitsize 32, bitpos 0 */
  LPCSTR lpszDocName; /* bitsize 32, bitpos 32 */
  LPCSTR lpszOutput; /* bitsize 32, bitpos 64 */
  LPCSTR lpszDatatype; /* bitsize 32, bitpos 96 */
  DWORD fwType; /* bitsize 32, bitpos 128 */
};
typedef struct _DOCINFOA /* id 234 */ DOCINFOA;
typedef struct _DOCINFOA /* id 234 */ *LPDOCINFOA;
struct _DOCINFOW { /* size 20 id 235 */
  int cbSize; /* bitsize 32, bitpos 0 */
  LPCWSTR lpszDocName; /* bitsize 32, bitpos 32 */
  LPCWSTR lpszOutput; /* bitsize 32, bitpos 64 */
  LPCWSTR lpszDatatype; /* bitsize 32, bitpos 96 */
  DWORD fwType; /* bitsize 32, bitpos 128 */
};
typedef struct _DOCINFOW /* id 235 */ DOCINFOW;
typedef struct _DOCINFOW /* id 235 */ *LPDOCINFOW;
struct tagEMR { /* size 8 id 236 */
  DWORD iType; /* bitsize 32, bitpos 0 */
  DWORD nSize; /* bitsize 32, bitpos 32 */
};
typedef struct tagEMR /* id 236 */ EMR;
typedef struct tagEMR /* id 236 */ *PEMR;
struct tagEMRANGLEARC { /* size 28 id 237 */
  EMR emr; /* bitsize 64, bitpos 0 */
  POINTL ptlCenter; /* bitsize 64, bitpos 64 */
  DWORD nRadius; /* bitsize 32, bitpos 128 */
  FLOAT eStartAngle; /* bitsize 32, bitpos 160 */
  FLOAT eSweepAngle; /* bitsize 32, bitpos 192 */
};
typedef struct tagEMRANGLEARC /* id 237 */ EMRANGLEARC;
typedef struct tagEMRANGLEARC /* id 237 */ *PEMRANGLEARC;
struct tagEMRARC { /* size 40 id 238 */
  EMR emr; /* bitsize 64, bitpos 0 */
  RECTL rclBox; /* bitsize 128, bitpos 64 */
  POINTL ptlStart; /* bitsize 64, bitpos 192 */
  POINTL ptlEnd; /* bitsize 64, bitpos 256 */
};
typedef struct tagEMRARC /* id 238 */ EMRARC;
typedef struct tagEMRARC /* id 238 */ *PEMRARC;
typedef struct tagEMRARC /* id 238 */ EMRARCTO;
typedef struct tagEMRARC /* id 238 */ *PEMRARCTO;
typedef struct tagEMRARC /* id 238 */ EMRCHORD;
typedef struct tagEMRARC /* id 238 */ *PEMRCHORD;
typedef struct tagEMRARC /* id 238 */ EMRPIE;
typedef struct tagEMRARC /* id 238 */ *PEMRPIE;
struct _XFORM { /* size 24 id 239 */
  FLOAT eM11; /* bitsize 32, bitpos 0 */
  FLOAT eM12; /* bitsize 32, bitpos 32 */
  FLOAT eM21; /* bitsize 32, bitpos 64 */
  FLOAT eM22; /* bitsize 32, bitpos 96 */
  FLOAT eDx; /* bitsize 32, bitpos 128 */
  FLOAT eDy; /* bitsize 32, bitpos 160 */
};
typedef struct _XFORM /* id 239 */ XFORM;
typedef struct _XFORM /* id 239 */ *PXFORM;
typedef struct _XFORM /* id 239 */ *LPXFORM;
struct tagEMRBITBLT { /* size 96 id 240 */
  EMR emr; /* bitsize 64, bitpos 0 */
  RECTL rclBounds; /* bitsize 128, bitpos 64 */
  LONG xDest; /* bitsize 32, bitpos 192 */
  LONG yDest; /* bitsize 32, bitpos 224 */
  LONG cxDest; /* bitsize 32, bitpos 256 */
  LONG cyDest; /* bitsize 32, bitpos 288 */
  DWORD dwRop; /* bitsize 32, bitpos 320 */
  LONG xSrc; /* bitsize 32, bitpos 352 */
  LONG ySrc; /* bitsize 32, bitpos 384 */
  XFORM xformSrc; /* bitsize 192, bitpos 416 */
  COLORREF crBkColorSrc; /* bitsize 32, bitpos 608 */
  DWORD iUsageSrc; /* bitsize 32, bitpos 640 */
  DWORD offBmiSrc; /* bitsize 32, bitpos 672 */
  DWORD offBitsSrc; /* bitsize 32, bitpos 704 */
  DWORD cbBitsSrc; /* bitsize 32, bitpos 736 */
};
typedef struct tagEMRBITBLT /* id 240 */ EMRBITBLT;
typedef struct tagEMRBITBLT /* id 240 */ *PEMRBITBLT;
struct tagLOGBRUSH { /* size 12 id 241 */
  UINT lbStyle; /* bitsize 32, bitpos 0 */
  COLORREF lbColor; /* bitsize 32, bitpos 32 */
  LONG lbHatch; /* bitsize 32, bitpos 64 */
};
typedef struct tagLOGBRUSH /* id 241 */ LOGBRUSH;
typedef struct tagLOGBRUSH /* id 241 */ *PLOGBRUSH;
typedef struct tagLOGBRUSH /* id 241 */ *LPLOGBRUSH;
typedef LOGBRUSH PATTERN;
typedef LOGBRUSH *PPATTERN;
typedef LOGBRUSH *LPPATTERN;
struct tagEMRCREATEBRUSHINDIRECT { /* size 24 id 242 */
  EMR emr; /* bitsize 64, bitpos 0 */
  DWORD ihBrush; /* bitsize 32, bitpos 64 */
  LOGBRUSH lb; /* bitsize 96, bitpos 96 */
};
typedef struct tagEMRCREATEBRUSHINDIRECT /* id 242 */ EMRCREATEBRUSHINDIRECT;
typedef struct tagEMRCREATEBRUSHINDIRECT /* id 242 */ *PEMRCREATEBRUSHINDIRECT;
typedef LONG LCSCSTYPE;
typedef LONG LCSGAMUTMATCH;
struct tagLOGCOLORSPACEA { /* size 328 id 243 */
  DWORD lcsSignature; /* bitsize 32, bitpos 0 */
  DWORD lcsVersion; /* bitsize 32, bitpos 32 */
  DWORD lcsSize; /* bitsize 32, bitpos 64 */
  LCSCSTYPE lcsCSType; /* bitsize 32, bitpos 96 */
  LCSGAMUTMATCH lcsIntent; /* bitsize 32, bitpos 128 */
  CIEXYZTRIPLE lcsEndpoints; /* bitsize 288, bitpos 160 */
  DWORD lcsGammaRed; /* bitsize 32, bitpos 448 */
  DWORD lcsGammaGreen; /* bitsize 32, bitpos 480 */
  DWORD lcsGammaBlue; /* bitsize 32, bitpos 512 */
  CHAR lcsFilename[260]:uint32; /* bitsize 2080, bitpos 544 */
};
typedef struct tagLOGCOLORSPACEA /* id 243 */ LOGCOLORSPACEA;
typedef struct tagLOGCOLORSPACEA /* id 243 */ *LPLOGCOLORSPACEA;
struct tagLOGCOLORSPACEW { /* size 588 id 244 */
  DWORD lcsSignature; /* bitsize 32, bitpos 0 */
  DWORD lcsVersion; /* bitsize 32, bitpos 32 */
  DWORD lcsSize; /* bitsize 32, bitpos 64 */
  LCSCSTYPE lcsCSType; /* bitsize 32, bitpos 96 */
  LCSGAMUTMATCH lcsIntent; /* bitsize 32, bitpos 128 */
  CIEXYZTRIPLE lcsEndpoints; /* bitsize 288, bitpos 160 */
  DWORD lcsGammaRed; /* bitsize 32, bitpos 448 */
  DWORD lcsGammaGreen; /* bitsize 32, bitpos 480 */
  DWORD lcsGammaBlue; /* bitsize 32, bitpos 512 */
  WCHAR lcsFilename[260]:uint32; /* bitsize 4160, bitpos 544 */
};
typedef struct tagLOGCOLORSPACEW /* id 244 */ LOGCOLORSPACEW;
typedef struct tagLOGCOLORSPACEW /* id 244 */ *LPLOGCOLORSPACEW;
struct tagEMRCREATECOLORSPACE { /* size 600 id 245 */
  EMR emr; /* bitsize 64, bitpos 0 */
  DWORD ihCS; /* bitsize 32, bitpos 64 */
  LOGCOLORSPACEW lcs; /* bitsize 4704, bitpos 96 */
};
typedef struct tagEMRCREATECOLORSPACE /* id 245 */ EMRCREATECOLORSPACE;
typedef struct tagEMRCREATECOLORSPACE /* id 245 */ *PEMRCREATECOLORSPACE;
struct tagEMRCREATEDIBPATTERNBRUSHPT { /* size 32 id 246 */
  EMR emr; /* bitsize 64, bitpos 0 */
  DWORD ihBrush; /* bitsize 32, bitpos 64 */
  DWORD iUsage; /* bitsize 32, bitpos 96 */
  DWORD offBmi; /* bitsize 32, bitpos 128 */
  DWORD cbBmi; /* bitsize 32, bitpos 160 */
  DWORD offBits; /* bitsize 32, bitpos 192 */
  DWORD cbBits; /* bitsize 32, bitpos 224 */
};
typedef struct tagEMRCREATEDIBPATTERNBRUSHPT /* id 246 */ EMRCREATEDIBPATTERNBRUSHPT;
typedef struct tagEMRCREATEDIBPATTERNBRUSHPT /* id 246 */ *PEMRCREATEDIBPATTERNBRUSHPT;
struct tagEMRCREATEMONOBRUSH { /* size 32 id 247 */
  EMR emr; /* bitsize 64, bitpos 0 */
  DWORD ihBrush; /* bitsize 32, bitpos 64 */
  DWORD iUsage; /* bitsize 32, bitpos 96 */
  DWORD offBmi; /* bitsize 32, bitpos 128 */
  DWORD cbBmi; /* bitsize 32, bitpos 160 */
  DWORD offBits; /* bitsize 32, bitpos 192 */
  DWORD cbBits; /* bitsize 32, bitpos 224 */
};
typedef struct tagEMRCREATEMONOBRUSH /* id 247 */ EMRCREATEMONOBRUSH;
typedef struct tagEMRCREATEMONOBRUSH /* id 247 */ *PEMRCREATEMONOBRUSH;
struct tagPALETTEENTRY { /* size 4 id 248 */
  BYTE peRed; /* bitsize 8, bitpos 0 */
  BYTE peGreen; /* bitsize 8, bitpos 8 */
  BYTE peBlue; /* bitsize 8, bitpos 16 */
  BYTE peFlags; /* bitsize 8, bitpos 24 */
};
typedef struct tagPALETTEENTRY /* id 248 */ PALETTEENTRY;
typedef struct tagPALETTEENTRY /* id 248 */ *LPPALETTEENTRY;
typedef struct tagPALETTEENTRY /* id 248 */ *PPALETTEENTRY;
struct tagLOGPALETTE { /* size 8 id 249 */
  WORD palVersion; /* bitsize 16, bitpos 0 */
  WORD palNumEntries; /* bitsize 16, bitpos 16 */
  PALETTEENTRY palPalEntry[1]:uint32; /* bitsize 32, bitpos 32 */
};
typedef struct tagLOGPALETTE /* id 249 */ LOGPALETTE;
typedef struct tagLOGPALETTE /* id 249 */ *NPLOGPALETTE;
typedef struct tagLOGPALETTE /* id 249 */ *PLOGPALETTE;
typedef struct tagLOGPALETTE /* id 249 */ *LPLOGPALETTE;
struct tagEMRCREATEPALETTE { /* size 20 id 250 */
  EMR emr; /* bitsize 64, bitpos 0 */
  DWORD ihPal; /* bitsize 32, bitpos 64 */
  LOGPALETTE lgpl; /* bitsize 64, bitpos 96 */
};
typedef struct tagEMRCREATEPALETTE /* id 250 */ EMRCREATEPALETTE;
typedef struct tagEMRCREATEPALETTE /* id 250 */ *PEMRCREATEPALETTE;
struct tagLOGPEN { /* size 16 id 251 */
  UINT lopnStyle; /* bitsize 32, bitpos 0 */
  POINT lopnWidth; /* bitsize 64, bitpos 32 */
  COLORREF lopnColor; /* bitsize 32, bitpos 96 */
};
typedef struct tagLOGPEN /* id 251 */ LOGPEN;
typedef struct tagLOGPEN /* id 251 */ *PLOGPEN;
typedef struct tagLOGPEN /* id 251 */ *LPLOGPEN;
struct tagEMRCREATEPEN { /* size 28 id 252 */
  EMR emr; /* bitsize 64, bitpos 0 */
  DWORD ihPen; /* bitsize 32, bitpos 64 */
  LOGPEN lopn; /* bitsize 128, bitpos 96 */
};
typedef struct tagEMRCREATEPEN /* id 252 */ EMRCREATEPEN;
typedef struct tagEMRCREATEPEN /* id 252 */ *PEMRCREATEPEN;
struct tagEMRELLIPSE { /* size 24 id 253 */
  EMR emr; /* bitsize 64, bitpos 0 */
  RECTL rclBox; /* bitsize 128, bitpos 64 */
};
typedef struct tagEMRELLIPSE /* id 253 */ EMRELLIPSE;
typedef struct tagEMRELLIPSE /* id 253 */ *PEMRELLIPSE;
typedef struct tagEMRELLIPSE /* id 253 */ EMRRECTANGLE;
typedef struct tagEMRELLIPSE /* id 253 */ *PEMRRECTANGLE;
struct tagEMREOF { /* size 20 id 254 */
  EMR emr; /* bitsize 64, bitpos 0 */
  DWORD nPalEntries; /* bitsize 32, bitpos 64 */
  DWORD offPalEntries; /* bitsize 32, bitpos 96 */
  DWORD nSizeLast; /* bitsize 32, bitpos 128 */
};
typedef struct tagEMREOF /* id 254 */ EMREOF;
typedef struct tagEMREOF /* id 254 */ *PEMREOF;
struct tagEMREXCLUDECLIPRECT { /* size 24 id 255 */
  EMR emr; /* bitsize 64, bitpos 0 */
  RECTL rclClip; /* bitsize 128, bitpos 64 */
};
typedef struct tagEMREXCLUDECLIPRECT /* id 255 */ EMREXCLUDECLIPRECT;
typedef struct tagEMREXCLUDECLIPRECT /* id 255 */ *PEMREXCLUDECLIPRECT;
typedef struct tagEMREXCLUDECLIPRECT /* id 255 */ EMRINTERSECTCLIPRECT;
typedef struct tagEMREXCLUDECLIPRECT /* id 255 */ *PEMRINTERSECTCLIPRECT;
struct tagPANOSE { /* size 10 id 256 */
  BYTE bFamilyType; /* bitsize 8, bitpos 0 */
  BYTE bSerifStyle; /* bitsize 8, bitpos 8 */
  BYTE bWeight; /* bitsize 8, bitpos 16 */
  BYTE bProportion; /* bitsize 8, bitpos 24 */
  BYTE bContrast; /* bitsize 8, bitpos 32 */
  BYTE bStrokeVariation; /* bitsize 8, bitpos 40 */
  BYTE bArmStyle; /* bitsize 8, bitpos 48 */
  BYTE bLetterform; /* bitsize 8, bitpos 56 */
  BYTE bMidline; /* bitsize 8, bitpos 64 */
  BYTE bXHeight; /* bitsize 8, bitpos 72 */
};
typedef struct tagPANOSE /* id 256 */ PANOSE;
struct tagLOGFONTA { /* size 60 id 257 */
  LONG lfHeight; /* bitsize 32, bitpos 0 */
  LONG lfWidth; /* bitsize 32, bitpos 32 */
  LONG lfEscapement; /* bitsize 32, bitpos 64 */
  LONG lfOrientation; /* bitsize 32, bitpos 96 */
  LONG lfWeight; /* bitsize 32, bitpos 128 */
  BYTE lfItalic; /* bitsize 8, bitpos 160 */
  BYTE lfUnderline; /* bitsize 8, bitpos 168 */
  BYTE lfStrikeOut; /* bitsize 8, bitpos 176 */
  BYTE lfCharSet; /* bitsize 8, bitpos 184 */
  BYTE lfOutPrecision; /* bitsize 8, bitpos 192 */
  BYTE lfClipPrecision; /* bitsize 8, bitpos 200 */
  BYTE lfQuality; /* bitsize 8, bitpos 208 */
  BYTE lfPitchAndFamily; /* bitsize 8, bitpos 216 */
  CHAR lfFaceName[32]:uint32; /* bitsize 256, bitpos 224 */
};
typedef struct tagLOGFONTA /* id 257 */ LOGFONTA;
typedef struct tagLOGFONTA /* id 257 */ *PLOGFONTA;
typedef struct tagLOGFONTA /* id 257 */ *LPLOGFONTA;
struct tagLOGFONTW { /* size 92 id 258 */
  LONG lfHeight; /* bitsize 32, bitpos 0 */
  LONG lfWidth; /* bitsize 32, bitpos 32 */
  LONG lfEscapement; /* bitsize 32, bitpos 64 */
  LONG lfOrientation; /* bitsize 32, bitpos 96 */
  LONG lfWeight; /* bitsize 32, bitpos 128 */
  BYTE lfItalic; /* bitsize 8, bitpos 160 */
  BYTE lfUnderline; /* bitsize 8, bitpos 168 */
  BYTE lfStrikeOut; /* bitsize 8, bitpos 176 */
  BYTE lfCharSet; /* bitsize 8, bitpos 184 */
  BYTE lfOutPrecision; /* bitsize 8, bitpos 192 */
  BYTE lfClipPrecision; /* bitsize 8, bitpos 200 */
  BYTE lfQuality; /* bitsize 8, bitpos 208 */
  BYTE lfPitchAndFamily; /* bitsize 8, bitpos 216 */
  WCHAR lfFaceName[32]:uint32; /* bitsize 512, bitpos 224 */
};
typedef struct tagLOGFONTW /* id 258 */ LOGFONTW;
typedef struct tagLOGFONTW /* id 258 */ *PLOGFONTW;
typedef struct tagLOGFONTW /* id 258 */ *LPLOGFONTW;
struct tagEXTLOGFONTA { /* size 192 id 259 */
  LOGFONTA elfLogFont; /* bitsize 480, bitpos 0 */
  BYTE elfFullName[64]:uint32; /* bitsize 512, bitpos 480 */
  BYTE elfStyle[32]:uint32; /* bitsize 256, bitpos 992 */
  DWORD elfVersion; /* bitsize 32, bitpos 1248 */
  DWORD elfStyleSize; /* bitsize 32, bitpos 1280 */
  DWORD elfMatch; /* bitsize 32, bitpos 1312 */
  DWORD elfReserved; /* bitsize 32, bitpos 1344 */
  BYTE elfVendorId[4]:uint32; /* bitsize 32, bitpos 1376 */
  DWORD elfCulture; /* bitsize 32, bitpos 1408 */
  PANOSE elfPanose; /* bitsize 80, bitpos 1440 */
};
typedef struct tagEXTLOGFONTA /* id 259 */ EXTLOGFONTA;
typedef struct tagEXTLOGFONTA /* id 259 */ *PEXTLOGFONTA;
typedef struct tagEXTLOGFONTA /* id 259 */ *LPEXTLOGFONTA;
struct tagEXTLOGFONTW { /* size 320 id 260 */
  LOGFONTW elfLogFont; /* bitsize 736, bitpos 0 */
  WCHAR elfFullName[64]:uint32; /* bitsize 1024, bitpos 736 */
  WCHAR elfStyle[32]:uint32; /* bitsize 512, bitpos 1760 */
  DWORD elfVersion; /* bitsize 32, bitpos 2272 */
  DWORD elfStyleSize; /* bitsize 32, bitpos 2304 */
  DWORD elfMatch; /* bitsize 32, bitpos 2336 */
  DWORD elfReserved; /* bitsize 32, bitpos 2368 */
  BYTE elfVendorId[4]:uint32; /* bitsize 32, bitpos 2400 */
  DWORD elfCulture; /* bitsize 32, bitpos 2432 */
  PANOSE elfPanose; /* bitsize 80, bitpos 2464 */
};
typedef struct tagEXTLOGFONTW /* id 260 */ EXTLOGFONTW;
typedef struct tagEXTLOGFONTW /* id 260 */ *PEXTLOGFONTW;
typedef struct tagEXTLOGFONTW /* id 260 */ *LPEXTLOGFONTW;
struct tagEMREXTCREATEFONTINDIRECTW { /* size 332 id 261 */
  EMR emr; /* bitsize 64, bitpos 0 */
  DWORD ihFont; /* bitsize 32, bitpos 64 */
  EXTLOGFONTW elfw; /* bitsize 2560, bitpos 96 */
};
typedef struct tagEMREXTCREATEFONTINDIRECTW /* id 261 */ EMREXTCREATEFONTINDIRECTW;
typedef struct tagEMREXTCREATEFONTINDIRECTW /* id 261 */ *PEMREXTCREATEFONTINDIRECTW;
struct tagEXTLOGPEN { /* size 28 id 262 */
  UINT elpPenStyle; /* bitsize 32, bitpos 0 */
  UINT elpWidth; /* bitsize 32, bitpos 32 */
  UINT elpBrushStyle; /* bitsize 32, bitpos 64 */
  COLORREF elpColor; /* bitsize 32, bitpos 96 */
  LONG elpHatch; /* bitsize 32, bitpos 128 */
  DWORD elpNumEntries; /* bitsize 32, bitpos 160 */
  DWORD elpStyleEntry[1]:uint32; /* bitsize 32, bitpos 192 */
};
typedef struct tagEXTLOGPEN /* id 262 */ EXTLOGPEN;
typedef struct tagEXTLOGPEN /* id 262 */ *PEXTLOGPEN;
typedef struct tagEXTLOGPEN /* id 262 */ *LPEXTLOGPEN;
struct tagEMREXTCREATEPEN { /* size 56 id 263 */
  EMR emr; /* bitsize 64, bitpos 0 */
  DWORD ihPen; /* bitsize 32, bitpos 64 */
  DWORD offBmi; /* bitsize 32, bitpos 96 */
  DWORD cbBmi; /* bitsize 32, bitpos 128 */
  DWORD offBits; /* bitsize 32, bitpos 160 */
  DWORD cbBits; /* bitsize 32, bitpos 192 */
  EXTLOGPEN elp; /* bitsize 224, bitpos 224 */
};
typedef struct tagEMREXTCREATEPEN /* id 263 */ EMREXTCREATEPEN;
typedef struct tagEMREXTCREATEPEN /* id 263 */ *PEMREXTCREATEPEN;
struct tagEMREXTFLOODFILL { /* size 24 id 264 */
  EMR emr; /* bitsize 64, bitpos 0 */
  POINTL ptlStart; /* bitsize 64, bitpos 64 */
  COLORREF crColor; /* bitsize 32, bitpos 128 */
  DWORD iMode; /* bitsize 32, bitpos 160 */
};
typedef struct tagEMREXTFLOODFILL /* id 264 */ EMREXTFLOODFILL;
typedef struct tagEMREXTFLOODFILL /* id 264 */ *PEMREXTFLOODFILL;
struct tagEMREXTSELECTCLIPRGN { /* size 20 id 265 */
  EMR emr; /* bitsize 64, bitpos 0 */
  DWORD cbRgnData; /* bitsize 32, bitpos 64 */
  DWORD iMode; /* bitsize 32, bitpos 96 */
  BYTE RgnData[1]:uint32; /* bitsize 8, bitpos 128 */
};
typedef struct tagEMREXTSELECTCLIPRGN /* id 265 */ EMREXTSELECTCLIPRGN;
typedef struct tagEMREXTSELECTCLIPRGN /* id 265 */ *PEMREXTSELECTCLIPRGN;
struct tagEMRTEXT { /* size 40 id 266 */
  POINTL ptlReference; /* bitsize 64, bitpos 0 */
  DWORD nChars; /* bitsize 32, bitpos 64 */
  DWORD offString; /* bitsize 32, bitpos 96 */
  DWORD fOptions; /* bitsize 32, bitpos 128 */
  RECTL rcl; /* bitsize 128, bitpos 160 */
  DWORD offDx; /* bitsize 32, bitpos 288 */
};
typedef struct tagEMRTEXT /* id 266 */ EMRTEXT;
typedef struct tagEMRTEXT /* id 266 */ *PEMRTEXT;
struct tagEMREXTTEXTOUTA { /* size 76 id 267 */
  EMR emr; /* bitsize 64, bitpos 0 */
  RECTL rclBounds; /* bitsize 128, bitpos 64 */
  DWORD iGraphicsMode; /* bitsize 32, bitpos 192 */
  FLOAT exScale; /* bitsize 32, bitpos 224 */
  FLOAT eyScale; /* bitsize 32, bitpos 256 */
  EMRTEXT emrtext; /* bitsize 320, bitpos 288 */
};
typedef struct tagEMREXTTEXTOUTA /* id 267 */ EMREXTTEXTOUTA;
typedef struct tagEMREXTTEXTOUTA /* id 267 */ *PEMREXTTEXTOUTA;
typedef struct tagEMREXTTEXTOUTA /* id 267 */ EMREXTTEXTOUTW;
typedef struct tagEMREXTTEXTOUTA /* id 267 */ *PEMREXTTEXTOUTW;
struct tagEMRFILLPATH { /* size 24 id 268 */
  EMR emr; /* bitsize 64, bitpos 0 */
  RECTL rclBounds; /* bitsize 128, bitpos 64 */
};
typedef struct tagEMRFILLPATH /* id 268 */ EMRFILLPATH;
typedef struct tagEMRFILLPATH /* id 268 */ *PEMRFILLPATH;
typedef struct tagEMRFILLPATH /* id 268 */ EMRSTROKEANDFILLPATH;
typedef struct tagEMRFILLPATH /* id 268 */ *PEMRSTROKEANDFILLPATH;
typedef struct tagEMRFILLPATH /* id 268 */ EMRSTROKEPATH;
typedef struct tagEMRFILLPATH /* id 268 */ *PEMRSTROKEPATH;
struct tagEMRFILLRGN { /* size 36 id 269 */
  EMR emr; /* bitsize 64, bitpos 0 */
  RECTL rclBounds; /* bitsize 128, bitpos 64 */
  DWORD cbRgnData; /* bitsize 32, bitpos 192 */
  DWORD ihBrush; /* bitsize 32, bitpos 224 */
  BYTE RgnData[1]:uint32; /* bitsize 8, bitpos 256 */
};
typedef struct tagEMRFILLRGN /* id 269 */ EMRFILLRGN;
typedef struct tagEMRFILLRGN /* id 269 */ *PEMRFILLRGN;
struct tagEMRFORMAT { /* size 16 id 270 */
  DWORD dSignature; /* bitsize 32, bitpos 0 */
  DWORD nVersion; /* bitsize 32, bitpos 32 */
  DWORD cbData; /* bitsize 32, bitpos 64 */
  DWORD offData; /* bitsize 32, bitpos 96 */
};
typedef struct tagEMRFORMAT /* id 270 */ EMRFORMAT;
struct tagEMRFRAMERGN { /* size 44 id 271 */
  EMR emr; /* bitsize 64, bitpos 0 */
  RECTL rclBounds; /* bitsize 128, bitpos 64 */
  DWORD cbRgnData; /* bitsize 32, bitpos 192 */
  DWORD ihBrush; /* bitsize 32, bitpos 224 */
  SIZEL szlStroke; /* bitsize 64, bitpos 256 */
  BYTE RgnData[1]:uint32; /* bitsize 8, bitpos 320 */
};
typedef struct tagEMRFRAMERGN /* id 271 */ EMRFRAMERGN;
typedef struct tagEMRFRAMERGN /* id 271 */ *PEMRFRAMERGN;
struct tagEMRGDICOMMENT { /* size 16 id 272 */
  EMR emr; /* bitsize 64, bitpos 0 */
  DWORD cbData; /* bitsize 32, bitpos 64 */
  BYTE Data[1]:uint32; /* bitsize 8, bitpos 96 */
};
typedef struct tagEMRGDICOMMENT /* id 272 */ EMRGDICOMMENT;
typedef struct tagEMRGDICOMMENT /* id 272 */ *PEMRGDICOMMENT;
struct tagEMRINVERTRGN { /* size 32 id 273 */
  EMR emr; /* bitsize 64, bitpos 0 */
  RECTL rclBounds; /* bitsize 128, bitpos 64 */
  DWORD cbRgnData; /* bitsize 32, bitpos 192 */
  BYTE RgnData[1]:uint32; /* bitsize 8, bitpos 224 */
};
typedef struct tagEMRINVERTRGN /* id 273 */ EMRINVERTRGN;
typedef struct tagEMRINVERTRGN /* id 273 */ *PEMRINVERTRGN;
typedef struct tagEMRINVERTRGN /* id 273 */ EMRPAINTRGN;
typedef struct tagEMRINVERTRGN /* id 273 */ *PEMRPAINTRGN;
struct tagEMRLINETO { /* size 16 id 274 */
  EMR emr; /* bitsize 64, bitpos 0 */
  POINTL ptl; /* bitsize 64, bitpos 64 */
};
typedef struct tagEMRLINETO /* id 274 */ EMRLINETO;
typedef struct tagEMRLINETO /* id 274 */ *PEMRLINETO;
typedef struct tagEMRLINETO /* id 274 */ EMRMOVETOEX;
typedef struct tagEMRLINETO /* id 274 */ *PEMRMOVETOEX;
struct tagEMRMASKBLT { /* size 128 id 275 */
  EMR emr; /* bitsize 64, bitpos 0 */
  RECTL rclBounds; /* bitsize 128, bitpos 64 */
  LONG xDest; /* bitsize 32, bitpos 192 */
  LONG yDest; /* bitsize 32, bitpos 224 */
  LONG cxDest; /* bitsize 32, bitpos 256 */
  LONG cyDest; /* bitsize 32, bitpos 288 */
  DWORD dwRop; /* bitsize 32, bitpos 320 */
  LONG xSrc; /* bitsize 32, bitpos 352 */
  LONG ySrc; /* bitsize 32, bitpos 384 */
  XFORM xformSrc; /* bitsize 192, bitpos 416 */
  COLORREF crBkColorSrc; /* bitsize 32, bitpos 608 */
  DWORD iUsageSrc; /* bitsize 32, bitpos 640 */
  DWORD offBmiSrc; /* bitsize 32, bitpos 672 */
  DWORD cbBmiSrc; /* bitsize 32, bitpos 704 */
  DWORD offBitsSrc; /* bitsize 32, bitpos 736 */
  DWORD cbBitsSrc; /* bitsize 32, bitpos 768 */
  LONG xMask; /* bitsize 32, bitpos 800 */
  LONG yMask; /* bitsize 32, bitpos 832 */
  DWORD iUsageMask; /* bitsize 32, bitpos 864 */
  DWORD offBmiMask; /* bitsize 32, bitpos 896 */
  DWORD cbBmiMask; /* bitsize 32, bitpos 928 */
  DWORD offBitsMask; /* bitsize 32, bitpos 960 */
  DWORD cbBitsMask; /* bitsize 32, bitpos 992 */
};
typedef struct tagEMRMASKBLT /* id 275 */ EMRMASKBLT;
typedef struct tagEMRMASKBLT /* id 275 */ *PEMRMASKBLT;
struct tagEMRMODIFYWORLDTRANSFORM { /* size 36 id 276 */
  EMR emr; /* bitsize 64, bitpos 0 */
  XFORM xform; /* bitsize 192, bitpos 64 */
  DWORD iMode; /* bitsize 32, bitpos 256 */
};
typedef struct tagEMRMODIFYWORLDTRANSFORM /* id 276 */ EMRMODIFYWORLDTRANSFORM;
typedef struct tagEMRMODIFYWORLDTRANSFORM /* id 276 */ *PEMRMODIFYWORLDTRANSFORM;
struct tagEMROFFSETCLIPRGN { /* size 16 id 277 */
  EMR emr; /* bitsize 64, bitpos 0 */
  POINTL ptlOffset; /* bitsize 64, bitpos 64 */
};
typedef struct tagEMROFFSETCLIPRGN /* id 277 */ EMROFFSETCLIPRGN;
typedef struct tagEMROFFSETCLIPRGN /* id 277 */ *PEMROFFSETCLIPRGN;
struct tagEMRPLGBLT { /* size 140 id 278 */
  EMR emr; /* bitsize 64, bitpos 0 */
  RECTL rclBounds; /* bitsize 128, bitpos 64 */
  POINTL aptlDest[3]:uint32; /* bitsize 192, bitpos 192 */
  LONG xSrc; /* bitsize 32, bitpos 384 */
  LONG ySrc; /* bitsize 32, bitpos 416 */
  LONG cxSrc; /* bitsize 32, bitpos 448 */
  LONG cySrc; /* bitsize 32, bitpos 480 */
  XFORM xformSrc; /* bitsize 192, bitpos 512 */
  COLORREF crBkColorSrc; /* bitsize 32, bitpos 704 */
  DWORD iUsageSrc; /* bitsize 32, bitpos 736 */
  DWORD offBmiSrc; /* bitsize 32, bitpos 768 */
  DWORD cbBmiSrc; /* bitsize 32, bitpos 800 */
  DWORD offBitsSrc; /* bitsize 32, bitpos 832 */
  DWORD cbBitsSrc; /* bitsize 32, bitpos 864 */
  LONG xMask; /* bitsize 32, bitpos 896 */
  LONG yMask; /* bitsize 32, bitpos 928 */
  DWORD iUsageMask; /* bitsize 32, bitpos 960 */
  DWORD offBmiMask; /* bitsize 32, bitpos 992 */
  DWORD cbBmiMask; /* bitsize 32, bitpos 1024 */
  DWORD offBitsMask; /* bitsize 32, bitpos 1056 */
  DWORD cbBitsMask; /* bitsize 32, bitpos 1088 */
};
typedef struct tagEMRPLGBLT /* id 278 */ EMRPLGBLT;
typedef struct tagEMRPLGBLT /* id 278 */ *PEMRPLGBLT;
struct tagEMRPOLYDRAW { /* size 40 id 279 */
  EMR emr; /* bitsize 64, bitpos 0 */
  RECTL rclBounds; /* bitsize 128, bitpos 64 */
  DWORD cptl; /* bitsize 32, bitpos 192 */
  POINTL aptl[1]:uint32; /* bitsize 64, bitpos 224 */
  BYTE abTypes[1]:uint32; /* bitsize 8, bitpos 288 */
};
typedef struct tagEMRPOLYDRAW /* id 279 */ EMRPOLYDRAW;
typedef struct tagEMRPOLYDRAW /* id 279 */ *PEMRPOLYDRAW;
struct tagEMRPOLYDRAW16 { /* size 36 id 280 */
  EMR emr; /* bitsize 64, bitpos 0 */
  RECTL rclBounds; /* bitsize 128, bitpos 64 */
  DWORD cpts; /* bitsize 32, bitpos 192 */
  POINTS apts[1]:uint32; /* bitsize 32, bitpos 224 */
  BYTE abTypes[1]:uint32; /* bitsize 8, bitpos 256 */
};
typedef struct tagEMRPOLYDRAW16 /* id 280 */ EMRPOLYDRAW16;
typedef struct tagEMRPOLYDRAW16 /* id 280 */ *PEMRPOLYDRAW16;
struct tagEMRPOLYLINE { /* size 36 id 281 */
  EMR emr; /* bitsize 64, bitpos 0 */
  RECTL rclBounds; /* bitsize 128, bitpos 64 */
  DWORD cptl; /* bitsize 32, bitpos 192 */
  POINTL aptl[1]:uint32; /* bitsize 64, bitpos 224 */
};
typedef struct tagEMRPOLYLINE /* id 281 */ EMRPOLYLINE;
typedef struct tagEMRPOLYLINE /* id 281 */ *PEMRPOLYLINE;
typedef struct tagEMRPOLYLINE /* id 281 */ EMRPOLYBEZIER;
typedef struct tagEMRPOLYLINE /* id 281 */ *PEMRPOLYBEZIER;
typedef struct tagEMRPOLYLINE /* id 281 */ EMRPOLYGON;
typedef struct tagEMRPOLYLINE /* id 281 */ *PEMRPOLYGON;
typedef struct tagEMRPOLYLINE /* id 281 */ EMRPOLYBEZIERTO;
typedef struct tagEMRPOLYLINE /* id 281 */ *PEMRPOLYBEZIERTO;
typedef struct tagEMRPOLYLINE /* id 281 */ EMRPOLYLINETO;
typedef struct tagEMRPOLYLINE /* id 281 */ *PEMRPOLYLINETO;
struct tagEMRPOLYLINE16 { /* size 36 id 282 */
  EMR emr; /* bitsize 64, bitpos 0 */
  RECTL rclBounds; /* bitsize 128, bitpos 64 */
  DWORD cpts; /* bitsize 32, bitpos 192 */
  POINTL apts[1]:uint32; /* bitsize 64, bitpos 224 */
};
typedef struct tagEMRPOLYLINE16 /* id 282 */ EMRPOLYLINE16;
typedef struct tagEMRPOLYLINE16 /* id 282 */ *PEMRPOLYLINE16;
typedef struct tagEMRPOLYLINE16 /* id 282 */ EMRPOLYBEZIER16;
typedef struct tagEMRPOLYLINE16 /* id 282 */ *PEMRPOLYBEZIER16;
typedef struct tagEMRPOLYLINE16 /* id 282 */ EMRPOLYGON16;
typedef struct tagEMRPOLYLINE16 /* id 282 */ *PEMRPOLYGON16;
typedef struct tagEMRPOLYLINE16 /* id 282 */ EMRPOLYBEZIERTO16;
typedef struct tagEMRPOLYLINE16 /* id 282 */ *PEMRPOLYBEZIERTO16;
typedef struct tagEMRPOLYLINE16 /* id 282 */ EMRPOLYLINETO16;
typedef struct tagEMRPOLYLINE16 /* id 282 */ *PEMRPOLYLINETO16;
struct tagEMRPOLYPOLYLINE { /* size 44 id 283 */
  EMR emr; /* bitsize 64, bitpos 0 */
  RECTL rclBounds; /* bitsize 128, bitpos 64 */
  DWORD nPolys; /* bitsize 32, bitpos 192 */
  DWORD cptl; /* bitsize 32, bitpos 224 */
  DWORD aPolyCounts[1]:uint32; /* bitsize 32, bitpos 256 */
  POINTL aptl[1]:uint32; /* bitsize 64, bitpos 288 */
};
typedef struct tagEMRPOLYPOLYLINE /* id 283 */ EMRPOLYPOLYLINE;
typedef struct tagEMRPOLYPOLYLINE /* id 283 */ *PEMRPOLYPOLYLINE;
typedef struct tagEMRPOLYPOLYLINE /* id 283 */ EMRPOLYPOLYGON;
typedef struct tagEMRPOLYPOLYLINE /* id 283 */ *PEMRPOLYPOLYGON;
struct tagEMRPOLYPOLYLINE16 { /* size 40 id 284 */
  EMR emr; /* bitsize 64, bitpos 0 */
  RECTL rclBounds; /* bitsize 128, bitpos 64 */
  DWORD nPolys; /* bitsize 32, bitpos 192 */
  DWORD cpts; /* bitsize 32, bitpos 224 */
  DWORD aPolyCounts[1]:uint32; /* bitsize 32, bitpos 256 */
  POINTS apts[1]:uint32; /* bitsize 32, bitpos 288 */
};
typedef struct tagEMRPOLYPOLYLINE16 /* id 284 */ EMRPOLYPOLYLINE16;
typedef struct tagEMRPOLYPOLYLINE16 /* id 284 */ *PEMRPOLYPOLYLINE16;
typedef struct tagEMRPOLYPOLYLINE16 /* id 284 */ EMRPOLYPOLYGON16;
typedef struct tagEMRPOLYPOLYLINE16 /* id 284 */ *PEMRPOLYPOLYGON16;
struct tagEMRPOLYTEXTOUTA { /* size 80 id 285 */
  EMR emr; /* bitsize 64, bitpos 0 */
  RECTL rclBounds; /* bitsize 128, bitpos 64 */
  DWORD iGraphicsMode; /* bitsize 32, bitpos 192 */
  FLOAT exScale; /* bitsize 32, bitpos 224 */
  FLOAT eyScale; /* bitsize 32, bitpos 256 */
  LONG cStrings; /* bitsize 32, bitpos 288 */
  EMRTEXT aemrtext[1]:uint32; /* bitsize 320, bitpos 320 */
};
typedef struct tagEMRPOLYTEXTOUTA /* id 285 */ EMRPOLYTEXTOUTA;
typedef struct tagEMRPOLYTEXTOUTA /* id 285 */ *PEMRPOLYTEXTOUTA;
typedef struct tagEMRPOLYTEXTOUTA /* id 285 */ EMRPOLYTEXTOUTW;
typedef struct tagEMRPOLYTEXTOUTA /* id 285 */ *PEMRPOLYTEXTOUTW;
struct tagEMRRESIZEPALETTE { /* size 16 id 286 */
  EMR emr; /* bitsize 64, bitpos 0 */
  DWORD ihPal; /* bitsize 32, bitpos 64 */
  DWORD cEntries; /* bitsize 32, bitpos 96 */
};
typedef struct tagEMRRESIZEPALETTE /* id 286 */ EMRRESIZEPALETTE;
typedef struct tagEMRRESIZEPALETTE /* id 286 */ *PEMRRESIZEPALETTE;
struct tagEMRRESTOREDC { /* size 12 id 287 */
  EMR emr; /* bitsize 64, bitpos 0 */
  LONG iRelative; /* bitsize 32, bitpos 64 */
};
typedef struct tagEMRRESTOREDC /* id 287 */ EMRRESTOREDC;
typedef struct tagEMRRESTOREDC /* id 287 */ *PEMRRESTOREDC;
struct tagEMRROUNDRECT { /* size 32 id 288 */
  EMR emr; /* bitsize 64, bitpos 0 */
  RECTL rclBox; /* bitsize 128, bitpos 64 */
  SIZEL szlCorner; /* bitsize 64, bitpos 192 */
};
typedef struct tagEMRROUNDRECT /* id 288 */ EMRROUNDRECT;
typedef struct tagEMRROUNDRECT /* id 288 */ *PEMRROUNDRECT;
struct tagEMRSCALEVIEWPORTEXTEX { /* size 24 id 289 */
  EMR emr; /* bitsize 64, bitpos 0 */
  LONG xNum; /* bitsize 32, bitpos 64 */
  LONG xDenom; /* bitsize 32, bitpos 96 */
  LONG yNum; /* bitsize 32, bitpos 128 */
  LONG yDenom; /* bitsize 32, bitpos 160 */
};
typedef struct tagEMRSCALEVIEWPORTEXTEX /* id 289 */ EMRSCALEVIEWPORTEXTEX;
typedef struct tagEMRSCALEVIEWPORTEXTEX /* id 289 */ *PEMRSCALEVIEWPORTEXTEX;
typedef struct tagEMRSCALEVIEWPORTEXTEX /* id 289 */ EMRSCALEWINDOWEXTEX;
typedef struct tagEMRSCALEVIEWPORTEXTEX /* id 289 */ *PEMRSCALEWINDOWEXTEX;
struct tagEMRSELECTCOLORSPACE { /* size 12 id 290 */
  EMR emr; /* bitsize 64, bitpos 0 */
  DWORD ihCS; /* bitsize 32, bitpos 64 */
};
typedef struct tagEMRSELECTCOLORSPACE /* id 290 */ EMRSELECTCOLORSPACE;
typedef struct tagEMRSELECTCOLORSPACE /* id 290 */ *PEMRSELECTCOLORSPACE;
typedef struct tagEMRSELECTCOLORSPACE /* id 290 */ EMRDELETECOLORSPACE;
typedef struct tagEMRSELECTCOLORSPACE /* id 290 */ *PEMRDELETECOLORSPACE;
struct tagEMRSELECTOBJECT { /* size 12 id 291 */
  EMR emr; /* bitsize 64, bitpos 0 */
  DWORD ihObject; /* bitsize 32, bitpos 64 */
};
typedef struct tagEMRSELECTOBJECT /* id 291 */ EMRSELECTOBJECT;
typedef struct tagEMRSELECTOBJECT /* id 291 */ *PEMRSELECTOBJECT;
typedef struct tagEMRSELECTOBJECT /* id 291 */ EMRDELETEOBJECT;
typedef struct tagEMRSELECTOBJECT /* id 291 */ *PEMRDELETEOBJECT;
struct tagEMRSELECTPALETTE { /* size 12 id 292 */
  EMR emr; /* bitsize 64, bitpos 0 */
  DWORD ihPal; /* bitsize 32, bitpos 64 */
};
typedef struct tagEMRSELECTPALETTE /* id 292 */ EMRSELECTPALETTE;
typedef struct tagEMRSELECTPALETTE /* id 292 */ *PEMRSELECTPALETTE;
struct tagEMRSETARCDIRECTION { /* size 12 id 293 */
  EMR emr; /* bitsize 64, bitpos 0 */
  DWORD iArcDirection; /* bitsize 32, bitpos 64 */
};
typedef struct tagEMRSETARCDIRECTION /* id 293 */ EMRSETARCDIRECTION;
typedef struct tagEMRSETARCDIRECTION /* id 293 */ *PEMRSETARCDIRECTION;
struct tagEMRSETTEXTCOLOR { /* size 12 id 294 */
  EMR emr; /* bitsize 64, bitpos 0 */
  COLORREF crColor; /* bitsize 32, bitpos 64 */
};
typedef struct tagEMRSETTEXTCOLOR /* id 294 */ EMRSETBKCOLOR;
typedef struct tagEMRSETTEXTCOLOR /* id 294 */ *PEMRSETBKCOLOR;
typedef struct tagEMRSETTEXTCOLOR /* id 294 */ EMRSETTEXTCOLOR;
typedef struct tagEMRSETTEXTCOLOR /* id 294 */ *PEMRSETTEXTCOLOR;
struct tagEMRSETCOLORADJUSTMENT { /* size 32 id 295 */
  EMR emr; /* bitsize 64, bitpos 0 */
  COLORADJUSTMENT ColorAdjustment; /* bitsize 192, bitpos 64 */
};
typedef struct tagEMRSETCOLORADJUSTMENT /* id 295 */ EMRSETCOLORADJUSTMENT;
typedef struct tagEMRSETCOLORADJUSTMENT /* id 295 */ *PEMRSETCOLORADJUSTMENT;
struct tagEMRSETDIBITSTODEVICE { /* size 76 id 296 */
  EMR emr; /* bitsize 64, bitpos 0 */
  RECTL rclBounds; /* bitsize 128, bitpos 64 */
  LONG xDest; /* bitsize 32, bitpos 192 */
  LONG yDest; /* bitsize 32, bitpos 224 */
  LONG xSrc; /* bitsize 32, bitpos 256 */
  LONG ySrc; /* bitsize 32, bitpos 288 */
  LONG cxSrc; /* bitsize 32, bitpos 320 */
  LONG cySrc; /* bitsize 32, bitpos 352 */
  DWORD offBmiSrc; /* bitsize 32, bitpos 384 */
  DWORD cbBmiSrc; /* bitsize 32, bitpos 416 */
  DWORD offBitsSrc; /* bitsize 32, bitpos 448 */
  DWORD cbBitsSrc; /* bitsize 32, bitpos 480 */
  DWORD iUsageSrc; /* bitsize 32, bitpos 512 */
  DWORD iStartScan; /* bitsize 32, bitpos 544 */
  DWORD cScans; /* bitsize 32, bitpos 576 */
};
typedef struct tagEMRSETDIBITSTODEVICE /* id 296 */ EMRSETDIBITSTODEVICE;
typedef struct tagEMRSETDIBITSTODEVICE /* id 296 */ *PEMRSETDIBITSTODEVICE;
struct tagEMRSETMAPPERFLAGS { /* size 12 id 297 */
  EMR emr; /* bitsize 64, bitpos 0 */
  DWORD dwFlags; /* bitsize 32, bitpos 64 */
};
typedef struct tagEMRSETMAPPERFLAGS /* id 297 */ EMRSETMAPPERFLAGS;
typedef struct tagEMRSETMAPPERFLAGS /* id 297 */ *PEMRSETMAPPERFLAGS;
struct tagEMRSETMITERLIMIT { /* size 12 id 298 */
  EMR emr; /* bitsize 64, bitpos 0 */
  FLOAT eMiterLimit; /* bitsize 32, bitpos 64 */
};
typedef struct tagEMRSETMITERLIMIT /* id 298 */ EMRSETMITERLIMIT;
typedef struct tagEMRSETMITERLIMIT /* id 298 */ *PEMRSETMITERLIMIT;
struct tagEMRSETPALETTEENTRIES { /* size 24 id 299 */
  EMR emr; /* bitsize 64, bitpos 0 */
  DWORD ihPal; /* bitsize 32, bitpos 64 */
  DWORD iStart; /* bitsize 32, bitpos 96 */
  DWORD cEntries; /* bitsize 32, bitpos 128 */
  PALETTEENTRY aPalEntries[1]:uint32; /* bitsize 32, bitpos 160 */
};
typedef struct tagEMRSETPALETTEENTRIES /* id 299 */ EMRSETPALETTEENTRIES;
typedef struct tagEMRSETPALETTEENTRIES /* id 299 */ *PEMRSETPALETTEENTRIES;
struct tagEMRSETPIXELV { /* size 20 id 300 */
  EMR emr; /* bitsize 64, bitpos 0 */
  POINTL ptlPixel; /* bitsize 64, bitpos 64 */
  COLORREF crColor; /* bitsize 32, bitpos 128 */
};
typedef struct tagEMRSETPIXELV /* id 300 */ EMRSETPIXELV;
typedef struct tagEMRSETPIXELV /* id 300 */ *PEMRSETPIXELV;
struct tagEMRSETVIEWPORTEXTEX { /* size 16 id 301 */
  EMR emr; /* bitsize 64, bitpos 0 */
  SIZEL szlExtent; /* bitsize 64, bitpos 64 */
};
typedef struct tagEMRSETVIEWPORTEXTEX /* id 301 */ EMRSETVIEWPORTEXTEX;
typedef struct tagEMRSETVIEWPORTEXTEX /* id 301 */ *PEMRSETVIEWPORTEXTEX;
typedef struct tagEMRSETVIEWPORTEXTEX /* id 301 */ EMRSETWINDOWEXTEX;
typedef struct tagEMRSETVIEWPORTEXTEX /* id 301 */ *PEMRSETWINDOWEXTEX;
struct tagEMRSETVIEWPORTORGEX { /* size 16 id 302 */
  EMR emr; /* bitsize 64, bitpos 0 */
  POINTL ptlOrigin; /* bitsize 64, bitpos 64 */
};
typedef struct tagEMRSETVIEWPORTORGEX /* id 302 */ EMRSETVIEWPORTORGEX;
typedef struct tagEMRSETVIEWPORTORGEX /* id 302 */ *PEMRSETVIEWPORTORGEX;
typedef struct tagEMRSETVIEWPORTORGEX /* id 302 */ EMRSETWINDOWORGEX;
typedef struct tagEMRSETVIEWPORTORGEX /* id 302 */ *PEMRSETWINDOWORGEX;
typedef struct tagEMRSETVIEWPORTORGEX /* id 302 */ EMRSETBRUSHORGEX;
typedef struct tagEMRSETVIEWPORTORGEX /* id 302 */ *PEMRSETBRUSHORGEX;
struct tagEMRSETWORLDTRANSFORM { /* size 32 id 303 */
  EMR emr; /* bitsize 64, bitpos 0 */
  XFORM xform; /* bitsize 192, bitpos 64 */
};
typedef struct tagEMRSETWORLDTRANSFORM /* id 303 */ EMRSETWORLDTRANSFORM;
typedef struct tagEMRSETWORLDTRANSFORM /* id 303 */ *PEMRSETWORLDTRANSFORM;
struct tagEMRSTRETCHBLT { /* size 108 id 304 */
  EMR emr; /* bitsize 64, bitpos 0 */
  RECTL rclBounds; /* bitsize 128, bitpos 64 */
  LONG xDest; /* bitsize 32, bitpos 192 */
  LONG yDest; /* bitsize 32, bitpos 224 */
  LONG cxDest; /* bitsize 32, bitpos 256 */
  LONG cyDest; /* bitsize 32, bitpos 288 */
  DWORD dwRop; /* bitsize 32, bitpos 320 */
  LONG xSrc; /* bitsize 32, bitpos 352 */
  LONG ySrc; /* bitsize 32, bitpos 384 */
  XFORM xformSrc; /* bitsize 192, bitpos 416 */
  COLORREF crBkColorSrc; /* bitsize 32, bitpos 608 */
  DWORD iUsageSrc; /* bitsize 32, bitpos 640 */
  DWORD offBmiSrc; /* bitsize 32, bitpos 672 */
  DWORD cbBmiSrc; /* bitsize 32, bitpos 704 */
  DWORD offBitsSrc; /* bitsize 32, bitpos 736 */
  DWORD cbBitsSrc; /* bitsize 32, bitpos 768 */
  LONG cxSrc; /* bitsize 32, bitpos 800 */
  LONG cySrc; /* bitsize 32, bitpos 832 */
};
typedef struct tagEMRSTRETCHBLT /* id 304 */ EMRSTRETCHBLT;
typedef struct tagEMRSTRETCHBLT /* id 304 */ *PEMRSTRETCHBLT;
struct tagEMRSTRETCHDIBITS { /* size 80 id 305 */
  EMR emr; /* bitsize 64, bitpos 0 */
  RECTL rclBounds; /* bitsize 128, bitpos 64 */
  LONG xDest; /* bitsize 32, bitpos 192 */
  LONG yDest; /* bitsize 32, bitpos 224 */
  LONG xSrc; /* bitsize 32, bitpos 256 */
  LONG ySrc; /* bitsize 32, bitpos 288 */
  LONG cxSrc; /* bitsize 32, bitpos 320 */
  LONG cySrc; /* bitsize 32, bitpos 352 */
  DWORD offBmiSrc; /* bitsize 32, bitpos 384 */
  DWORD cbBmiSrc; /* bitsize 32, bitpos 416 */
  DWORD offBitsSrc; /* bitsize 32, bitpos 448 */
  DWORD cbBitsSrc; /* bitsize 32, bitpos 480 */
  DWORD iUsageSrc; /* bitsize 32, bitpos 512 */
  DWORD dwRop; /* bitsize 32, bitpos 544 */
  LONG cxDest; /* bitsize 32, bitpos 576 */
  LONG cyDest; /* bitsize 32, bitpos 608 */
};
typedef struct tagEMRSTRETCHDIBITS /* id 305 */ EMRSTRETCHDIBITS;
typedef struct tagEMRSTRETCHDIBITS /* id 305 */ *PEMRSTRETCHDIBITS;
struct tagABORTPATH { /* size 8 id 306 */
  EMR emr; /* bitsize 64, bitpos 0 */
};
typedef struct tagABORTPATH /* id 306 */ EMRABORTPATH;
typedef struct tagABORTPATH /* id 306 */ *PEMRABORTPATH;
typedef struct tagABORTPATH /* id 306 */ EMRBEGINPATH;
typedef struct tagABORTPATH /* id 306 */ *PEMRBEGINPATH;
typedef struct tagABORTPATH /* id 306 */ EMRENDPATH;
typedef struct tagABORTPATH /* id 306 */ *PEMRENDPATH;
typedef struct tagABORTPATH /* id 306 */ EMRCLOSEFIGURE;
typedef struct tagABORTPATH /* id 306 */ *PEMRCLOSEFIGURE;
typedef struct tagABORTPATH /* id 306 */ EMRFLATTENPATH;
typedef struct tagABORTPATH /* id 306 */ *PEMRFLATTENPATH;
typedef struct tagABORTPATH /* id 306 */ EMRWIDENPATH;
typedef struct tagABORTPATH /* id 306 */ *PEMRWIDENPATH;
typedef struct tagABORTPATH /* id 306 */ EMRSETMETARGN;
typedef struct tagABORTPATH /* id 306 */ *PEMRSETMETARGN;
typedef struct tagABORTPATH /* id 306 */ EMRSAVEDC;
typedef struct tagABORTPATH /* id 306 */ *PEMRSAVEDC;
typedef struct tagABORTPATH /* id 306 */ EMRREALIZEPALETTE;
typedef struct tagABORTPATH /* id 306 */ *PEMRREALIZEPALETTE;
struct tagEMRSELECTCLIPPATH { /* size 12 id 307 */
  EMR emr; /* bitsize 64, bitpos 0 */
  DWORD iMode; /* bitsize 32, bitpos 64 */
};
typedef struct tagEMRSELECTCLIPPATH /* id 307 */ EMRSELECTCLIPPATH;
typedef struct tagEMRSELECTCLIPPATH /* id 307 */ *PEMRSELECTCLIPPATH;
typedef struct tagEMRSELECTCLIPPATH /* id 307 */ EMRSETBKMODE;
typedef struct tagEMRSELECTCLIPPATH /* id 307 */ *PEMRSETBKMODE;
typedef struct tagEMRSELECTCLIPPATH /* id 307 */ EMRSETMAPMODE;
typedef struct tagEMRSELECTCLIPPATH /* id 307 */ *PEMRSETMAPMODE;
typedef struct tagEMRSELECTCLIPPATH /* id 307 */ EMRSETPOLYFILLMODE;
typedef struct tagEMRSELECTCLIPPATH /* id 307 */ *PEMRSETPOLYFILLMODE;
typedef struct tagEMRSELECTCLIPPATH /* id 307 */ EMRSETROP2;
typedef struct tagEMRSELECTCLIPPATH /* id 307 */ *PEMRSETROP2;
typedef struct tagEMRSELECTCLIPPATH /* id 307 */ EMRSETSTRETCHBLTMODE;
typedef struct tagEMRSELECTCLIPPATH /* id 307 */ *PEMRSETSTRETCHBLTMODE;
typedef struct tagEMRSELECTCLIPPATH /* id 307 */ EMRSETTEXTALIGN;
typedef struct tagEMRSELECTCLIPPATH /* id 307 */ *PEMRSETTEXTALIGN;
typedef struct tagEMRSELECTCLIPPATH /* id 307 */ EMRENABLEICM;
typedef struct tagEMRSELECTCLIPPATH /* id 307 */ *PEMRENABLEICM;
struct tagMETAHEADER { /* size 18 id 308 */
  WORD mtType; /* bitsize 16, bitpos 0 */
  WORD mtHeaderSize; /* bitsize 16, bitpos 16 */
  WORD mtVersion; /* bitsize 16, bitpos 32 */
  DWORD mtSize; /* bitsize 32, bitpos 48 */
  WORD mtNoObjects; /* bitsize 16, bitpos 80 */
  DWORD mtMaxRecord; /* bitsize 32, bitpos 96 */
  WORD mtNoParameters; /* bitsize 16, bitpos 128 */
};
typedef struct tagMETAHEADER /* id 308 */ METAHEADER;
typedef struct tagMETAHEADER /* id 308 */ *PMETAHEADER;
typedef struct tagMETAHEADER /* id 308 */ *LPMETAHEADER;
struct tagENHMETAHEADER { /* size 100 id 309 */
  DWORD iType; /* bitsize 32, bitpos 0 */
  DWORD nSize; /* bitsize 32, bitpos 32 */
  RECTL rclBounds; /* bitsize 128, bitpos 64 */
  RECTL rclFrame; /* bitsize 128, bitpos 192 */
  DWORD dSignature; /* bitsize 32, bitpos 320 */
  DWORD nVersion; /* bitsize 32, bitpos 352 */
  DWORD nBytes; /* bitsize 32, bitpos 384 */
  DWORD nRecords; /* bitsize 32, bitpos 416 */
  WORD nHandles; /* bitsize 16, bitpos 448 */
  WORD sReserved; /* bitsize 16, bitpos 464 */
  DWORD nDescription; /* bitsize 32, bitpos 480 */
  DWORD offDescription; /* bitsize 32, bitpos 512 */
  DWORD nPalEntries; /* bitsize 32, bitpos 544 */
  SIZEL szlDevice; /* bitsize 64, bitpos 576 */
  SIZEL szlMillimeters; /* bitsize 64, bitpos 640 */
  DWORD cbPixelFormat; /* bitsize 32, bitpos 704 */
  DWORD offPixelFormat; /* bitsize 32, bitpos 736 */
  DWORD bOpenGL; /* bitsize 32, bitpos 768 */
};
typedef struct tagENHMETAHEADER /* id 309 */ ENHMETAHEADER;
typedef struct tagENHMETAHEADER /* id 309 */ *LPENHMETAHEADER;
struct tagMETARECORD { /* size 8 id 310 */
  DWORD rdSize; /* bitsize 32, bitpos 0 */
  WORD rdFunction; /* bitsize 16, bitpos 32 */
  WORD rdParm[1]:uint32; /* bitsize 16, bitpos 48 */
};
typedef struct tagMETARECORD /* id 310 */ METARECORD;
typedef struct tagMETARECORD /* id 310 */ *PMETARECORD;
typedef struct tagMETARECORD /* id 310 */ *LPMETARECORD;
struct tagENHMETARECORD { /* size 12 id 311 */
  DWORD iType; /* bitsize 32, bitpos 0 */
  DWORD nSize; /* bitsize 32, bitpos 32 */
  DWORD dParm[1]:uint32; /* bitsize 32, bitpos 64 */
};
typedef struct tagENHMETARECORD /* id 311 */ ENHMETARECORD;
typedef struct tagENHMETARECORD /* id 311 */ *LPENHMETARECORD;
struct tagHANDLETABLE { /* size 4 id 312 */
  HGDIOBJ objectHandle[1]:uint32; /* bitsize 32, bitpos 0 */
};
typedef struct tagHANDLETABLE /* id 312 */ HANDLETABLE;
typedef struct tagHANDLETABLE /* id 312 */ *LPHANDLETABLE;
struct tagTEXTMETRICA { /* size 56 id 313 */
  LONG tmHeight; /* bitsize 32, bitpos 0 */
  LONG tmAscent; /* bitsize 32, bitpos 32 */
  LONG tmDescent; /* bitsize 32, bitpos 64 */
  LONG tmInternalLeading; /* bitsize 32, bitpos 96 */
  LONG tmExternalLeading; /* bitsize 32, bitpos 128 */
  LONG tmAveCharWidth; /* bitsize 32, bitpos 160 */
  LONG tmMaxCharWidth; /* bitsize 32, bitpos 192 */
  LONG tmWeight; /* bitsize 32, bitpos 224 */
  LONG tmOverhang; /* bitsize 32, bitpos 256 */
  LONG tmDigitizedAspectX; /* bitsize 32, bitpos 288 */
  LONG tmDigitizedAspectY; /* bitsize 32, bitpos 320 */
  BYTE tmFirstChar; /* bitsize 8, bitpos 352 */
  BYTE tmLastChar; /* bitsize 8, bitpos 360 */
  BYTE tmDefaultChar; /* bitsize 8, bitpos 368 */
  BYTE tmBreakChar; /* bitsize 8, bitpos 376 */
  BYTE tmItalic; /* bitsize 8, bitpos 384 */
  BYTE tmUnderlined; /* bitsize 8, bitpos 392 */
  BYTE tmStruckOut; /* bitsize 8, bitpos 400 */
  BYTE tmPitchAndFamily; /* bitsize 8, bitpos 408 */
  BYTE tmCharSet; /* bitsize 8, bitpos 416 */
};
typedef struct tagTEXTMETRICA /* id 313 */ TEXTMETRICA;
typedef struct tagTEXTMETRICA /* id 313 */ *PTEXTMETRICA;
typedef struct tagTEXTMETRICA /* id 313 */ *LPTEXTMETRICA;
struct tagTEXTMETRICW { /* size 60 id 314 */
  LONG tmHeight; /* bitsize 32, bitpos 0 */
  LONG tmAscent; /* bitsize 32, bitpos 32 */
  LONG tmDescent; /* bitsize 32, bitpos 64 */
  LONG tmInternalLeading; /* bitsize 32, bitpos 96 */
  LONG tmExternalLeading; /* bitsize 32, bitpos 128 */
  LONG tmAveCharWidth; /* bitsize 32, bitpos 160 */
  LONG tmMaxCharWidth; /* bitsize 32, bitpos 192 */
  LONG tmWeight; /* bitsize 32, bitpos 224 */
  LONG tmOverhang; /* bitsize 32, bitpos 256 */
  LONG tmDigitizedAspectX; /* bitsize 32, bitpos 288 */
  LONG tmDigitizedAspectY; /* bitsize 32, bitpos 320 */
  WCHAR tmFirstChar; /* bitsize 16, bitpos 352 */
  WCHAR tmLastChar; /* bitsize 16, bitpos 368 */
  WCHAR tmDefaultChar; /* bitsize 16, bitpos 384 */
  WCHAR tmBreakChar; /* bitsize 16, bitpos 400 */
  BYTE tmItalic; /* bitsize 8, bitpos 416 */
  BYTE tmUnderlined; /* bitsize 8, bitpos 424 */
  BYTE tmStruckOut; /* bitsize 8, bitpos 432 */
  BYTE tmPitchAndFamily; /* bitsize 8, bitpos 440 */
  BYTE tmCharSet; /* bitsize 8, bitpos 448 */
};
typedef struct tagTEXTMETRICW /* id 314 */ TEXTMETRICW;
typedef struct tagTEXTMETRICW /* id 314 */ *PTEXTMETRICW;
typedef struct tagTEXTMETRICW /* id 314 */ *LPTEXTMETRICW;
struct _RGNDATAHEADER { /* size 32 id 315 */
  DWORD dwSize; /* bitsize 32, bitpos 0 */
  DWORD iType; /* bitsize 32, bitpos 32 */
  DWORD nCount; /* bitsize 32, bitpos 64 */
  DWORD nRgnSize; /* bitsize 32, bitpos 96 */
  RECT rcBound; /* bitsize 128, bitpos 128 */
};
typedef struct _RGNDATAHEADER /* id 315 */ RGNDATAHEADER;
struct _RGNDATA { /* size 36 id 316 */
  RGNDATAHEADER rdh; /* bitsize 256, bitpos 0 */
  char Buffer[1]:uint32; /* bitsize 8, bitpos 256 */
};
typedef struct _RGNDATA /* id 316 */ RGNDATA;
typedef struct _RGNDATA /* id 316 */ *PRGNDATA;
typedef struct _RGNDATA /* id 316 */ *LPRGNDATA;
struct tagGCP_RESULTSA { /* size 36 id 317 */
  DWORD lStructSize; /* bitsize 32, bitpos 0 */
  LPSTR lpOutString; /* bitsize 32, bitpos 32 */
  UINT *lpOrder; /* bitsize 32, bitpos 64 */
  INT *lpDx; /* bitsize 32, bitpos 96 */
  INT *lpCaretPos; /* bitsize 32, bitpos 128 */
  LPSTR lpClass; /* bitsize 32, bitpos 160 */
  LPWSTR lpGlyphs; /* bitsize 32, bitpos 192 */
  UINT nGlyphs; /* bitsize 32, bitpos 224 */
  UINT nMaxFit; /* bitsize 32, bitpos 256 */
};
typedef struct tagGCP_RESULTSA /* id 317 */ GCP_RESULTSA;
typedef struct tagGCP_RESULTSA /* id 317 */ *LPGCP_RESULTSA;
struct tagGCP_RESULTSW { /* size 36 id 318 */
  DWORD lStructSize; /* bitsize 32, bitpos 0 */
  LPWSTR lpOutString; /* bitsize 32, bitpos 32 */
  UINT *lpOrder; /* bitsize 32, bitpos 64 */
  INT *lpDx; /* bitsize 32, bitpos 96 */
  INT *lpCaretPos; /* bitsize 32, bitpos 128 */
  LPWSTR lpClass; /* bitsize 32, bitpos 160 */
  LPWSTR lpGlyphs; /* bitsize 32, bitpos 192 */
  UINT nGlyphs; /* bitsize 32, bitpos 224 */
  UINT nMaxFit; /* bitsize 32, bitpos 256 */
};
typedef struct tagGCP_RESULTSW /* id 318 */ GCP_RESULTSW;
typedef struct tagGCP_RESULTSW /* id 318 */ *LPGCP_RESULTSW;
struct _GLYPHMETRICS { /* size 20 id 319 */
  UINT gmBlackBoxX; /* bitsize 32, bitpos 0 */
  UINT gmBlackBoxY; /* bitsize 32, bitpos 32 */
  POINT gmptGlyphOrigin; /* bitsize 64, bitpos 64 */
  short int gmCellIncX; /* bitsize 16, bitpos 128 */
  short int gmCellIncY; /* bitsize 16, bitpos 144 */
};
typedef struct _GLYPHMETRICS /* id 319 */ GLYPHMETRICS;
typedef struct _GLYPHMETRICS /* id 319 */ *LPGLYPHMETRICS;
struct tagKERNINGPAIR { /* size 8 id 320 */
  WORD wFirst; /* bitsize 16, bitpos 0 */
  WORD wSecond; /* bitsize 16, bitpos 16 */
  int iKernAmount; /* bitsize 32, bitpos 32 */
};
typedef struct tagKERNINGPAIR /* id 320 */ KERNINGPAIR;
typedef struct tagKERNINGPAIR /* id 320 */ *LPKERNINGPAIR;
struct _FIXED { /* size 4 id 321 */
  WORD fract; /* bitsize 16, bitpos 0 */
  short int value; /* bitsize 16, bitpos 16 */
};
typedef struct _FIXED /* id 321 */ FIXED;
struct _MAT2 { /* size 16 id 322 */
  FIXED eM11; /* bitsize 32, bitpos 0 */
  FIXED eM12; /* bitsize 32, bitpos 32 */
  FIXED eM21; /* bitsize 32, bitpos 64 */
  FIXED eM22; /* bitsize 32, bitpos 96 */
};
typedef struct _MAT2 /* id 322 */ MAT2;
typedef struct _MAT2 /* id 322 */ *LPMAT2;
struct _OUTLINETEXTMETRICA { /* size 212 id 323 */
  UINT otmSize; /* bitsize 32, bitpos 0 */
  TEXTMETRICA otmTextMetrics; /* bitsize 448, bitpos 32 */
  BYTE otmFiller; /* bitsize 8, bitpos 480 */
  PANOSE otmPanoseNumber; /* bitsize 80, bitpos 488 */
  UINT otmfsSelection; /* bitsize 32, bitpos 576 */
  UINT otmfsType; /* bitsize 32, bitpos 608 */
  int otmsCharSlopeRise; /* bitsize 32, bitpos 640 */
  int otmsCharSlopeRun; /* bitsize 32, bitpos 672 */
  int otmItalicAngle; /* bitsize 32, bitpos 704 */
  UINT otmEMSquare; /* bitsize 32, bitpos 736 */
  int otmAscent; /* bitsize 32, bitpos 768 */
  int otmDescent; /* bitsize 32, bitpos 800 */
  UINT otmLineGap; /* bitsize 32, bitpos 832 */
  UINT otmsCapEmHeight; /* bitsize 32, bitpos 864 */
  UINT otmsXHeight; /* bitsize 32, bitpos 896 */
  RECT otmrcFontBox; /* bitsize 128, bitpos 928 */
  int otmMacAscent; /* bitsize 32, bitpos 1056 */
  int otmMacDescent; /* bitsize 32, bitpos 1088 */
  UINT otmMacLineGap; /* bitsize 32, bitpos 1120 */
  UINT otmusMinimumPPEM; /* bitsize 32, bitpos 1152 */
  POINT otmptSubscriptSize; /* bitsize 64, bitpos 1184 */
  POINT otmptSubscriptOffset; /* bitsize 64, bitpos 1248 */
  POINT otmptSuperscriptSize; /* bitsize 64, bitpos 1312 */
  POINT otmptSuperscriptOffset; /* bitsize 64, bitpos 1376 */
  UINT otmsStrikeoutSize; /* bitsize 32, bitpos 1440 */
  int otmsStrikeoutPosition; /* bitsize 32, bitpos 1472 */
  int otmsUnderscoreSize; /* bitsize 32, bitpos 1504 */
  int otmsUnderscorePosition; /* bitsize 32, bitpos 1536 */
  PSTR otmpFamilyName; /* bitsize 32, bitpos 1568 */
  PSTR otmpFaceName; /* bitsize 32, bitpos 1600 */
  PSTR otmpStyleName; /* bitsize 32, bitpos 1632 */
  PSTR otmpFullName; /* bitsize 32, bitpos 1664 */
};
typedef struct _OUTLINETEXTMETRICA /* id 323 */ OUTLINETEXTMETRICA;
typedef struct _OUTLINETEXTMETRICA /* id 323 */ *POUTLINETEXTMETRICA;
typedef struct _OUTLINETEXTMETRICA /* id 323 */ *LPOUTLINETEXTMETRICA;
struct _OUTLINETEXTMETRICW { /* size 216 id 324 */
  UINT otmSize; /* bitsize 32, bitpos 0 */
  TEXTMETRICW otmTextMetrics; /* bitsize 480, bitpos 32 */
  BYTE otmFiller; /* bitsize 8, bitpos 512 */
  PANOSE otmPanoseNumber; /* bitsize 80, bitpos 520 */
  UINT otmfsSelection; /* bitsize 32, bitpos 608 */
  UINT otmfsType; /* bitsize 32, bitpos 640 */
  int otmsCharSlopeRise; /* bitsize 32, bitpos 672 */
  int otmsCharSlopeRun; /* bitsize 32, bitpos 704 */
  int otmItalicAngle; /* bitsize 32, bitpos 736 */
  UINT otmEMSquare; /* bitsize 32, bitpos 768 */
  int otmAscent; /* bitsize 32, bitpos 800 */
  int otmDescent; /* bitsize 32, bitpos 832 */
  UINT otmLineGap; /* bitsize 32, bitpos 864 */
  UINT otmsCapEmHeight; /* bitsize 32, bitpos 896 */
  UINT otmsXHeight; /* bitsize 32, bitpos 928 */
  RECT otmrcFontBox; /* bitsize 128, bitpos 960 */
  int otmMacAscent; /* bitsize 32, bitpos 1088 */
  int otmMacDescent; /* bitsize 32, bitpos 1120 */
  UINT otmMacLineGap; /* bitsize 32, bitpos 1152 */
  UINT otmusMinimumPPEM; /* bitsize 32, bitpos 1184 */
  POINT otmptSubscriptSize; /* bitsize 64, bitpos 1216 */
  POINT otmptSubscriptOffset; /* bitsize 64, bitpos 1280 */
  POINT otmptSuperscriptSize; /* bitsize 64, bitpos 1344 */
  POINT otmptSuperscriptOffset; /* bitsize 64, bitpos 1408 */
  UINT otmsStrikeoutSize; /* bitsize 32, bitpos 1472 */
  int otmsStrikeoutPosition; /* bitsize 32, bitpos 1504 */
  int otmsUnderscoreSize; /* bitsize 32, bitpos 1536 */
  int otmsUnderscorePosition; /* bitsize 32, bitpos 1568 */
  PSTR otmpFamilyName; /* bitsize 32, bitpos 1600 */
  PSTR otmpFaceName; /* bitsize 32, bitpos 1632 */
  PSTR otmpStyleName; /* bitsize 32, bitpos 1664 */
  PSTR otmpFullName; /* bitsize 32, bitpos 1696 */
};
typedef struct _OUTLINETEXTMETRICW /* id 324 */ OUTLINETEXTMETRICW;
typedef struct _OUTLINETEXTMETRICW /* id 324 */ *POUTLINETEXTMETRICW;
typedef struct _OUTLINETEXTMETRICW /* id 324 */ *LPOUTLINETEXTMETRICW;
struct _RASTERIZER_STATUS { /* size 6 id 325 */
  short int nSize; /* bitsize 16, bitpos 0 */
  short int wFlags; /* bitsize 16, bitpos 16 */
  short int nLanguageID; /* bitsize 16, bitpos 32 */
};
typedef struct _RASTERIZER_STATUS /* id 325 */ RASTERIZER_STATUS;
typedef struct _RASTERIZER_STATUS /* id 325 */ *LPRASTERIZER_STATUS;
struct _POLYTEXTA { /* size 40 id 326 */
  int x; /* bitsize 32, bitpos 0 */
  int y; /* bitsize 32, bitpos 32 */
  UINT n; /* bitsize 32, bitpos 64 */
  LPCSTR lpstr; /* bitsize 32, bitpos 96 */
  UINT uiFlags; /* bitsize 32, bitpos 128 */
  RECT rcl; /* bitsize 128, bitpos 160 */
  int *pdx; /* bitsize 32, bitpos 288 */
};
typedef struct _POLYTEXTA /* id 326 */ POLYTEXTA;
typedef struct _POLYTEXTA /* id 326 */ *PPOLYTEXTA;
typedef struct _POLYTEXTA /* id 326 */ *LPPOLYTEXTA;
struct _POLYTEXTW { /* size 40 id 327 */
  int x; /* bitsize 32, bitpos 0 */
  int y; /* bitsize 32, bitpos 32 */
  UINT n; /* bitsize 32, bitpos 64 */
  LPCWSTR lpstr; /* bitsize 32, bitpos 96 */
  UINT uiFlags; /* bitsize 32, bitpos 128 */
  RECT rcl; /* bitsize 128, bitpos 160 */
  int *pdx; /* bitsize 32, bitpos 288 */
};
typedef struct _POLYTEXTW /* id 327 */ POLYTEXTW;
typedef struct _POLYTEXTW /* id 327 */ *PPOLYTEXTW;
typedef struct _POLYTEXTW /* id 327 */ *LPPOLYTEXTW;
struct tagPIXELFORMATDESCRIPTOR { /* size 40 id 328 */
  WORD nSize; /* bitsize 16, bitpos 0 */
  WORD nVersion; /* bitsize 16, bitpos 16 */
  DWORD dwFlags; /* bitsize 32, bitpos 32 */
  BYTE iPixelType; /* bitsize 8, bitpos 64 */
  BYTE cColorBits; /* bitsize 8, bitpos 72 */
  BYTE cRedBits; /* bitsize 8, bitpos 80 */
  BYTE cRedShift; /* bitsize 8, bitpos 88 */
  BYTE cGreenBits; /* bitsize 8, bitpos 96 */
  BYTE cGreenShift; /* bitsize 8, bitpos 104 */
  BYTE cBlueBits; /* bitsize 8, bitpos 112 */
  BYTE cBlueShift; /* bitsize 8, bitpos 120 */
  BYTE cAlphaBits; /* bitsize 8, bitpos 128 */
  BYTE cAlphaShift; /* bitsize 8, bitpos 136 */
  BYTE cAccumBits; /* bitsize 8, bitpos 144 */
  BYTE cAccumRedBits; /* bitsize 8, bitpos 152 */
  BYTE cAccumGreenBits; /* bitsize 8, bitpos 160 */
  BYTE cAccumBlueBits; /* bitsize 8, bitpos 168 */
  BYTE cAccumAlphaBits; /* bitsize 8, bitpos 176 */
  BYTE cDepthBits; /* bitsize 8, bitpos 184 */
  BYTE cStencilBits; /* bitsize 8, bitpos 192 */
  BYTE cAuxBuffers; /* bitsize 8, bitpos 200 */
  BYTE iLayerType; /* bitsize 8, bitpos 208 */
  BYTE bReserved; /* bitsize 8, bitpos 216 */
  DWORD dwLayerMask; /* bitsize 32, bitpos 224 */
  DWORD dwVisibleMask; /* bitsize 32, bitpos 256 */
  DWORD dwDamageMask; /* bitsize 32, bitpos 288 */
};
typedef struct tagPIXELFORMATDESCRIPTOR /* id 328 */ PIXELFORMATDESCRIPTOR;
typedef struct tagPIXELFORMATDESCRIPTOR /* id 328 */ *PPIXELFORMATDESCRIPTOR;
typedef struct tagPIXELFORMATDESCRIPTOR /* id 328 */ *LPPIXELFORMATDESCRIPTOR;
struct tagMETAFILEPICT { /* size 16 id 329 */
  LONG mm; /* bitsize 32, bitpos 0 */
  LONG xExt; /* bitsize 32, bitpos 32 */
  LONG yExt; /* bitsize 32, bitpos 64 */
  HMETAFILE hMF; /* bitsize 32, bitpos 96 */
};
typedef struct tagMETAFILEPICT /* id 329 */ METAFILEPICT;
typedef struct tagMETAFILEPICT /* id 329 */ *LPMETAFILEPICT;
struct tagLOCALESIGNATURE { /* size 32 id 330 */
  DWORD lsUsb[4]:uint32; /* bitsize 128, bitpos 0 */
  DWORD lsCsbDefault[2]:uint32; /* bitsize 64, bitpos 128 */
  DWORD lsCsbSupported[2]:uint32; /* bitsize 64, bitpos 192 */
};
typedef struct tagLOCALESIGNATURE /* id 330 */ LOCALESIGNATURE;
typedef struct tagLOCALESIGNATURE /* id 330 */ *PLOCALESIGNATURE;
typedef struct tagLOCALESIGNATURE /* id 330 */ *LPLOCALESIGNATURE;
typedef LONG LCSTYPE;
struct tagNEWTEXTMETRICA { /* size 72 id 331 */
  LONG tmHeight; /* bitsize 32, bitpos 0 */
  LONG tmAscent; /* bitsize 32, bitpos 32 */
  LONG tmDescent; /* bitsize 32, bitpos 64 */
  LONG tmInternalLeading; /* bitsize 32, bitpos 96 */
  LONG tmExternalLeading; /* bitsize 32, bitpos 128 */
  LONG tmAveCharWidth; /* bitsize 32, bitpos 160 */
  LONG tmMaxCharWidth; /* bitsize 32, bitpos 192 */
  LONG tmWeight; /* bitsize 32, bitpos 224 */
  LONG tmOverhang; /* bitsize 32, bitpos 256 */
  LONG tmDigitizedAspectX; /* bitsize 32, bitpos 288 */
  LONG tmDigitizedAspectY; /* bitsize 32, bitpos 320 */
  BYTE tmFirstChar; /* bitsize 8, bitpos 352 */
  BYTE tmLastChar; /* bitsize 8, bitpos 360 */
  BYTE tmDefaultChar; /* bitsize 8, bitpos 368 */
  BYTE tmBreakChar; /* bitsize 8, bitpos 376 */
  BYTE tmItalic; /* bitsize 8, bitpos 384 */
  BYTE tmUnderlined; /* bitsize 8, bitpos 392 */
  BYTE tmStruckOut; /* bitsize 8, bitpos 400 */
  BYTE tmPitchAndFamily; /* bitsize 8, bitpos 408 */
  BYTE tmCharSet; /* bitsize 8, bitpos 416 */
  DWORD ntmFlags; /* bitsize 32, bitpos 448 */
  UINT ntmSizeEM; /* bitsize 32, bitpos 480 */
  UINT ntmCellHeight; /* bitsize 32, bitpos 512 */
  UINT ntmAvgWidth; /* bitsize 32, bitpos 544 */
};
typedef struct tagNEWTEXTMETRICA /* id 331 */ NEWTEXTMETRICA;
typedef struct tagNEWTEXTMETRICA /* id 331 */ *PNEWTEXTMETRICA;
typedef struct tagNEWTEXTMETRICA /* id 331 */ *LPNEWTEXTMETRICA;
struct tagNEWTEXTMETRICW { /* size 76 id 332 */
  LONG tmHeight; /* bitsize 32, bitpos 0 */
  LONG tmAscent; /* bitsize 32, bitpos 32 */
  LONG tmDescent; /* bitsize 32, bitpos 64 */
  LONG tmInternalLeading; /* bitsize 32, bitpos 96 */
  LONG tmExternalLeading; /* bitsize 32, bitpos 128 */
  LONG tmAveCharWidth; /* bitsize 32, bitpos 160 */
  LONG tmMaxCharWidth; /* bitsize 32, bitpos 192 */
  LONG tmWeight; /* bitsize 32, bitpos 224 */
  LONG tmOverhang; /* bitsize 32, bitpos 256 */
  LONG tmDigitizedAspectX; /* bitsize 32, bitpos 288 */
  LONG tmDigitizedAspectY; /* bitsize 32, bitpos 320 */
  WCHAR tmFirstChar; /* bitsize 16, bitpos 352 */
  WCHAR tmLastChar; /* bitsize 16, bitpos 368 */
  WCHAR tmDefaultChar; /* bitsize 16, bitpos 384 */
  WCHAR tmBreakChar; /* bitsize 16, bitpos 400 */
  BYTE tmItalic; /* bitsize 8, bitpos 416 */
  BYTE tmUnderlined; /* bitsize 8, bitpos 424 */
  BYTE tmStruckOut; /* bitsize 8, bitpos 432 */
  BYTE tmPitchAndFamily; /* bitsize 8, bitpos 440 */
  BYTE tmCharSet; /* bitsize 8, bitpos 448 */
  DWORD ntmFlags; /* bitsize 32, bitpos 480 */
  UINT ntmSizeEM; /* bitsize 32, bitpos 512 */
  UINT ntmCellHeight; /* bitsize 32, bitpos 544 */
  UINT ntmAvgWidth; /* bitsize 32, bitpos 576 */
};
typedef struct tagNEWTEXTMETRICW /* id 332 */ NEWTEXTMETRICW;
typedef struct tagNEWTEXTMETRICW /* id 332 */ *PNEWTEXTMETRICW;
typedef struct tagNEWTEXTMETRICW /* id 332 */ *LPNEWTEXTMETRICW;
struct tagNEWTEXTMETRICEXA { /* size 96 id 333 */
  NEWTEXTMETRICA ntmTm; /* bitsize 576, bitpos 0 */
  FONTSIGNATURE ntmFontSig; /* bitsize 192, bitpos 576 */
};
typedef struct tagNEWTEXTMETRICEXA /* id 333 */ NEWTEXTMETRICEXA;
struct tagNEWTEXTMETRICEXW { /* size 100 id 334 */
  NEWTEXTMETRICW ntmTm; /* bitsize 608, bitpos 0 */
  FONTSIGNATURE ntmFontSig; /* bitsize 192, bitpos 608 */
};
typedef struct tagNEWTEXTMETRICEXW /* id 334 */ NEWTEXTMETRICEXW;
struct tagPELARRAY { /* size 20 id 335 */
  LONG paXCount; /* bitsize 32, bitpos 0 */
  LONG paYCount; /* bitsize 32, bitpos 32 */
  LONG paXExt; /* bitsize 32, bitpos 64 */
  LONG paYExt; /* bitsize 32, bitpos 96 */
  BYTE paRGBs; /* bitsize 8, bitpos 128 */
};
typedef struct tagPELARRAY /* id 335 */ PELARRAY;
typedef struct tagPELARRAY /* id 335 */ *PPELARRAY;
typedef struct tagPELARRAY /* id 335 */ *LPPELARRAY;
struct tagENUMLOGFONTA { /* size 156 id 336 */
  LOGFONTA elfLogFont; /* bitsize 480, bitpos 0 */
  BYTE elfFullName[64]:uint32; /* bitsize 512, bitpos 480 */
  BYTE elfStyle[32]:uint32; /* bitsize 256, bitpos 992 */
};
typedef struct tagENUMLOGFONTA /* id 336 */ ENUMLOGFONTA;
typedef struct tagENUMLOGFONTA /* id 336 */ *LPENUMLOGFONTA;
struct tagENUMLOGFONTW { /* size 284 id 337 */
  LOGFONTW elfLogFont; /* bitsize 736, bitpos 0 */
  WCHAR elfFullName[64]:uint32; /* bitsize 1024, bitpos 736 */
  WCHAR elfStyle[32]:uint32; /* bitsize 512, bitpos 1760 */
};
typedef struct tagENUMLOGFONTW /* id 337 */ ENUMLOGFONTW;
typedef struct tagENUMLOGFONTW /* id 337 */ *LPENUMLOGFONTW;
struct tagENUMLOGFONTEXA { /* size 188 id 338 */
  LOGFONTA elfLogFont; /* bitsize 480, bitpos 0 */
  BYTE elfFullName[64]:uint32; /* bitsize 512, bitpos 480 */
  BYTE elfStyle[32]:uint32; /* bitsize 256, bitpos 992 */
  BYTE elfScript[32]:uint32; /* bitsize 256, bitpos 1248 */
};
typedef struct tagENUMLOGFONTEXA /* id 338 */ ENUMLOGFONTEXA;
typedef struct tagENUMLOGFONTEXA /* id 338 */ *LPENUMLOGFONTEXA;
struct tagENUMLOGFONTEXW { /* size 348 id 339 */
  LOGFONTW elfLogFont; /* bitsize 736, bitpos 0 */
  WCHAR elfFullName[64]:uint32; /* bitsize 1024, bitpos 736 */
  WCHAR elfStyle[32]:uint32; /* bitsize 512, bitpos 1760 */
  WCHAR elfScript[32]:uint32; /* bitsize 512, bitpos 2272 */
};
typedef struct tagENUMLOGFONTEXW /* id 339 */ ENUMLOGFONTEXW;
typedef struct tagENUMLOGFONTEXW /* id 339 */ *LPENUMLOGFONTEXW;
struct tagPOINTFX { /* size 8 id 340 */
  FIXED x; /* bitsize 32, bitpos 0 */
  FIXED y; /* bitsize 32, bitpos 32 */
};
typedef struct tagPOINTFX /* id 340 */ POINTFX;
typedef struct tagPOINTFX /* id 340 */ *LPPOINTFX;
struct tagTTPOLYCURVE { /* size 12 id 341 */
  WORD wType; /* bitsize 16, bitpos 0 */
  WORD cpfx; /* bitsize 16, bitpos 16 */
  POINTFX apfx[1]:uint32; /* bitsize 64, bitpos 32 */
};
typedef struct tagTTPOLYCURVE /* id 341 */ TTPOLYCURVE;
typedef struct tagTTPOLYCURVE /* id 341 */ *LPTTPOLYCURVE;
struct tagTTPOLYGONHEADER { /* size 16 id 342 */
  DWORD cb; /* bitsize 32, bitpos 0 */
  DWORD dwType; /* bitsize 32, bitpos 32 */
  POINTFX pfxStart; /* bitsize 64, bitpos 64 */
};
typedef struct tagTTPOLYGONHEADER /* id 342 */ TTPOLYGONHEADER;
typedef struct tagTTPOLYGONHEADER /* id 342 */ *LPTTPOLYGONHEADER;
struct _POINTFLOAT { /* size 8 id 343 */
  FLOAT x; /* bitsize 32, bitpos 0 */
  FLOAT y; /* bitsize 32, bitpos 32 */
};
typedef struct _POINTFLOAT /* id 343 */ POINTFLOAT;
typedef struct _POINTFLOAT /* id 343 */ *PPOINTFLOAT;
struct _GLYPHMETRICSFLOAT { /* size 24 id 344 */
  FLOAT gmfBlackBoxX; /* bitsize 32, bitpos 0 */
  FLOAT gmfBlackBoxY; /* bitsize 32, bitpos 32 */
  POINTFLOAT gmfptGlyphOrigin; /* bitsize 64, bitpos 64 */
  FLOAT gmfCellIncX; /* bitsize 32, bitpos 128 */
  FLOAT gmfCellIncY; /* bitsize 32, bitpos 160 */
};
typedef struct _GLYPHMETRICSFLOAT /* id 344 */ GLYPHMETRICSFLOAT;
typedef struct _GLYPHMETRICSFLOAT /* id 344 */ *PGLYPHMETRICSFLOAT;
typedef struct _GLYPHMETRICSFLOAT /* id 344 */ *LPGLYPHMETRICSFLOAT;
struct tagLAYERPLANEDESCRIPTOR { /* size 32 id 345 */
  WORD nSize; /* bitsize 16, bitpos 0 */
  WORD nVersion; /* bitsize 16, bitpos 16 */
  DWORD dwFlags; /* bitsize 32, bitpos 32 */
  BYTE iPixelType; /* bitsize 8, bitpos 64 */
  BYTE cColorBits; /* bitsize 8, bitpos 72 */
  BYTE cRedBits; /* bitsize 8, bitpos 80 */
  BYTE cRedShift; /* bitsize 8, bitpos 88 */
  BYTE cGreenBits; /* bitsize 8, bitpos 96 */
  BYTE cGreenShift; /* bitsize 8, bitpos 104 */
  BYTE cBlueBits; /* bitsize 8, bitpos 112 */
  BYTE cBlueShift; /* bitsize 8, bitpos 120 */
  BYTE cAlphaBits; /* bitsize 8, bitpos 128 */
  BYTE cAlphaShift; /* bitsize 8, bitpos 136 */
  BYTE cAccumBits; /* bitsize 8, bitpos 144 */
  BYTE cAccumRedBits; /* bitsize 8, bitpos 152 */
  BYTE cAccumGreenBits; /* bitsize 8, bitpos 160 */
  BYTE cAccumBlueBits; /* bitsize 8, bitpos 168 */
  BYTE cAccumAlphaBits; /* bitsize 8, bitpos 176 */
  BYTE cDepthBits; /* bitsize 8, bitpos 184 */
  BYTE cStencilBits; /* bitsize 8, bitpos 192 */
  BYTE cAuxBuffers; /* bitsize 8, bitpos 200 */
  BYTE iLayerPlane; /* bitsize 8, bitpos 208 */
  BYTE bReserved; /* bitsize 8, bitpos 216 */
  COLORREF crTransparent; /* bitsize 32, bitpos 224 */
};
typedef struct tagLAYERPLANEDESCRIPTOR /* id 345 */ LAYERPLANEDESCRIPTOR;
typedef struct tagLAYERPLANEDESCRIPTOR /* id 345 */ *PLAYERPLANEDESCRIPTOR;
typedef struct tagLAYERPLANEDESCRIPTOR /* id 345 */ *LPLAYERPLANEDESCRIPTOR;
struct _BLENDFUNCTION { /* size 4 id 346 */
  BYTE BlendOp; /* bitsize 8, bitpos 0 */
  BYTE BlendFlags; /* bitsize 8, bitpos 8 */
  BYTE SourceConstantAlpha; /* bitsize 8, bitpos 16 */
  BYTE AlphaFormat; /* bitsize 8, bitpos 24 */
};
typedef struct _BLENDFUNCTION /* id 346 */ BLENDFUNCTION;
typedef struct _BLENDFUNCTION /* id 346 */ *PBLENDFUNCTION;
typedef struct _BLENDFUNCTION /* id 346 */ *LPBLENDFUNCTION;
struct _DESIGNVECTOR { /* size 72 id 347 */
  DWORD dvReserved; /* bitsize 32, bitpos 0 */
  DWORD dvNumAxes; /* bitsize 32, bitpos 32 */
  LONG dvValues[16]:uint32; /* bitsize 512, bitpos 64 */
};
typedef struct _DESIGNVECTOR /* id 347 */ DESIGNVECTOR;
typedef struct _DESIGNVECTOR /* id 347 */ *PDESIGNVECTOR;
typedef struct _DESIGNVECTOR /* id 347 */ *LPDESIGNVECTOR;
typedef USHORT COLOR16;
struct _TRIVERTEX { /* size 16 id 348 */
  LONG x; /* bitsize 32, bitpos 0 */
  LONG y; /* bitsize 32, bitpos 32 */
  COLOR16 Red; /* bitsize 16, bitpos 64 */
  COLOR16 Green; /* bitsize 16, bitpos 80 */
  COLOR16 Blue; /* bitsize 16, bitpos 96 */
  COLOR16 Alpha; /* bitsize 16, bitpos 112 */
};
typedef struct _TRIVERTEX /* id 348 */ TRIVERTEX;
typedef struct _TRIVERTEX /* id 348 */ *PTRIVERTEX;
typedef struct _TRIVERTEX /* id 348 */ *LPTRIVERTEX;
struct _GRADIENT_TRIANGLE { /* size 12 id 349 */
  ULONG Vertex1; /* bitsize 32, bitpos 0 */
  ULONG Vertex2; /* bitsize 32, bitpos 32 */
  ULONG Vertex3; /* bitsize 32, bitpos 64 */
};
typedef struct _GRADIENT_TRIANGLE /* id 349 */ GRADIENT_TRIANGLE;
typedef struct _GRADIENT_TRIANGLE /* id 349 */ *PGRADIENT_TRIANGLE;
typedef struct _GRADIENT_TRIANGLE /* id 349 */ *LPGRADIENT_TRIANGLE;
struct _GRADIENT_RECT { /* size 8 id 350 */
  ULONG UpperLeft; /* bitsize 32, bitpos 0 */
  ULONG LowerRight; /* bitsize 32, bitpos 32 */
};
typedef struct _GRADIENT_RECT /* id 350 */ GRADIENT_RECT;
typedef struct _GRADIENT_RECT /* id 350 */ *PGRADIENT_RECT;
typedef struct _GRADIENT_RECT /* id 350 */ *LPGRADIENT_RECT;
struct _DISPLAY_DEVICEA { /* size 424 id 351 */
  DWORD cb; /* bitsize 32, bitpos 0 */
  CHAR DeviceName[32]:uint32; /* bitsize 256, bitpos 32 */
  CHAR DeviceString[128]:uint32; /* bitsize 1024, bitpos 288 */
  DWORD StateFlags; /* bitsize 32, bitpos 1312 */
  CHAR DeviceID[128]:uint32; /* bitsize 1024, bitpos 1344 */
  CHAR DeviceKey[128]:uint32; /* bitsize 1024, bitpos 2368 */
};
typedef struct _DISPLAY_DEVICEA /* id 351 */ DISPLAY_DEVICEA;
typedef struct _DISPLAY_DEVICEA /* id 351 */ *PDISPLAY_DEVICEA;
typedef struct _DISPLAY_DEVICEA /* id 351 */ *LPDISPLAY_DEVICEA;
struct _DISPLAY_DEVICEW { /* size 840 id 352 */
  DWORD cb; /* bitsize 32, bitpos 0 */
  WCHAR DeviceName[32]:uint32; /* bitsize 512, bitpos 32 */
  WCHAR DeviceString[128]:uint32; /* bitsize 2048, bitpos 544 */
  DWORD StateFlags; /* bitsize 32, bitpos 2592 */
  WCHAR DeviceID[128]:uint32; /* bitsize 2048, bitpos 2624 */
  WCHAR DeviceKey[128]:uint32; /* bitsize 2048, bitpos 4672 */
};
typedef struct _DISPLAY_DEVICEW /* id 352 */ DISPLAY_DEVICEW;
typedef struct _DISPLAY_DEVICEW /* id 352 */ *PDISPLAY_DEVICEW;
typedef struct _DISPLAY_DEVICEW /* id 352 */ *LPDISPLAY_DEVICEW;
typedef BOOL (*ABORTPROC) (/* unknown */);
typedef int (*MFENUMPROC) (/* unknown */);
typedef int (*ENHMFENUMPROC) (/* unknown */);
typedef int (*OLDFONTENUMPROCA) (/* unknown */);
typedef int (*OLDFONTENUMPROCW) (/* unknown */);
typedef OLDFONTENUMPROCA FONTENUMPROCA;
typedef OLDFONTENUMPROCW FONTENUMPROCW;
typedef int (*ICMENUMPROCA) (/* unknown */);
typedef int (*ICMENUMPROCW) (/* unknown */);
typedef void (*GOBJENUMPROC) (/* unknown */);
typedef void (*LINEDDAPROC) (/* unknown */);
typedef UINT (*LPFNDEVMODE) (/* unknown */);
typedef DWORD (*LPFNDEVCAPS) (/* unknown */);
typedef BYTE BCHAR;
typedef DOCINFOA DOCINFO;
typedef DOCINFOA *LPDOCINFO;
typedef LOGFONTA LOGFONT;
typedef LOGFONTA *PLOGFONT;
typedef LOGFONTA *LPLOGFONT;
typedef TEXTMETRICA TEXTMETRIC;
typedef TEXTMETRICA *PTEXTMETRIC;
typedef TEXTMETRICA *LPTEXTMETRIC;
typedef DEVMODEA DEVMODE;
typedef DEVMODEA *PDEVMODE;
typedef DEVMODEA *LPDEVMODE;
typedef EXTLOGFONTA EXTLOGFONT;
typedef EXTLOGFONTA *PEXTLOGFONT;
typedef EXTLOGFONTA *LPEXTLOGFONT;
typedef GCP_RESULTSA GCP_RESULTS;
typedef GCP_RESULTSA *LPGCP_RESULTS;
typedef OUTLINETEXTMETRICA OUTLINETEXTMETRIC;
typedef OUTLINETEXTMETRICA *POUTLINETEXTMETRIC;
typedef OUTLINETEXTMETRICA *LPOUTLINETEXTMETRIC;
typedef POLYTEXTA POLYTEXT;
typedef POLYTEXTA *PPOLYTEXT;
typedef POLYTEXTA *LPPOLYTEXT;
typedef LOGCOLORSPACEA LOGCOLORSPACE;
typedef LOGCOLORSPACEA *LPLOGCOLORSPACE;
typedef NEWTEXTMETRICA NEWTEXTMETRIC;
typedef NEWTEXTMETRICA *PNEWTEXTMETRIC;
typedef NEWTEXTMETRICA *LPNEWTEXTMETRIC;
typedef NEWTEXTMETRICEXA NEWTEXTMETRICEX;
typedef ENUMLOGFONTA ENUMLOGFONT;
typedef ENUMLOGFONTA *LPENUMLOGFONT;
typedef ENUMLOGFONTEXA ENUMLOGFONTEX;
typedef ENUMLOGFONTEXA *LPENUMLOGFONTEX;
typedef DISPLAY_DEVICEA DISPLAY_DEVICE;
typedef DISPLAY_DEVICEA *PDISPLAY_DEVICE;
typedef DISPLAY_DEVICEA *LPDISPLAY_DEVICE;
 /usr/lib/gcc/i686-pc-cygwin/3.4.4/include/stdarg.h:
typedef __builtin_va_list __gnuc_va_list;
typedef __gnuc_va_list va_list;
 mmsystem.c:
typedef DWORD MCIERROR;
typedef UINT MCIDEVICEID;
typedef UINT (*YIELDPROC) (/* unknown */);
typedef UINT MMVERSION;
typedef UINT MMRESULT;
struct mmtime_tag { /* size 12 id 353 */
  UINT wType; /* bitsize 32, bitpos 0 */
  union %anon354 { /* size 8 */
    DWORD ms; /* bitsize 32, bitpos 0 */
    DWORD sample; /* bitsize 32, bitpos 0 */
    DWORD cb; /* bitsize 32, bitpos 0 */
    DWORD ticks; /* bitsize 32, bitpos 0 */
    struct %anon355 { /* size 8 */
      BYTE hour; /* bitsize 8, bitpos 0 */
      BYTE min; /* bitsize 8, bitpos 8 */
      BYTE sec; /* bitsize 8, bitpos 16 */
      BYTE frame; /* bitsize 8, bitpos 24 */
      BYTE fps; /* bitsize 8, bitpos 32 */
      BYTE dummy; /* bitsize 8, bitpos 40 */
      BYTE pad[2]:uint32; /* bitsize 16, bitpos 48 */
    } smpte; /* bitsize 64, bitpos 0 */
    struct %anon356 { /* size 4 */
      DWORD songptrpos; /* bitsize 32, bitpos 0 */
    } midi; /* bitsize 32, bitpos 0 */
  } u; /* bitsize 64, bitpos 32 */
};
typedef struct mmtime_tag /* id 353 */ MMTIME;
typedef struct mmtime_tag /* id 353 */ *PMMTIME;
typedef struct mmtime_tag /* id 353 */ *LPMMTIME;
struct HDRVR__ { /* size 4 id 357 */
  int i; /* bitsize 32, bitpos 0 */
};
typedef struct HDRVR__ /* id 357 */ *HDRVR;
struct tagDRVCONFIGINFO { /* size 12 id 358 */
  DWORD dwDCISize; /* bitsize 32, bitpos 0 */
  LPCWSTR lpszDCISectionName; /* bitsize 32, bitpos 32 */
  LPCWSTR lpszDCIAliasName; /* bitsize 32, bitpos 64 */
};
typedef struct tagDRVCONFIGINFO /* id 358 */ DRVCONFIGINFO;
typedef struct tagDRVCONFIGINFO /* id 358 */ *PDRVCONFIGINFO;
typedef struct tagDRVCONFIGINFO /* id 358 */ *LPDRVCONFIGINFO;
struct DRVCONFIGINFOEX { /* size 16 id 359 */
  DWORD dwDCISize; /* bitsize 32, bitpos 0 */
  LPCWSTR lpszDCISectionName; /* bitsize 32, bitpos 32 */
  LPCWSTR lpszDCIAliasName; /* bitsize 32, bitpos 64 */
  DWORD dnDevNode; /* bitsize 32, bitpos 96 */
};
typedef struct DRVCONFIGINFOEX /* id 359 */ DRVCONFIGINFOEX;
typedef struct DRVCONFIGINFOEX /* id 359 */ *PDRVCONFIGINFOEX;
typedef struct DRVCONFIGINFOEX /* id 359 */ *LPDRVCONFIGINFOEX;
typedef LRESULT (*DRIVERPROC) (/* unknown */);
typedef void (DRVCALLBACK) (/* unknown */);
typedef DRVCALLBACK *LPDRVCALLBACK;
typedef DRVCALLBACK *PDRVCALLBACK;
struct HWAVE__ { /* size 4 id 360 */
  int i; /* bitsize 32, bitpos 0 */
};
typedef struct HWAVE__ /* id 360 */ *HWAVE;
struct HWAVEIN__ { /* size 4 id 361 */
  int i; /* bitsize 32, bitpos 0 */
};
typedef struct HWAVEIN__ /* id 361 */ *HWAVEIN;
struct HWAVEOUT__ { /* size 4 id 362 */
  int i; /* bitsize 32, bitpos 0 */
};
typedef struct HWAVEOUT__ /* id 362 */ *HWAVEOUT;
typedef HWAVEIN *LPHWAVEIN;
typedef HWAVEOUT *LPHWAVEOUT;
typedef DRVCALLBACK WAVECALLBACK;
typedef WAVECALLBACK *LPWAVECALLBACK;
struct wavehdr_tag { /* size 32 id 363 */
  LPSTR lpData; /* bitsize 32, bitpos 0 */
  DWORD dwBufferLength; /* bitsize 32, bitpos 32 */
  DWORD dwBytesRecorded; /* bitsize 32, bitpos 64 */
  DWORD dwUser; /* bitsize 32, bitpos 96 */
  DWORD dwFlags; /* bitsize 32, bitpos 128 */
  DWORD dwLoops; /* bitsize 32, bitpos 160 */
  struct wavehdr_tag /* id 363 */ *lpNext; /* bitsize 32, bitpos 192 */
  DWORD reserved; /* bitsize 32, bitpos 224 */
};
typedef struct wavehdr_tag /* id 363 */ WAVEHDR;
typedef struct wavehdr_tag /* id 363 */ *PWAVEHDR;
typedef struct wavehdr_tag /* id 363 */ *LPWAVEHDR;
struct tagWAVEOUTCAPSA { /* size 52 id 364 */
  WORD wMid; /* bitsize 16, bitpos 0 */
  WORD wPid; /* bitsize 16, bitpos 16 */
  MMVERSION vDriverVersion; /* bitsize 32, bitpos 32 */
  CHAR szPname[32]:uint32; /* bitsize 256, bitpos 64 */
  DWORD dwFormats; /* bitsize 32, bitpos 320 */
  WORD wChannels; /* bitsize 16, bitpos 352 */
  WORD wReserved1; /* bitsize 16, bitpos 368 */
  DWORD dwSupport; /* bitsize 32, bitpos 384 */
};
typedef struct tagWAVEOUTCAPSA /* id 364 */ WAVEOUTCAPSA;
typedef struct tagWAVEOUTCAPSA /* id 364 */ *PWAVEOUTCAPSA;
typedef struct tagWAVEOUTCAPSA /* id 364 */ *LPWAVEOUTCAPSA;
struct tagWAVEOUTCAPSW { /* size 84 id 365 */
  WORD wMid; /* bitsize 16, bitpos 0 */
  WORD wPid; /* bitsize 16, bitpos 16 */
  MMVERSION vDriverVersion; /* bitsize 32, bitpos 32 */
  WCHAR szPname[32]:uint32; /* bitsize 512, bitpos 64 */
  DWORD dwFormats; /* bitsize 32, bitpos 576 */
  WORD wChannels; /* bitsize 16, bitpos 608 */
  WORD wReserved1; /* bitsize 16, bitpos 624 */
  DWORD dwSupport; /* bitsize 32, bitpos 640 */
};
typedef struct tagWAVEOUTCAPSW /* id 365 */ WAVEOUTCAPSW;
typedef struct tagWAVEOUTCAPSW /* id 365 */ *PWAVEOUTCAPSW;
typedef struct tagWAVEOUTCAPSW /* id 365 */ *LPWAVEOUTCAPSW;
struct tagWAVEINCAPSA { /* size 48 id 366 */
  WORD wMid; /* bitsize 16, bitpos 0 */
  WORD wPid; /* bitsize 16, bitpos 16 */
  MMVERSION vDriverVersion; /* bitsize 32, bitpos 32 */
  CHAR szPname[32]:uint32; /* bitsize 256, bitpos 64 */
  DWORD dwFormats; /* bitsize 32, bitpos 320 */
  WORD wChannels; /* bitsize 16, bitpos 352 */
  WORD wReserved1; /* bitsize 16, bitpos 368 */
};
typedef struct tagWAVEINCAPSA /* id 366 */ WAVEINCAPSA;
typedef struct tagWAVEINCAPSA /* id 366 */ *PWAVEINCAPSA;
typedef struct tagWAVEINCAPSA /* id 366 */ *LPWAVEINCAPSA;
struct tagWAVEINCAPSW { /* size 80 id 367 */
  WORD wMid; /* bitsize 16, bitpos 0 */
  WORD wPid; /* bitsize 16, bitpos 16 */
  MMVERSION vDriverVersion; /* bitsize 32, bitpos 32 */
  WCHAR szPname[32]:uint32; /* bitsize 512, bitpos 64 */
  DWORD dwFormats; /* bitsize 32, bitpos 576 */
  WORD wChannels; /* bitsize 16, bitpos 608 */
  WORD wReserved1; /* bitsize 16, bitpos 624 */
};
typedef struct tagWAVEINCAPSW /* id 367 */ WAVEINCAPSW;
typedef struct tagWAVEINCAPSW /* id 367 */ *PWAVEINCAPSW;
typedef struct tagWAVEINCAPSW /* id 367 */ *LPWAVEINCAPSW;
struct waveformat_tag { /* size 14 id 368 */
  WORD wFormatTag; /* bitsize 16, bitpos 0 */
  WORD nChannels; /* bitsize 16, bitpos 16 */
  DWORD nSamplesPerSec; /* bitsize 32, bitpos 32 */
  DWORD nAvgBytesPerSec; /* bitsize 32, bitpos 64 */
  WORD nBlockAlign; /* bitsize 16, bitpos 96 */
};
typedef struct waveformat_tag /* id 368 */ WAVEFORMAT;
typedef struct waveformat_tag /* id 368 */ *PWAVEFORMAT;
typedef struct waveformat_tag /* id 368 */ *LPWAVEFORMAT;
struct pcmwaveformat_tag { /* size 16 id 369 */
  WAVEFORMAT wf; /* bitsize 112, bitpos 0 */
  WORD wBitsPerSample; /* bitsize 16, bitpos 112 */
};
typedef struct pcmwaveformat_tag /* id 369 */ PCMWAVEFORMAT;
typedef struct pcmwaveformat_tag /* id 369 */ *PPCMWAVEFORMAT;
typedef struct pcmwaveformat_tag /* id 369 */ *LPPCMWAVEFORMAT;
struct tWAVEFORMATEX { /* size 18 id 370 */
  WORD wFormatTag; /* bitsize 16, bitpos 0 */
  WORD nChannels; /* bitsize 16, bitpos 16 */
  DWORD nSamplesPerSec; /* bitsize 32, bitpos 32 */
  DWORD nAvgBytesPerSec; /* bitsize 32, bitpos 64 */
  WORD nBlockAlign; /* bitsize 16, bitpos 96 */
  WORD wBitsPerSample; /* bitsize 16, bitpos 112 */
  WORD cbSize; /* bitsize 16, bitpos 128 */
};
typedef struct tWAVEFORMATEX /* id 370 */ WAVEFORMATEX;
typedef struct tWAVEFORMATEX /* id 370 */ *PWAVEFORMATEX;
typedef struct tWAVEFORMATEX /* id 370 */ *LPWAVEFORMATEX;
typedef WAVEFORMATEX const *LPCWAVEFORMATEX;
struct HMIDI__ { /* size 4 id 371 */
  int i; /* bitsize 32, bitpos 0 */
};
typedef struct HMIDI__ /* id 371 */ *HMIDI;
struct HMIDIIN__ { /* size 4 id 372 */
  int i; /* bitsize 32, bitpos 0 */
};
typedef struct HMIDIIN__ /* id 372 */ *HMIDIIN;
struct HMIDIOUT__ { /* size 4 id 373 */
  int i; /* bitsize 32, bitpos 0 */
};
typedef struct HMIDIOUT__ /* id 373 */ *HMIDIOUT;
struct HMIDISTRM__ { /* size 4 id 374 */
  int i; /* bitsize 32, bitpos 0 */
};
typedef struct HMIDISTRM__ /* id 374 */ *HMIDISTRM;
typedef HMIDI *LPHMIDI;
typedef HMIDIIN *LPHMIDIIN;
typedef HMIDIOUT *LPHMIDIOUT;
typedef HMIDISTRM *LPHMIDISTRM;
typedef DRVCALLBACK MIDICALLBACK;
typedef MIDICALLBACK *LPMIDICALLBACK;
typedef WORD PATCHARRAY[128]:uint32;
typedef WORD *LPPATCHARRAY;
typedef WORD KEYARRAY[128]:uint32;
typedef WORD *LPKEYARRAY;
struct tagMIDIOUTCAPSA { /* size 52 id 375 */
  WORD wMid; /* bitsize 16, bitpos 0 */
  WORD wPid; /* bitsize 16, bitpos 16 */
  MMVERSION vDriverVersion; /* bitsize 32, bitpos 32 */
  CHAR szPname[32]:uint32; /* bitsize 256, bitpos 64 */
  WORD wTechnology; /* bitsize 16, bitpos 320 */
  WORD wVoices; /* bitsize 16, bitpos 336 */
  WORD wNotes; /* bitsize 16, bitpos 352 */
  WORD wChannelMask; /* bitsize 16, bitpos 368 */
  DWORD dwSupport; /* bitsize 32, bitpos 384 */
};
typedef struct tagMIDIOUTCAPSA /* id 375 */ MIDIOUTCAPSA;
typedef struct tagMIDIOUTCAPSA /* id 375 */ *PMIDIOUTCAPSA;
typedef struct tagMIDIOUTCAPSA /* id 375 */ *LPMIDIOUTCAPSA;
struct tagMIDIOUTCAPSW { /* size 84 id 376 */
  WORD wMid; /* bitsize 16, bitpos 0 */
  WORD wPid; /* bitsize 16, bitpos 16 */
  MMVERSION vDriverVersion; /* bitsize 32, bitpos 32 */
  WCHAR szPname[32]:uint32; /* bitsize 512, bitpos 64 */
  WORD wTechnology; /* bitsize 16, bitpos 576 */
  WORD wVoices; /* bitsize 16, bitpos 592 */
  WORD wNotes; /* bitsize 16, bitpos 608 */
  WORD wChannelMask; /* bitsize 16, bitpos 624 */
  DWORD dwSupport; /* bitsize 32, bitpos 640 */
};
typedef struct tagMIDIOUTCAPSW /* id 376 */ MIDIOUTCAPSW;
typedef struct tagMIDIOUTCAPSW /* id 376 */ *PMIDIOUTCAPSW;
typedef struct tagMIDIOUTCAPSW /* id 376 */ *LPMIDIOUTCAPSW;
struct tagMIDIINCAPSA { /* size 44 id 377 */
  WORD wMid; /* bitsize 16, bitpos 0 */
  WORD wPid; /* bitsize 16, bitpos 16 */
  MMVERSION vDriverVersion; /* bitsize 32, bitpos 32 */
  CHAR szPname[32]:uint32; /* bitsize 256, bitpos 64 */
  DWORD dwSupport; /* bitsize 32, bitpos 320 */
};
typedef struct tagMIDIINCAPSA /* id 377 */ MIDIINCAPSA;
typedef struct tagMIDIINCAPSA /* id 377 */ *PMIDIINCAPSA;
typedef struct tagMIDIINCAPSA /* id 377 */ *LPMIDIINCAPSA;
struct tagMIDIINCAPSW { /* size 76 id 378 */
  WORD wMid; /* bitsize 16, bitpos 0 */
  WORD wPid; /* bitsize 16, bitpos 16 */
  MMVERSION vDriverVersion; /* bitsize 32, bitpos 32 */
  WCHAR szPname[32]:uint32; /* bitsize 512, bitpos 64 */
  DWORD dwSupport; /* bitsize 32, bitpos 576 */
};
typedef struct tagMIDIINCAPSW /* id 378 */ MIDIINCAPSW;
typedef struct tagMIDIINCAPSW /* id 378 */ *PMIDIINCAPSW;
typedef struct tagMIDIINCAPSW /* id 378 */ *NPMIDIINCAPSW;
typedef struct tagMIDIINCAPSW /* id 378 */ *LPMIDIINCAPSW;
struct midihdr_tag { /* size 64 id 379 */
  LPSTR lpData; /* bitsize 32, bitpos 0 */
  DWORD dwBufferLength; /* bitsize 32, bitpos 32 */
  DWORD dwBytesRecorded; /* bitsize 32, bitpos 64 */
  DWORD dwUser; /* bitsize 32, bitpos 96 */
  DWORD dwFlags; /* bitsize 32, bitpos 128 */
  struct midihdr_tag /* id 379 */ *lpNext; /* bitsize 32, bitpos 160 */
  DWORD reserved; /* bitsize 32, bitpos 192 */
  DWORD dwOffset; /* bitsize 32, bitpos 224 */
  DWORD dwReserved[8]:uint32; /* bitsize 256, bitpos 256 */
};
typedef struct midihdr_tag /* id 379 */ MIDIHDR;
typedef struct midihdr_tag /* id 379 */ *PMIDIHDR;
typedef struct midihdr_tag /* id 379 */ *LPMIDIHDR;
struct midievent_tag { /* size 16 id 380 */
  DWORD dwDeltaTime; /* bitsize 32, bitpos 0 */
  DWORD dwStreamID; /* bitsize 32, bitpos 32 */
  DWORD dwEvent; /* bitsize 32, bitpos 64 */
  DWORD dwParms[1]:uint32; /* bitsize 32, bitpos 96 */
};
typedef struct midievent_tag /* id 380 */ MIDIEVENT;
struct midistrmbuffver_tag { /* size 12 id 381 */
  DWORD dwVersion; /* bitsize 32, bitpos 0 */
  DWORD dwMid; /* bitsize 32, bitpos 32 */
  DWORD dwOEMVersion; /* bitsize 32, bitpos 64 */
};
typedef struct midistrmbuffver_tag /* id 381 */ MIDISTRMBUFFVER;
struct midiproptimediv_tag { /* size 8 id 382 */
  DWORD cbStruct; /* bitsize 32, bitpos 0 */
  DWORD dwTimeDiv; /* bitsize 32, bitpos 32 */
};
typedef struct midiproptimediv_tag /* id 382 */ MIDIPROPTIMEDIV;
typedef struct midiproptimediv_tag /* id 382 */ *LPMIDIPROPTIMEDIV;
struct midiproptempo_tag { /* size 8 id 383 */
  DWORD cbStruct; /* bitsize 32, bitpos 0 */
  DWORD dwTempo; /* bitsize 32, bitpos 32 */
};
typedef struct midiproptempo_tag /* id 383 */ MIDIPROPTEMPO;
typedef struct midiproptempo_tag /* id 383 */ *LPMIDIPROPTEMPO;
struct tagAUXCAPSA { /* size 48 id 384 */
  WORD wMid; /* bitsize 16, bitpos 0 */
  WORD wPid; /* bitsize 16, bitpos 16 */
  MMVERSION vDriverVersion; /* bitsize 32, bitpos 32 */
  CHAR szPname[32]:uint32; /* bitsize 256, bitpos 64 */
  WORD wTechnology; /* bitsize 16, bitpos 320 */
  WORD wReserved1; /* bitsize 16, bitpos 336 */
  DWORD dwSupport; /* bitsize 32, bitpos 352 */
};
typedef struct tagAUXCAPSA /* id 384 */ AUXCAPSA;
typedef struct tagAUXCAPSA /* id 384 */ *PAUXCAPSA;
typedef struct tagAUXCAPSA /* id 384 */ *LPAUXCAPSA;
struct tagAUXCAPSW { /* size 80 id 385 */
  WORD wMid; /* bitsize 16, bitpos 0 */
  WORD wPid; /* bitsize 16, bitpos 16 */
  MMVERSION vDriverVersion; /* bitsize 32, bitpos 32 */
  WCHAR szPname[32]:uint32; /* bitsize 512, bitpos 64 */
  WORD wTechnology; /* bitsize 16, bitpos 576 */
  WORD wReserved1; /* bitsize 16, bitpos 592 */
  DWORD dwSupport; /* bitsize 32, bitpos 608 */
};
typedef struct tagAUXCAPSW /* id 385 */ AUXCAPSW;
typedef struct tagAUXCAPSW /* id 385 */ *PAUXCAPSW;
typedef struct tagAUXCAPSW /* id 385 */ *LPAUXCAPSW;
struct HMIXEROBJ__ { /* size 4 id 386 */
  int i; /* bitsize 32, bitpos 0 */
};
typedef struct HMIXEROBJ__ /* id 386 */ *HMIXEROBJ;
typedef HMIXEROBJ *LPHMIXEROBJ;
struct HMIXER__ { /* size 4 id 387 */
  int i; /* bitsize 32, bitpos 0 */
};
typedef struct HMIXER__ /* id 387 */ *HMIXER;
typedef HMIXER *LPHMIXER;
struct tagMIXERCAPSA { /* size 48 id 388 */
  WORD wMid; /* bitsize 16, bitpos 0 */
  WORD wPid; /* bitsize 16, bitpos 16 */
  MMVERSION vDriverVersion; /* bitsize 32, bitpos 32 */
  CHAR szPname[32]:uint32; /* bitsize 256, bitpos 64 */
  DWORD fdwSupport; /* bitsize 32, bitpos 320 */
  DWORD cDestinations; /* bitsize 32, bitpos 352 */
};
typedef struct tagMIXERCAPSA /* id 388 */ MIXERCAPSA;
typedef struct tagMIXERCAPSA /* id 388 */ *PMIXERCAPSA;
typedef struct tagMIXERCAPSA /* id 388 */ *LPMIXERCAPSA;
struct tagMIXERCAPSW { /* size 80 id 389 */
  WORD wMid; /* bitsize 16, bitpos 0 */
  WORD wPid; /* bitsize 16, bitpos 16 */
  MMVERSION vDriverVersion; /* bitsize 32, bitpos 32 */
  WCHAR szPname[32]:uint32; /* bitsize 512, bitpos 64 */
  DWORD fdwSupport; /* bitsize 32, bitpos 576 */
  DWORD cDestinations; /* bitsize 32, bitpos 608 */
};
typedef struct tagMIXERCAPSW /* id 389 */ MIXERCAPSW;
typedef struct tagMIXERCAPSW /* id 389 */ *PMIXERCAPSW;
typedef struct tagMIXERCAPSW /* id 389 */ *LPMIXERCAPSW;
struct tagMIXERLINEA { /* size 168 id 390 */
  DWORD cbStruct; /* bitsize 32, bitpos 0 */
  DWORD dwDestination; /* bitsize 32, bitpos 32 */
  DWORD dwSource; /* bitsize 32, bitpos 64 */
  DWORD dwLineID; /* bitsize 32, bitpos 96 */
  DWORD fdwLine; /* bitsize 32, bitpos 128 */
  DWORD dwUser; /* bitsize 32, bitpos 160 */
  DWORD dwComponentType; /* bitsize 32, bitpos 192 */
  DWORD cChannels; /* bitsize 32, bitpos 224 */
  DWORD cConnections; /* bitsize 32, bitpos 256 */
  DWORD cControls; /* bitsize 32, bitpos 288 */
  CHAR szShortName[16]:uint32; /* bitsize 128, bitpos 320 */
  CHAR szName[64]:uint32; /* bitsize 512, bitpos 448 */
  struct %anon391 { /* size 48 */
    DWORD dwType; /* bitsize 32, bitpos 0 */
    DWORD dwDeviceID; /* bitsize 32, bitpos 32 */
    WORD wMid; /* bitsize 16, bitpos 64 */
    WORD wPid; /* bitsize 16, bitpos 80 */
    MMVERSION vDriverVersion; /* bitsize 32, bitpos 96 */
    CHAR szPname[32]:uint32; /* bitsize 256, bitpos 128 */
  } Target; /* bitsize 384, bitpos 960 */
};
typedef struct tagMIXERLINEA /* id 390 */ MIXERLINEA;
typedef struct tagMIXERLINEA /* id 390 */ *PMIXERLINEA;
typedef struct tagMIXERLINEA /* id 390 */ *LPMIXERLINEA;
struct tagMIXERLINEW { /* size 280 id 392 */
  DWORD cbStruct; /* bitsize 32, bitpos 0 */
  DWORD dwDestination; /* bitsize 32, bitpos 32 */
  DWORD dwSource; /* bitsize 32, bitpos 64 */
  DWORD dwLineID; /* bitsize 32, bitpos 96 */
  DWORD fdwLine; /* bitsize 32, bitpos 128 */
  DWORD dwUser; /* bitsize 32, bitpos 160 */
  DWORD dwComponentType; /* bitsize 32, bitpos 192 */
  DWORD cChannels; /* bitsize 32, bitpos 224 */
  DWORD cConnections; /* bitsize 32, bitpos 256 */
  DWORD cControls; /* bitsize 32, bitpos 288 */
  WCHAR szShortName[16]:uint32; /* bitsize 256, bitpos 320 */
  WCHAR szName[64]:uint32; /* bitsize 1024, bitpos 576 */
  struct %anon393 { /* size 80 */
    DWORD dwType; /* bitsize 32, bitpos 0 */
    DWORD dwDeviceID; /* bitsize 32, bitpos 32 */
    WORD wMid; /* bitsize 16, bitpos 64 */
    WORD wPid; /* bitsize 16, bitpos 80 */
    MMVERSION vDriverVersion; /* bitsize 32, bitpos 96 */
    WCHAR szPname[32]:uint32; /* bitsize 512, bitpos 128 */
  } Target; /* bitsize 640, bitpos 1600 */
};
typedef struct tagMIXERLINEW /* id 392 */ MIXERLINEW;
typedef struct tagMIXERLINEW /* id 392 */ *PMIXERLINEW;
typedef struct tagMIXERLINEW /* id 392 */ *LPMIXERLINEW;
struct tagMIXERCONTROLA { /* size 148 id 394 */
  DWORD cbStruct; /* bitsize 32, bitpos 0 */
  DWORD dwControlID; /* bitsize 32, bitpos 32 */
  DWORD dwControlType; /* bitsize 32, bitpos 64 */
  DWORD fdwControl; /* bitsize 32, bitpos 96 */
  DWORD cMultipleItems; /* bitsize 32, bitpos 128 */
  CHAR szShortName[16]:uint32; /* bitsize 128, bitpos 160 */
  CHAR szName[64]:uint32; /* bitsize 512, bitpos 288 */
  union %anon395 { /* size 24 */
    struct %anon396 { /* size 8 */
      LONG lMinimum; /* bitsize 32, bitpos 0 */
      LONG lMaximum; /* bitsize 32, bitpos 32 */
    }; /* bitsize 64, bitpos 0 */
    struct %anon397 { /* size 8 */
      DWORD dwMinimum; /* bitsize 32, bitpos 0 */
      DWORD dwMaximum; /* bitsize 32, bitpos 32 */
    }; /* bitsize 64, bitpos 0 */
    DWORD dwReserved[6]:uint32; /* bitsize 192, bitpos 0 */
  } Bounds; /* bitsize 192, bitpos 800 */
  union %anon398 { /* size 24 */
    DWORD cSteps; /* bitsize 32, bitpos 0 */
    DWORD cbCustomData; /* bitsize 32, bitpos 0 */
    DWORD dwReserved[6]:uint32; /* bitsize 192, bitpos 0 */
  } Metrics; /* bitsize 192, bitpos 992 */
};
typedef struct tagMIXERCONTROLA /* id 394 */ MIXERCONTROLA;
typedef struct tagMIXERCONTROLA /* id 394 */ *PMIXERCONTROLA;
typedef struct tagMIXERCONTROLA /* id 394 */ *LPMIXERCONTROLA;
struct tagMIXERCONTROLW { /* size 228 id 399 */
  DWORD cbStruct; /* bitsize 32, bitpos 0 */
  DWORD dwControlID; /* bitsize 32, bitpos 32 */
  DWORD dwControlType; /* bitsize 32, bitpos 64 */
  DWORD fdwControl; /* bitsize 32, bitpos 96 */
  DWORD cMultipleItems; /* bitsize 32, bitpos 128 */
  WCHAR szShortName[16]:uint32; /* bitsize 256, bitpos 160 */
  WCHAR szName[64]:uint32; /* bitsize 1024, bitpos 416 */
  union %anon395 { /* size 24 */
    struct %anon396 { /* size 8 */
      LONG lMinimum; /* bitsize 32, bitpos 0 */
      LONG lMaximum; /* bitsize 32, bitpos 32 */
    }; /* bitsize 64, bitpos 0 */
    struct %anon397 { /* size 8 */
      DWORD dwMinimum; /* bitsize 32, bitpos 0 */
      DWORD dwMaximum; /* bitsize 32, bitpos 32 */
    }; /* bitsize 64, bitpos 0 */
    DWORD dwReserved[6]:uint32; /* bitsize 192, bitpos 0 */
  } Bounds; /* bitsize 192, bitpos 1440 */
  union %anon398 { /* size 24 */
    DWORD cSteps; /* bitsize 32, bitpos 0 */
    DWORD cbCustomData; /* bitsize 32, bitpos 0 */
    DWORD dwReserved[6]:uint32; /* bitsize 192, bitpos 0 */
  } Metrics; /* bitsize 192, bitpos 1632 */
};
typedef struct tagMIXERCONTROLW /* id 399 */ MIXERCONTROLW;
typedef struct tagMIXERCONTROLW /* id 399 */ *PMIXERCONTROLW;
typedef struct tagMIXERCONTROLW /* id 399 */ *LPMIXERCONTROLW;
struct tagMIXERLINECONTROLSA { /* size 24 id 400 */
  DWORD cbStruct; /* bitsize 32, bitpos 0 */
  DWORD dwLineID; /* bitsize 32, bitpos 32 */
  union %anon401 { /* size 4 */
    DWORD dwControlID; /* bitsize 32, bitpos 0 */
    DWORD dwControlType; /* bitsize 32, bitpos 0 */
  }; /* bitsize 32, bitpos 64 */
  DWORD cControls; /* bitsize 32, bitpos 96 */
  DWORD cbmxctrl; /* bitsize 32, bitpos 128 */
  LPMIXERCONTROLA pamxctrl; /* bitsize 32, bitpos 160 */
};
typedef struct tagMIXERLINECONTROLSA /* id 400 */ MIXERLINECONTROLSA;
typedef struct tagMIXERLINECONTROLSA /* id 400 */ *PMIXERLINECONTROLSA;
typedef struct tagMIXERLINECONTROLSA /* id 400 */ *LPMIXERLINECONTROLSA;
struct tagMIXERLINECONTROLSW { /* size 24 id 402 */
  DWORD cbStruct; /* bitsize 32, bitpos 0 */
  DWORD dwLineID; /* bitsize 32, bitpos 32 */
  union %anon401 { /* size 4 */
    DWORD dwControlID; /* bitsize 32, bitpos 0 */
    DWORD dwControlType; /* bitsize 32, bitpos 0 */
  }; /* bitsize 32, bitpos 64 */
  DWORD cControls; /* bitsize 32, bitpos 96 */
  DWORD cbmxctrl; /* bitsize 32, bitpos 128 */
  LPMIXERCONTROLW pamxctrl; /* bitsize 32, bitpos 160 */
};
typedef struct tagMIXERLINECONTROLSW /* id 402 */ MIXERLINECONTROLSW;
typedef struct tagMIXERLINECONTROLSW /* id 402 */ *PMIXERLINECONTROLSW;
typedef struct tagMIXERLINECONTROLSW /* id 402 */ *LPMIXERLINECONTROLSW;
struct tMIXERCONTROLDETAILS { /* size 24 id 403 */
  DWORD cbStruct; /* bitsize 32, bitpos 0 */
  DWORD dwControlID; /* bitsize 32, bitpos 32 */
  DWORD cChannels; /* bitsize 32, bitpos 64 */
  union %anon404 { /* size 4 */
    HWND hwndOwner; /* bitsize 32, bitpos 0 */
    DWORD cMultipleItems; /* bitsize 32, bitpos 0 */
  }; /* bitsize 32, bitpos 96 */
  DWORD cbDetails; /* bitsize 32, bitpos 128 */
  PVOID paDetails; /* bitsize 32, bitpos 160 */
};
typedef struct tMIXERCONTROLDETAILS /* id 403 */ MIXERCONTROLDETAILS;
typedef struct tMIXERCONTROLDETAILS /* id 403 */ *PMIXERCONTROLDETAILS;
typedef struct tMIXERCONTROLDETAILS /* id 403 */ *LPMIXERCONTROLDETAILS;
struct tagMIXERCONTROLDETAILS_LISTTEXTA { /* size 72 id 405 */
  DWORD dwParam1; /* bitsize 32, bitpos 0 */
  DWORD dwParam2; /* bitsize 32, bitpos 32 */
  CHAR szName[64]:uint32; /* bitsize 512, bitpos 64 */
};
typedef struct tagMIXERCONTROLDETAILS_LISTTEXTA /* id 405 */ MIXERCONTROLDETAILS_LISTTEXTA;
typedef struct tagMIXERCONTROLDETAILS_LISTTEXTA /* id 405 */ *PMIXERCONTROLDETAILS_LISTTEXTA;
typedef struct tagMIXERCONTROLDETAILS_LISTTEXTA /* id 405 */ *LPMIXERCONTROLDETAILS_LISTTEXTA;
struct tagMIXERCONTROLDETAILS_LISTTEXTW { /* size 136 id 406 */
  DWORD dwParam1; /* bitsize 32, bitpos 0 */
  DWORD dwParam2; /* bitsize 32, bitpos 32 */
  WCHAR szName[64]:uint32; /* bitsize 1024, bitpos 64 */
};
typedef struct tagMIXERCONTROLDETAILS_LISTTEXTW /* id 406 */ MIXERCONTROLDETAILS_LISTTEXTW;
typedef struct tagMIXERCONTROLDETAILS_LISTTEXTW /* id 406 */ *PMIXERCONTROLDETAILS_LISTTEXTW;
typedef struct tagMIXERCONTROLDETAILS_LISTTEXTW /* id 406 */ *LPMIXERCONTROLDETAILS_LISTTEXTW;
struct tMIXERCONTROLDETAILS_BOOLEAN { /* size 4 id 407 */
  LONG fValue; /* bitsize 32, bitpos 0 */
};
typedef struct tMIXERCONTROLDETAILS_BOOLEAN /* id 407 */ MIXERCONTROLDETAILS_BOOLEAN;
typedef struct tMIXERCONTROLDETAILS_BOOLEAN /* id 407 */ *PMIXERCONTROLDETAILS_BOOLEAN;
typedef struct tMIXERCONTROLDETAILS_BOOLEAN /* id 407 */ *LPMIXERCONTROLDETAILS_BOOLEAN;
struct tMIXERCONTROLDETAILS_SIGNED { /* size 4 id 408 */
  LONG lValue; /* bitsize 32, bitpos 0 */
};
typedef struct tMIXERCONTROLDETAILS_SIGNED /* id 408 */ MIXERCONTROLDETAILS_SIGNED;
typedef struct tMIXERCONTROLDETAILS_SIGNED /* id 408 */ *PMIXERCONTROLDETAILS_SIGNED;
typedef struct tMIXERCONTROLDETAILS_SIGNED /* id 408 */ *LPMIXERCONTROLDETAILS_SIGNED;
struct tMIXERCONTROLDETAILS_UNSIGNED { /* size 4 id 409 */
  DWORD dwValue; /* bitsize 32, bitpos 0 */
};
typedef struct tMIXERCONTROLDETAILS_UNSIGNED /* id 409 */ MIXERCONTROLDETAILS_UNSIGNED;
typedef struct tMIXERCONTROLDETAILS_UNSIGNED /* id 409 */ *PMIXERCONTROLDETAILS_UNSIGNED;
typedef struct tMIXERCONTROLDETAILS_UNSIGNED /* id 409 */ *LPMIXERCONTROLDETAILS_UNSIGNED;
typedef void (TIMECALLBACK) (/* unknown */);
typedef TIMECALLBACK *LPTIMECALLBACK;
struct timecaps_tag { /* size 8 id 410 */
  UINT wPeriodMin; /* bitsize 32, bitpos 0 */
  UINT wPeriodMax; /* bitsize 32, bitpos 32 */
};
typedef struct timecaps_tag /* id 410 */ TIMECAPS;
typedef struct timecaps_tag /* id 410 */ *PTIMECAPS;
typedef struct timecaps_tag /* id 410 */ *LPTIMECAPS;
struct tagJOYCAPSA { /* size 404 id 411 */
  WORD wMid; /* bitsize 16, bitpos 0 */
  WORD wPid; /* bitsize 16, bitpos 16 */
  CHAR szPname[32]:uint32; /* bitsize 256, bitpos 32 */
  UINT wXmin; /* bitsize 32, bitpos 288 */
  UINT wXmax; /* bitsize 32, bitpos 320 */
  UINT wYmin; /* bitsize 32, bitpos 352 */
  UINT wYmax; /* bitsize 32, bitpos 384 */
  UINT wZmin; /* bitsize 32, bitpos 416 */
  UINT wZmax; /* bitsize 32, bitpos 448 */
  UINT wNumButtons; /* bitsize 32, bitpos 480 */
  UINT wPeriodMin; /* bitsize 32, bitpos 512 */
  UINT wPeriodMax; /* bitsize 32, bitpos 544 */
  UINT wRmin; /* bitsize 32, bitpos 576 */
  UINT wRmax; /* bitsize 32, bitpos 608 */
  UINT wUmin; /* bitsize 32, bitpos 640 */
  UINT wUmax; /* bitsize 32, bitpos 672 */
  UINT wVmin; /* bitsize 32, bitpos 704 */
  UINT wVmax; /* bitsize 32, bitpos 736 */
  UINT wCaps; /* bitsize 32, bitpos 768 */
  UINT wMaxAxes; /* bitsize 32, bitpos 800 */
  UINT wNumAxes; /* bitsize 32, bitpos 832 */
  UINT wMaxButtons; /* bitsize 32, bitpos 864 */
  CHAR szRegKey[32]:uint32; /* bitsize 256, bitpos 896 */
  CHAR szOEMVxD[260]:uint32; /* bitsize 2080, bitpos 1152 */
};
typedef struct tagJOYCAPSA /* id 411 */ JOYCAPSA;
typedef struct tagJOYCAPSA /* id 411 */ *PJOYCAPSA;
typedef struct tagJOYCAPSA /* id 411 */ *LPJOYCAPSA;
struct tagJOYCAPSW { /* size 728 id 412 */
  WORD wMid; /* bitsize 16, bitpos 0 */
  WORD wPid; /* bitsize 16, bitpos 16 */
  WCHAR szPname[32]:uint32; /* bitsize 512, bitpos 32 */
  UINT wXmin; /* bitsize 32, bitpos 544 */
  UINT wXmax; /* bitsize 32, bitpos 576 */
  UINT wYmin; /* bitsize 32, bitpos 608 */
  UINT wYmax; /* bitsize 32, bitpos 640 */
  UINT wZmin; /* bitsize 32, bitpos 672 */
  UINT wZmax; /* bitsize 32, bitpos 704 */
  UINT wNumButtons; /* bitsize 32, bitpos 736 */
  UINT wPeriodMin; /* bitsize 32, bitpos 768 */
  UINT wPeriodMax; /* bitsize 32, bitpos 800 */
  UINT wRmin; /* bitsize 32, bitpos 832 */
  UINT wRmax; /* bitsize 32, bitpos 864 */
  UINT wUmin; /* bitsize 32, bitpos 896 */
  UINT wUmax; /* bitsize 32, bitpos 928 */
  UINT wVmin; /* bitsize 32, bitpos 960 */
  UINT wVmax; /* bitsize 32, bitpos 992 */
  UINT wCaps; /* bitsize 32, bitpos 1024 */
  UINT wMaxAxes; /* bitsize 32, bitpos 1056 */
  UINT wNumAxes; /* bitsize 32, bitpos 1088 */
  UINT wMaxButtons; /* bitsize 32, bitpos 1120 */
  WCHAR szRegKey[32]:uint32; /* bitsize 512, bitpos 1152 */
  WCHAR szOEMVxD[260]:uint32; /* bitsize 4160, bitpos 1664 */
};
typedef struct tagJOYCAPSW /* id 412 */ JOYCAPSW;
typedef struct tagJOYCAPSW /* id 412 */ *PJOYCAPSW;
typedef struct tagJOYCAPSW /* id 412 */ *LPJOYCAPSW;
struct joyinfo_tag { /* size 16 id 413 */
  UINT wXpos; /* bitsize 32, bitpos 0 */
  UINT wYpos; /* bitsize 32, bitpos 32 */
  UINT wZpos; /* bitsize 32, bitpos 64 */
  UINT wButtons; /* bitsize 32, bitpos 96 */
};
typedef struct joyinfo_tag /* id 413 */ JOYINFO;
typedef struct joyinfo_tag /* id 413 */ *PJOYINFO;
typedef struct joyinfo_tag /* id 413 */ *LPJOYINFO;
struct joyinfoex_tag { /* size 52 id 414 */
  DWORD dwSize; /* bitsize 32, bitpos 0 */
  DWORD dwFlags; /* bitsize 32, bitpos 32 */
  DWORD dwXpos; /* bitsize 32, bitpos 64 */
  DWORD dwYpos; /* bitsize 32, bitpos 96 */
  DWORD dwZpos; /* bitsize 32, bitpos 128 */
  DWORD dwRpos; /* bitsize 32, bitpos 160 */
  DWORD dwUpos; /* bitsize 32, bitpos 192 */
  DWORD dwVpos; /* bitsize 32, bitpos 224 */
  DWORD dwButtons; /* bitsize 32, bitpos 256 */
  DWORD dwButtonNumber; /* bitsize 32, bitpos 288 */
  DWORD dwPOV; /* bitsize 32, bitpos 320 */
  DWORD dwReserved1; /* bitsize 32, bitpos 352 */
  DWORD dwReserved2; /* bitsize 32, bitpos 384 */
};
typedef struct joyinfoex_tag /* id 414 */ JOYINFOEX;
typedef struct joyinfoex_tag /* id 414 */ *PJOYINFOEX;
typedef struct joyinfoex_tag /* id 414 */ *LPJOYINFOEX;
typedef DWORD FOURCC;
typedef char *HPSTR;
struct HMMIO__ { /* size 4 id 415 */
  int i; /* bitsize 32, bitpos 0 */
};
typedef struct HMMIO__ /* id 415 */ *HMMIO;
typedef LRESULT (MMIOPROC) (/* unknown */);
typedef MMIOPROC *LPMMIOPROC;
struct _MMIOINFO { /* size 72 id 416 */
  DWORD dwFlags; /* bitsize 32, bitpos 0 */
  FOURCC fccIOProc; /* bitsize 32, bitpos 32 */
  LPMMIOPROC pIOProc; /* bitsize 32, bitpos 64 */
  UINT wErrorRet; /* bitsize 32, bitpos 96 */
  HTASK htask; /* bitsize 32, bitpos 128 */
  LONG cchBuffer; /* bitsize 32, bitpos 160 */
  HPSTR pchBuffer; /* bitsize 32, bitpos 192 */
  HPSTR pchNext; /* bitsize 32, bitpos 224 */
  HPSTR pchEndRead; /* bitsize 32, bitpos 256 */
  HPSTR pchEndWrite; /* bitsize 32, bitpos 288 */
  LONG lBufOffset; /* bitsize 32, bitpos 320 */
  LONG lDiskOffset; /* bitsize 32, bitpos 352 */
  DWORD adwInfo[3]:uint32; /* bitsize 96, bitpos 384 */
  DWORD dwReserved1; /* bitsize 32, bitpos 480 */
  DWORD dwReserved2; /* bitsize 32, bitpos 512 */
  HMMIO hmmio; /* bitsize 32, bitpos 544 */
};
typedef struct _MMIOINFO /* id 416 */ MMIOINFO;
typedef struct _MMIOINFO /* id 416 */ *PMMIOINFO;
typedef struct _MMIOINFO /* id 416 */ *LPMMIOINFO;
typedef MMIOINFO const *LPCMMIOINFO;
struct _MMCKINFO { /* size 20 id 417 */
  FOURCC ckid; /* bitsize 32, bitpos 0 */
  DWORD cksize; /* bitsize 32, bitpos 32 */
  FOURCC fccType; /* bitsize 32, bitpos 64 */
  DWORD dwDataOffset; /* bitsize 32, bitpos 96 */
  DWORD dwFlags; /* bitsize 32, bitpos 128 */
};
typedef struct _MMCKINFO /* id 417 */ MMCKINFO;
typedef struct _MMCKINFO /* id 417 */ *PMMCKINFO;
typedef struct _MMCKINFO /* id 417 */ *LPMMCKINFO;
typedef MMCKINFO const *LPCMMCKINFO;
struct tagMCI_GENERIC_PARMS { /* size 4 id 418 */
  DWORD dwCallback; /* bitsize 32, bitpos 0 */
};
typedef struct tagMCI_GENERIC_PARMS /* id 418 */ MCI_GENERIC_PARMS;
typedef struct tagMCI_GENERIC_PARMS /* id 418 */ *PMCI_GENERIC_PARMS;
typedef struct tagMCI_GENERIC_PARMS /* id 418 */ *LPMCI_GENERIC_PARMS;
struct tagMCI_OPEN_PARMSA { /* size 20 id 419 */
  DWORD dwCallback; /* bitsize 32, bitpos 0 */
  MCIDEVICEID wDeviceID; /* bitsize 32, bitpos 32 */
  LPCSTR lpstrDeviceType; /* bitsize 32, bitpos 64 */
  LPCSTR lpstrElementName; /* bitsize 32, bitpos 96 */
  LPCSTR lpstrAlias; /* bitsize 32, bitpos 128 */
};
typedef struct tagMCI_OPEN_PARMSA /* id 419 */ MCI_OPEN_PARMSA;
typedef struct tagMCI_OPEN_PARMSA /* id 419 */ *PMCI_OPEN_PARMSA;
typedef struct tagMCI_OPEN_PARMSA /* id 419 */ *LPMCI_OPEN_PARMSA;
struct tagMCI_OPEN_PARMSW { /* size 20 id 420 */
  DWORD dwCallback; /* bitsize 32, bitpos 0 */
  MCIDEVICEID wDeviceID; /* bitsize 32, bitpos 32 */
  LPCWSTR lpstrDeviceType; /* bitsize 32, bitpos 64 */
  LPCWSTR lpstrElementName; /* bitsize 32, bitpos 96 */
  LPCWSTR lpstrAlias; /* bitsize 32, bitpos 128 */
};
typedef struct tagMCI_OPEN_PARMSW /* id 420 */ MCI_OPEN_PARMSW;
typedef struct tagMCI_OPEN_PARMSW /* id 420 */ *PMCI_OPEN_PARMSW;
typedef struct tagMCI_OPEN_PARMSW /* id 420 */ *LPMCI_OPEN_PARMSW;
struct tagMCI_PLAY_PARMS { /* size 12 id 421 */
  DWORD dwCallback; /* bitsize 32, bitpos 0 */
  DWORD dwFrom; /* bitsize 32, bitpos 32 */
  DWORD dwTo; /* bitsize 32, bitpos 64 */
};
typedef struct tagMCI_PLAY_PARMS /* id 421 */ MCI_PLAY_PARMS;
typedef struct tagMCI_PLAY_PARMS /* id 421 */ *PMCI_PLAY_PARMS;
typedef struct tagMCI_PLAY_PARMS /* id 421 */ *LPMCI_PLAY_PARMS;
struct tagMCI_SEEK_PARMS { /* size 8 id 422 */
  DWORD dwCallback; /* bitsize 32, bitpos 0 */
  DWORD dwTo; /* bitsize 32, bitpos 32 */
};
typedef struct tagMCI_SEEK_PARMS /* id 422 */ MCI_SEEK_PARMS;
typedef struct tagMCI_SEEK_PARMS /* id 422 */ *PMCI_SEEK_PARMS;
typedef struct tagMCI_SEEK_PARMS /* id 422 */ *LPMCI_SEEK_PARMS;
struct tagMCI_STATUS_PARMS { /* size 16 id 423 */
  DWORD dwCallback; /* bitsize 32, bitpos 0 */
  DWORD dwReturn; /* bitsize 32, bitpos 32 */
  DWORD dwItem; /* bitsize 32, bitpos 64 */
  DWORD dwTrack; /* bitsize 32, bitpos 96 */
};
typedef struct tagMCI_STATUS_PARMS /* id 423 */ MCI_STATUS_PARMS;
typedef struct tagMCI_STATUS_PARMS /* id 423 */ *PMCI_STATUS_PARMS;
typedef struct tagMCI_STATUS_PARMS /* id 423 */ *LPMCI_STATUS_PARMS;
struct tagMCI_INFO_PARMSA { /* size 12 id 424 */
  DWORD dwCallback; /* bitsize 32, bitpos 0 */
  LPSTR lpstrReturn; /* bitsize 32, bitpos 32 */
  DWORD dwRetSize; /* bitsize 32, bitpos 64 */
};
typedef struct tagMCI_INFO_PARMSA /* id 424 */ MCI_INFO_PARMSA;
typedef struct tagMCI_INFO_PARMSA /* id 424 */ *LPMCI_INFO_PARMSA;
struct tagMCI_INFO_PARMSW { /* size 12 id 425 */
  DWORD dwCallback; /* bitsize 32, bitpos 0 */
  LPWSTR lpstrReturn; /* bitsize 32, bitpos 32 */
  DWORD dwRetSize; /* bitsize 32, bitpos 64 */
};
typedef struct tagMCI_INFO_PARMSW /* id 425 */ MCI_INFO_PARMSW;
typedef struct tagMCI_INFO_PARMSW /* id 425 */ *LPMCI_INFO_PARMSW;
struct tagMCI_GETDEVCAPS_PARMS { /* size 12 id 426 */
  DWORD dwCallback; /* bitsize 32, bitpos 0 */
  DWORD dwReturn; /* bitsize 32, bitpos 32 */
  DWORD dwItem; /* bitsize 32, bitpos 64 */
};
typedef struct tagMCI_GETDEVCAPS_PARMS /* id 426 */ MCI_GETDEVCAPS_PARMS;
typedef struct tagMCI_GETDEVCAPS_PARMS /* id 426 */ *PMCI_GETDEVCAPS_PARMS;
typedef struct tagMCI_GETDEVCAPS_PARMS /* id 426 */ *LPMCI_GETDEVCAPS_PARMS;
struct tagMCI_SYSINFO_PARMSA { /* size 20 id 427 */
  DWORD dwCallback; /* bitsize 32, bitpos 0 */
  LPSTR lpstrReturn; /* bitsize 32, bitpos 32 */
  DWORD dwRetSize; /* bitsize 32, bitpos 64 */
  DWORD dwNumber; /* bitsize 32, bitpos 96 */
  UINT wDeviceType; /* bitsize 32, bitpos 128 */
};
typedef struct tagMCI_SYSINFO_PARMSA /* id 427 */ MCI_SYSINFO_PARMSA;
typedef struct tagMCI_SYSINFO_PARMSA /* id 427 */ *PMCI_SYSINFO_PARMSA;
typedef struct tagMCI_SYSINFO_PARMSA /* id 427 */ *LPMCI_SYSINFO_PARMSA;
struct tagMCI_SYSINFO_PARMSW { /* size 20 id 428 */
  DWORD dwCallback; /* bitsize 32, bitpos 0 */
  LPWSTR lpstrReturn; /* bitsize 32, bitpos 32 */
  DWORD dwRetSize; /* bitsize 32, bitpos 64 */
  DWORD dwNumber; /* bitsize 32, bitpos 96 */
  UINT wDeviceType; /* bitsize 32, bitpos 128 */
};
typedef struct tagMCI_SYSINFO_PARMSW /* id 428 */ MCI_SYSINFO_PARMSW;
typedef struct tagMCI_SYSINFO_PARMSW /* id 428 */ *PMCI_SYSINFO_PARMSW;
typedef struct tagMCI_SYSINFO_PARMSW /* id 428 */ *LPMCI_SYSINFO_PARMSW;
struct tagMCI_SET_PARMS { /* size 12 id 429 */
  DWORD dwCallback; /* bitsize 32, bitpos 0 */
  DWORD dwTimeFormat; /* bitsize 32, bitpos 32 */
  DWORD dwAudio; /* bitsize 32, bitpos 64 */
};
typedef struct tagMCI_SET_PARMS /* id 429 */ MCI_SET_PARMS;
typedef struct tagMCI_SET_PARMS /* id 429 */ *PMCI_SET_PARMS;
typedef struct tagMCI_SET_PARMS /* id 429 */ *LPMCI_SET_PARMS;
struct tagMCI_BREAK_PARMS { /* size 12 id 430 */
  DWORD dwCallback; /* bitsize 32, bitpos 0 */
  int nVirtKey; /* bitsize 32, bitpos 32 */
  HWND hwndBreak; /* bitsize 32, bitpos 64 */
};
typedef struct tagMCI_BREAK_PARMS /* id 430 */ MCI_BREAK_PARMS;
typedef struct tagMCI_BREAK_PARMS /* id 430 */ *PMCI_BREAK_PARMS;
typedef struct tagMCI_BREAK_PARMS /* id 430 */ *LPMCI_BREAK_PARMS;
struct tagMCI_SAVE_PARMSA { /* size 8 id 431 */
  DWORD dwCallback; /* bitsize 32, bitpos 0 */
  LPCSTR lpfilename; /* bitsize 32, bitpos 32 */
};
typedef struct tagMCI_SAVE_PARMSA /* id 431 */ MCI_SAVE_PARMSA;
typedef struct tagMCI_SAVE_PARMSA /* id 431 */ *PMCI_SAVE_PARMSA;
typedef struct tagMCI_SAVE_PARMSA /* id 431 */ *LPMCI_SAVE_PARMSA;
struct tagMCI_SAVE_PARMSW { /* size 8 id 432 */
  DWORD dwCallback; /* bitsize 32, bitpos 0 */
  LPCWSTR lpfilename; /* bitsize 32, bitpos 32 */
};
typedef struct tagMCI_SAVE_PARMSW /* id 432 */ MCI_SAVE_PARMSW;
typedef struct tagMCI_SAVE_PARMSW /* id 432 */ *PMCI_SAVE_PARMSW;
typedef struct tagMCI_SAVE_PARMSW /* id 432 */ *LPMCI_SAVE_PARMSW;
struct tagMCI_LOAD_PARMSA { /* size 8 id 433 */
  DWORD dwCallback; /* bitsize 32, bitpos 0 */
  LPCSTR lpfilename; /* bitsize 32, bitpos 32 */
};
typedef struct tagMCI_LOAD_PARMSA /* id 433 */ MCI_LOAD_PARMSA;
typedef struct tagMCI_LOAD_PARMSA /* id 433 */ *PMCI_LOAD_PARMSA;
typedef struct tagMCI_LOAD_PARMSA /* id 433 */ *LPMCI_LOAD_PARMSA;
struct tagMCI_LOAD_PARMSW { /* size 8 id 434 */
  DWORD dwCallback; /* bitsize 32, bitpos 0 */
  LPCWSTR lpfilename; /* bitsize 32, bitpos 32 */
};
typedef struct tagMCI_LOAD_PARMSW /* id 434 */ MCI_LOAD_PARMSW;
typedef struct tagMCI_LOAD_PARMSW /* id 434 */ *PMCI_LOAD_PARMSW;
typedef struct tagMCI_LOAD_PARMSW /* id 434 */ *LPMCI_LOAD_PARMSW;
struct tagMCI_RECORD_PARMS { /* size 12 id 435 */
  DWORD dwCallback; /* bitsize 32, bitpos 0 */
  DWORD dwFrom; /* bitsize 32, bitpos 32 */
  DWORD dwTo; /* bitsize 32, bitpos 64 */
};
typedef struct tagMCI_RECORD_PARMS /* id 435 */ MCI_RECORD_PARMS;
typedef struct tagMCI_RECORD_PARMS /* id 435 */ *LPMCI_RECORD_PARMS;
struct tagMCI_VD_PLAY_PARMS { /* size 16 id 436 */
  DWORD dwCallback; /* bitsize 32, bitpos 0 */
  DWORD dwFrom; /* bitsize 32, bitpos 32 */
  DWORD dwTo; /* bitsize 32, bitpos 64 */
  DWORD dwSpeed; /* bitsize 32, bitpos 96 */
};
typedef struct tagMCI_VD_PLAY_PARMS /* id 436 */ MCI_VD_PLAY_PARMS;
typedef struct tagMCI_VD_PLAY_PARMS /* id 436 */ *PMCI_VD_PLAY_PARMS;
typedef struct tagMCI_VD_PLAY_PARMS /* id 436 */ *LPMCI_VD_PLAY_PARMS;
struct tagMCI_VD_STEP_PARMS { /* size 8 id 437 */
  DWORD dwCallback; /* bitsize 32, bitpos 0 */
  DWORD dwFrames; /* bitsize 32, bitpos 32 */
};
typedef struct tagMCI_VD_STEP_PARMS /* id 437 */ MCI_VD_STEP_PARMS;
typedef struct tagMCI_VD_STEP_PARMS /* id 437 */ *PMCI_VD_STEP_PARMS;
typedef struct tagMCI_VD_STEP_PARMS /* id 437 */ *LPMCI_VD_STEP_PARMS;
struct tagMCI_VD_ESCAPE_PARMSA { /* size 8 id 438 */
  DWORD dwCallback; /* bitsize 32, bitpos 0 */
  LPCSTR lpstrCommand; /* bitsize 32, bitpos 32 */
};
typedef struct tagMCI_VD_ESCAPE_PARMSA /* id 438 */ MCI_VD_ESCAPE_PARMSA;
typedef struct tagMCI_VD_ESCAPE_PARMSA /* id 438 */ *PMCI_VD_ESCAPE_PARMSA;
typedef struct tagMCI_VD_ESCAPE_PARMSA /* id 438 */ *LPMCI_VD_ESCAPE_PARMSA;
struct tagMCI_VD_ESCAPE_PARMSW { /* size 8 id 439 */
  DWORD dwCallback; /* bitsize 32, bitpos 0 */
  LPCWSTR lpstrCommand; /* bitsize 32, bitpos 32 */
};
typedef struct tagMCI_VD_ESCAPE_PARMSW /* id 439 */ MCI_VD_ESCAPE_PARMSW;
typedef struct tagMCI_VD_ESCAPE_PARMSW /* id 439 */ *PMCI_VD_ESCAPE_PARMSW;
typedef struct tagMCI_VD_ESCAPE_PARMSW /* id 439 */ *LPMCI_VD_ESCAPE_PARMSW;
struct tagMCI_WAVE_OPEN_PARMSA { /* size 24 id 440 */
  DWORD dwCallback; /* bitsize 32, bitpos 0 */
  MCIDEVICEID wDeviceID; /* bitsize 32, bitpos 32 */
  LPCSTR lpstrDeviceType; /* bitsize 32, bitpos 64 */
  LPCSTR lpstrElementName; /* bitsize 32, bitpos 96 */
  LPCSTR lpstrAlias; /* bitsize 32, bitpos 128 */
  DWORD dwBufferSeconds; /* bitsize 32, bitpos 160 */
};
typedef struct tagMCI_WAVE_OPEN_PARMSA /* id 440 */ MCI_WAVE_OPEN_PARMSA;
typedef struct tagMCI_WAVE_OPEN_PARMSA /* id 440 */ *PMCI_WAVE_OPEN_PARMSA;
typedef struct tagMCI_WAVE_OPEN_PARMSA /* id 440 */ *LPMCI_WAVE_OPEN_PARMSA;
struct tagMCI_WAVE_OPEN_PARMSW { /* size 24 id 441 */
  DWORD dwCallback; /* bitsize 32, bitpos 0 */
  MCIDEVICEID wDeviceID; /* bitsize 32, bitpos 32 */
  LPCWSTR lpstrDeviceType; /* bitsize 32, bitpos 64 */
  LPCWSTR lpstrElementName; /* bitsize 32, bitpos 96 */
  LPCWSTR lpstrAlias; /* bitsize 32, bitpos 128 */
  DWORD dwBufferSeconds; /* bitsize 32, bitpos 160 */
};
typedef struct tagMCI_WAVE_OPEN_PARMSW /* id 441 */ MCI_WAVE_OPEN_PARMSW;
typedef struct tagMCI_WAVE_OPEN_PARMSW /* id 441 */ *PMCI_WAVE_OPEN_PARMSW;
typedef struct tagMCI_WAVE_OPEN_PARMSW /* id 441 */ *LPMCI_WAVE_OPEN_PARMSW;
struct tagMCI_WAVE_DELETE_PARMS { /* size 12 id 442 */
  DWORD dwCallback; /* bitsize 32, bitpos 0 */
  DWORD dwFrom; /* bitsize 32, bitpos 32 */
  DWORD dwTo; /* bitsize 32, bitpos 64 */
};
typedef struct tagMCI_WAVE_DELETE_PARMS /* id 442 */ MCI_WAVE_DELETE_PARMS;
typedef struct tagMCI_WAVE_DELETE_PARMS /* id 442 */ *PMCI_WAVE_DELETE_PARMS;
typedef struct tagMCI_WAVE_DELETE_PARMS /* id 442 */ *LPMCI_WAVE_DELETE_PARMS;
struct tagMCI_WAVE_SET_PARMS { /* size 44 id 443 */
  DWORD dwCallback; /* bitsize 32, bitpos 0 */
  DWORD dwTimeFormat; /* bitsize 32, bitpos 32 */
  DWORD dwAudio; /* bitsize 32, bitpos 64 */
  UINT wInput; /* bitsize 32, bitpos 96 */
  UINT wOutput; /* bitsize 32, bitpos 128 */
  WORD wFormatTag; /* bitsize 16, bitpos 160 */
  WORD wReserved2; /* bitsize 16, bitpos 176 */
  WORD nChannels; /* bitsize 16, bitpos 192 */
  WORD wReserved3; /* bitsize 16, bitpos 208 */
  DWORD nSamplesPerSec; /* bitsize 32, bitpos 224 */
  DWORD nAvgBytesPerSec; /* bitsize 32, bitpos 256 */
  WORD nBlockAlign; /* bitsize 16, bitpos 288 */
  WORD wReserved4; /* bitsize 16, bitpos 304 */
  WORD wBitsPerSample; /* bitsize 16, bitpos 320 */
  WORD wReserved5; /* bitsize 16, bitpos 336 */
};
typedef struct tagMCI_WAVE_SET_PARMS /* id 443 */ MCI_WAVE_SET_PARMS;
typedef struct tagMCI_WAVE_SET_PARMS /* id 443 */ *PMCI_WAVE_SET_PARMS;
typedef struct tagMCI_WAVE_SET_PARMS /* id 443 */ *LPMCI_WAVE_SET_PARMS;
LRESULT CloseDriver (HDRVR a /* 0x8 */, LONG b /* 0xc */, LONG c /* 0x10 */)
{ /* 0x0 */
  /* file mmsystem.c line 1551 addr 0x0 */
  /* file mmsystem.c line 1551 addr 0x3 */
} /* 0x7 */
HDRVR OpenDriver (LPCWSTR a /* 0x8 */, LPCWSTR b /* 0xc */, LONG c /* 0x10 */)
{ /* 0x7 */
  /* file mmsystem.c line 1552 addr 0x7 */
  /* file mmsystem.c line 1552 addr 0xa */
} /* 0xe */
LRESULT SendDriverMessage (HDRVR a /* 0x8 */, UINT b /* 0xc */, LONG c /* 0x10 */, LONG d /* 0x14 */)
{ /* 0xe */
  /* file mmsystem.c line 1553 addr 0xe */
  /* file mmsystem.c line 1553 addr 0x11 */
} /* 0x15 */
HMODULE DrvGetModuleHandle (HDRVR a /* 0x8 */)
{ /* 0x15 */
  /* file mmsystem.c line 1554 addr 0x15 */
  /* file mmsystem.c line 1554 addr 0x18 */
} /* 0x1c */
HMODULE GetDriverModuleHandle (HDRVR a /* 0x8 */)
{ /* 0x1c */
  /* file mmsystem.c line 1555 addr 0x1c */
  /* file mmsystem.c line 1555 addr 0x1f */
} /* 0x23 */
LRESULT DefDriverProc (DWORD a /* 0x8 */, HDRVR b /* 0xc */, UINT c /* 0x10 */, LPARAM d /* 0x14 */, LPARAM e /* 0x18 */)
{ /* 0x23 */
  /* file mmsystem.c line 1556 addr 0x23 */
  /* file mmsystem.c line 1556 addr 0x26 */
} /* 0x2a */
UINT mmsystemGetVersion ()
{ /* 0x2a */
  /* file mmsystem.c line 1557 addr 0x2a */
  /* file mmsystem.c line 1557 addr 0x2d */
} /* 0x2f */
BOOL sndPlaySoundA (LPCSTR a /* 0x8 */, UINT b /* 0xc */)
{ /* 0x2f */
  /* file mmsystem.c line 1559 addr 0x2f */
  /* file mmsystem.c line 1559 addr 0x32 */
} /* 0x36 */
BOOL sndPlaySoundW (LPCWSTR a /* 0x8 */, UINT b /* 0xc */)
{ /* 0x36 */
  /* file mmsystem.c line 1560 addr 0x36 */
  /* file mmsystem.c line 1560 addr 0x39 */
} /* 0x3d */
BOOL PlaySoundA (LPCSTR a /* 0x8 */, HMODULE b /* 0xc */, DWORD c /* 0x10 */)
{ /* 0x3d */
  /* file mmsystem.c line 1561 addr 0x3d */
  /* file mmsystem.c line 1561 addr 0x40 */
} /* 0x44 */
BOOL PlaySoundW (LPCWSTR a /* 0x8 */, HMODULE b /* 0xc */, DWORD c /* 0x10 */)
{ /* 0x44 */
  /* file mmsystem.c line 1562 addr 0x44 */
  /* file mmsystem.c line 1562 addr 0x47 */
} /* 0x4b */
UINT waveOutGetNumDevs ()
{ /* 0x4b */
  /* file mmsystem.c line 1563 addr 0x4b */
  /* file mmsystem.c line 1563 addr 0x4e */
} /* 0x50 */
MMRESULT waveOutGetDevCapsA (UINT a /* 0x8 */, LPWAVEOUTCAPSA b /* 0xc */, UINT c /* 0x10 */)
{ /* 0x50 */
  /* file mmsystem.c line 1564 addr 0x50 */
  /* file mmsystem.c line 1564 addr 0x53 */
} /* 0x57 */
MMRESULT waveOutGetDevCapsW (UINT a /* 0x8 */, LPWAVEOUTCAPSW b /* 0xc */, UINT c /* 0x10 */)
{ /* 0x57 */
  /* file mmsystem.c line 1565 addr 0x57 */
  /* file mmsystem.c line 1565 addr 0x5a */
} /* 0x5e */
MMRESULT waveOutGetVolume (HWAVEOUT a /* 0x8 */, PDWORD b /* 0xc */)
{ /* 0x5e */
  /* file mmsystem.c line 1566 addr 0x5e */
  /* file mmsystem.c line 1566 addr 0x61 */
} /* 0x65 */
MMRESULT waveOutSetVolume (HWAVEOUT a /* 0x8 */, DWORD b /* 0xc */)
{ /* 0x65 */
  /* file mmsystem.c line 1567 addr 0x65 */
  /* file mmsystem.c line 1567 addr 0x68 */
} /* 0x6c */
MMRESULT waveOutGetErrorTextA (MMRESULT a /* 0x8 */, LPSTR b /* 0xc */, UINT c /* 0x10 */)
{ /* 0x6c */
  /* file mmsystem.c line 1568 addr 0x6c */
  /* file mmsystem.c line 1568 addr 0x6f */
} /* 0x73 */
MMRESULT waveOutGetErrorTextW (MMRESULT a /* 0x8 */, LPWSTR b /* 0xc */, UINT c /* 0x10 */)
{ /* 0x73 */
  /* file mmsystem.c line 1569 addr 0x73 */
  /* file mmsystem.c line 1569 addr 0x76 */
} /* 0x7a */
MMRESULT waveOutOpen (LPHWAVEOUT a /* 0x8 */, UINT b /* 0xc */, LPCWAVEFORMATEX c /* 0x10 */, DWORD d /* 0x14 */, DWORD e /* 0x18 */, DWORD f /* 0x1c */)
{ /* 0x7a */
  /* file mmsystem.c line 1570 addr 0x7a */
  /* file mmsystem.c line 1570 addr 0x7d */
} /* 0x81 */
MMRESULT waveOutClose (HWAVEOUT a /* 0x8 */)
{ /* 0x81 */
  /* file mmsystem.c line 1571 addr 0x81 */
  /* file mmsystem.c line 1571 addr 0x84 */
} /* 0x88 */
MMRESULT waveOutPrepareHeader (HWAVEOUT a /* 0x8 */, LPWAVEHDR b /* 0xc */, UINT c /* 0x10 */)
{ /* 0x88 */
  /* file mmsystem.c line 1572 addr 0x88 */
  /* file mmsystem.c line 1572 addr 0x8b */
} /* 0x8f */
MMRESULT waveOutUnprepareHeader (HWAVEOUT a /* 0x8 */, LPWAVEHDR b /* 0xc */, UINT c /* 0x10 */)
{ /* 0x8f */
  /* file mmsystem.c line 1573 addr 0x8f */
  /* file mmsystem.c line 1573 addr 0x92 */
} /* 0x96 */
MMRESULT waveOutWrite (HWAVEOUT a /* 0x8 */, LPWAVEHDR b /* 0xc */, UINT c /* 0x10 */)
{ /* 0x96 */
  /* file mmsystem.c line 1574 addr 0x96 */
  /* file mmsystem.c line 1574 addr 0x99 */
} /* 0x9d */
MMRESULT waveOutPause (HWAVEOUT a /* 0x8 */)
{ /* 0x9d */
  /* file mmsystem.c line 1575 addr 0x9d */
  /* file mmsystem.c line 1575 addr 0xa0 */
} /* 0xa4 */
MMRESULT waveOutRestart (HWAVEOUT a /* 0x8 */)
{ /* 0xa4 */
  /* file mmsystem.c line 1576 addr 0xa4 */
  /* file mmsystem.c line 1576 addr 0xa7 */
} /* 0xab */
MMRESULT waveOutReset (HWAVEOUT a /* 0x8 */)
{ /* 0xab */
  /* file mmsystem.c line 1577 addr 0xab */
  /* file mmsystem.c line 1577 addr 0xae */
} /* 0xb2 */
MMRESULT waveOutBreakLoop (HWAVEOUT a /* 0x8 */)
{ /* 0xb2 */
  /* file mmsystem.c line 1578 addr 0xb2 */
  /* file mmsystem.c line 1578 addr 0xb5 */
} /* 0xb9 */
MMRESULT waveOutGetPosition (HWAVEOUT a /* 0x8 */, LPMMTIME b /* 0xc */, UINT c /* 0x10 */)
{ /* 0xb9 */
  /* file mmsystem.c line 1579 addr 0xb9 */
  /* file mmsystem.c line 1579 addr 0xbc */
} /* 0xc0 */
MMRESULT waveOutGetPitch (HWAVEOUT a /* 0x8 */, PDWORD b /* 0xc */)
{ /* 0xc0 */
  /* file mmsystem.c line 1580 addr 0xc0 */
  /* file mmsystem.c line 1580 addr 0xc3 */
} /* 0xc7 */
MMRESULT waveOutSetPitch (HWAVEOUT a /* 0x8 */, DWORD b /* 0xc */)
{ /* 0xc7 */
  /* file mmsystem.c line 1581 addr 0xc7 */
  /* file mmsystem.c line 1581 addr 0xca */
} /* 0xce */
MMRESULT waveOutGetPlaybackRate (HWAVEOUT a /* 0x8 */, PDWORD b /* 0xc */)
{ /* 0xce */
  /* file mmsystem.c line 1582 addr 0xce */
  /* file mmsystem.c line 1582 addr 0xd1 */
} /* 0xd5 */
MMRESULT waveOutSetPlaybackRate (HWAVEOUT a /* 0x8 */, DWORD b /* 0xc */)
{ /* 0xd5 */
  /* file mmsystem.c line 1583 addr 0xd5 */
  /* file mmsystem.c line 1583 addr 0xd8 */
} /* 0xdc */
MMRESULT waveOutGetID (HWAVEOUT a /* 0x8 */, LPUINT b /* 0xc */)
{ /* 0xdc */
  /* file mmsystem.c line 1584 addr 0xdc */
  /* file mmsystem.c line 1584 addr 0xdf */
} /* 0xe3 */
MMRESULT waveOutMessage (HWAVEOUT a /* 0x8 */, UINT b /* 0xc */, DWORD c /* 0x10 */, DWORD d /* 0x14 */)
{ /* 0xe3 */
  /* file mmsystem.c line 1585 addr 0xe3 */
  /* file mmsystem.c line 1585 addr 0xe6 */
} /* 0xea */
UINT waveInGetNumDevs ()
{ /* 0xea */
  /* file mmsystem.c line 1586 addr 0xea */
  /* file mmsystem.c line 1586 addr 0xed */
} /* 0xef */
MMRESULT waveInGetDevCapsA (UINT a /* 0x8 */, LPWAVEINCAPSA b /* 0xc */, UINT c /* 0x10 */)
{ /* 0xef */
  /* file mmsystem.c line 1587 addr 0xef */
  /* file mmsystem.c line 1587 addr 0xf2 */
} /* 0xf6 */
MMRESULT waveInGetDevCapsW (UINT a /* 0x8 */, LPWAVEINCAPSW b /* 0xc */, UINT c /* 0x10 */)
{ /* 0xf6 */
  /* file mmsystem.c line 1588 addr 0xf6 */
  /* file mmsystem.c line 1588 addr 0xf9 */
} /* 0xfd */
MMRESULT waveInGetErrorTextA (MMRESULT a /* 0x8 */, LPSTR b /* 0xc */, UINT c /* 0x10 */)
{ /* 0xfd */
  /* file mmsystem.c line 1589 addr 0xfd */
  /* file mmsystem.c line 1589 addr 0x100 */
} /* 0x104 */
MMRESULT waveInGetErrorTextW (MMRESULT a /* 0x8 */, LPWSTR b /* 0xc */, UINT c /* 0x10 */)
{ /* 0x104 */
  /* file mmsystem.c line 1590 addr 0x104 */
  /* file mmsystem.c line 1590 addr 0x107 */
} /* 0x10b */
MMRESULT waveInOpen (LPHWAVEIN a /* 0x8 */, UINT b /* 0xc */, LPCWAVEFORMATEX c /* 0x10 */, DWORD d /* 0x14 */, DWORD e /* 0x18 */, DWORD f /* 0x1c */)
{ /* 0x10b */
  /* file mmsystem.c line 1591 addr 0x10b */
  /* file mmsystem.c line 1591 addr 0x10e */
} /* 0x112 */
MMRESULT waveInClose (HWAVEIN a /* 0x8 */)
{ /* 0x112 */
  /* file mmsystem.c line 1592 addr 0x112 */
  /* file mmsystem.c line 1592 addr 0x115 */
} /* 0x119 */
MMRESULT waveInPrepareHeader (HWAVEIN a /* 0x8 */, LPWAVEHDR b /* 0xc */, UINT c /* 0x10 */)
{ /* 0x119 */
  /* file mmsystem.c line 1593 addr 0x119 */
  /* file mmsystem.c line 1593 addr 0x11c */
} /* 0x120 */
MMRESULT waveInUnprepareHeader (HWAVEIN a /* 0x8 */, LPWAVEHDR b /* 0xc */, UINT c /* 0x10 */)
{ /* 0x120 */
  /* file mmsystem.c line 1594 addr 0x120 */
  /* file mmsystem.c line 1594 addr 0x123 */
} /* 0x127 */
MMRESULT waveInAddBuffer (HWAVEIN a /* 0x8 */, LPWAVEHDR b /* 0xc */, UINT c /* 0x10 */)
{ /* 0x127 */
  /* file mmsystem.c line 1595 addr 0x127 */
  /* file mmsystem.c line 1595 addr 0x12a */
} /* 0x12e */
MMRESULT waveInStart (HWAVEIN a /* 0x8 */)
{ /* 0x12e */
  /* file mmsystem.c line 1596 addr 0x12e */
  /* file mmsystem.c line 1596 addr 0x131 */
} /* 0x135 */
MMRESULT waveInStop (HWAVEIN a /* 0x8 */)
{ /* 0x135 */
  /* file mmsystem.c line 1597 addr 0x135 */
  /* file mmsystem.c line 1597 addr 0x138 */
} /* 0x13c */
MMRESULT waveInReset (HWAVEIN a /* 0x8 */)
{ /* 0x13c */
  /* file mmsystem.c line 1598 addr 0x13c */
  /* file mmsystem.c line 1598 addr 0x13f */
} /* 0x143 */
MMRESULT waveInGetPosition (HWAVEIN a /* 0x8 */, LPMMTIME b /* 0xc */, UINT c /* 0x10 */)
{ /* 0x143 */
  /* file mmsystem.c line 1599 addr 0x143 */
  /* file mmsystem.c line 1599 addr 0x146 */
} /* 0x14a */
MMRESULT waveInGetID (HWAVEIN a /* 0x8 */, LPUINT b /* 0xc */)
{ /* 0x14a */
  /* file mmsystem.c line 1600 addr 0x14a */
  /* file mmsystem.c line 1600 addr 0x14d */
} /* 0x151 */
MMRESULT waveInMessage (HWAVEIN a /* 0x8 */, UINT b /* 0xc */, DWORD c /* 0x10 */, DWORD d /* 0x14 */)
{ /* 0x151 */
  /* file mmsystem.c line 1601 addr 0x151 */
  /* file mmsystem.c line 1601 addr 0x154 */
} /* 0x158 */
UINT midiOutGetNumDevs ()
{ /* 0x158 */
  /* file mmsystem.c line 1602 addr 0x158 */
  /* file mmsystem.c line 1602 addr 0x15b */
} /* 0x15d */
MMRESULT midiStreamOpen (LPHMIDISTRM a /* 0x8 */, LPUINT b /* 0xc */, DWORD c /* 0x10 */, DWORD d /* 0x14 */, DWORD e /* 0x18 */, DWORD f /* 0x1c */)
{ /* 0x15d */
  /* file mmsystem.c line 1603 addr 0x15d */
  /* file mmsystem.c line 1603 addr 0x160 */
} /* 0x164 */
MMRESULT midiStreamClose (HMIDISTRM a /* 0x8 */)
{ /* 0x164 */
  /* file mmsystem.c line 1604 addr 0x164 */
  /* file mmsystem.c line 1604 addr 0x167 */
} /* 0x16b */
MMRESULT midiStreamProperty (HMIDISTRM a /* 0x8 */, LPBYTE b /* 0xc */, DWORD c /* 0x10 */)
{ /* 0x16b */
  /* file mmsystem.c line 1605 addr 0x16b */
  /* file mmsystem.c line 1605 addr 0x16e */
} /* 0x172 */
MMRESULT midiStreamPosition (HMIDISTRM a /* 0x8 */, LPMMTIME b /* 0xc */, UINT c /* 0x10 */)
{ /* 0x172 */
  /* file mmsystem.c line 1606 addr 0x172 */
  /* file mmsystem.c line 1606 addr 0x175 */
} /* 0x179 */
MMRESULT midiStreamOut (HMIDISTRM a /* 0x8 */, LPMIDIHDR b /* 0xc */, UINT c /* 0x10 */)
{ /* 0x179 */
  /* file mmsystem.c line 1607 addr 0x179 */
  /* file mmsystem.c line 1607 addr 0x17c */
} /* 0x180 */
MMRESULT midiStreamPause (HMIDISTRM a /* 0x8 */)
{ /* 0x180 */
  /* file mmsystem.c line 1608 addr 0x180 */
  /* file mmsystem.c line 1608 addr 0x183 */
} /* 0x187 */
MMRESULT midiStreamRestart (HMIDISTRM a /* 0x8 */)
{ /* 0x187 */
  /* file mmsystem.c line 1609 addr 0x187 */
  /* file mmsystem.c line 1609 addr 0x18a */
} /* 0x18e */
MMRESULT midiStreamStop (HMIDISTRM a /* 0x8 */)
{ /* 0x18e */
  /* file mmsystem.c line 1610 addr 0x18e */
  /* file mmsystem.c line 1610 addr 0x191 */
} /* 0x195 */
MMRESULT midiConnect (HMIDI a /* 0x8 */, HMIDIOUT b /* 0xc */, PVOID c /* 0x10 */)
{ /* 0x195 */
  /* file mmsystem.c line 1611 addr 0x195 */
  /* file mmsystem.c line 1611 addr 0x198 */
} /* 0x19c */
MMRESULT midiDisconnect (HMIDI a /* 0x8 */, HMIDIOUT b /* 0xc */, PVOID c /* 0x10 */)
{ /* 0x19c */
  /* file mmsystem.c line 1612 addr 0x19c */
  /* file mmsystem.c line 1612 addr 0x19f */
} /* 0x1a3 */
MMRESULT midiOutGetDevCapsA (UINT a /* 0x8 */, LPMIDIOUTCAPSA b /* 0xc */, UINT c /* 0x10 */)
{ /* 0x1a3 */
  /* file mmsystem.c line 1613 addr 0x1a3 */
  /* file mmsystem.c line 1613 addr 0x1a6 */
} /* 0x1aa */
MMRESULT midiOutGetDevCapsW (UINT a /* 0x8 */, LPMIDIOUTCAPSW b /* 0xc */, UINT c /* 0x10 */)
{ /* 0x1aa */
  /* file mmsystem.c line 1614 addr 0x1aa */
  /* file mmsystem.c line 1614 addr 0x1ad */
} /* 0x1b1 */
MMRESULT midiOutGetVolume (HMIDIOUT a /* 0x8 */, PDWORD b /* 0xc */)
{ /* 0x1b1 */
  /* file mmsystem.c line 1615 addr 0x1b1 */
  /* file mmsystem.c line 1615 addr 0x1b4 */
} /* 0x1b8 */
MMRESULT midiOutSetVolume (HMIDIOUT a /* 0x8 */, DWORD b /* 0xc */)
{ /* 0x1b8 */
  /* file mmsystem.c line 1616 addr 0x1b8 */
  /* file mmsystem.c line 1616 addr 0x1bb */
} /* 0x1bf */
MMRESULT midiOutGetErrorTextA (MMRESULT a /* 0x8 */, LPSTR b /* 0xc */, UINT c /* 0x10 */)
{ /* 0x1bf */
  /* file mmsystem.c line 1617 addr 0x1bf */
  /* file mmsystem.c line 1617 addr 0x1c2 */
} /* 0x1c6 */
MMRESULT midiOutGetErrorTextW (MMRESULT a /* 0x8 */, LPWSTR b /* 0xc */, UINT c /* 0x10 */)
{ /* 0x1c6 */
  /* file mmsystem.c line 1618 addr 0x1c6 */
  /* file mmsystem.c line 1618 addr 0x1c9 */
} /* 0x1cd */
MMRESULT midiOutOpen (LPHMIDIOUT a /* 0x8 */, UINT b /* 0xc */, DWORD c /* 0x10 */, DWORD d /* 0x14 */, DWORD e /* 0x18 */)
{ /* 0x1cd */
  /* file mmsystem.c line 1619 addr 0x1cd */
  /* file mmsystem.c line 1619 addr 0x1d0 */
} /* 0x1d4 */
MMRESULT midiOutClose (HMIDIOUT a /* 0x8 */)
{ /* 0x1d4 */
  /* file mmsystem.c line 1620 addr 0x1d4 */
  /* file mmsystem.c line 1620 addr 0x1d7 */
} /* 0x1db */
MMRESULT midiOutPrepareHeader (HMIDIOUT a /* 0x8 */, LPMIDIHDR b /* 0xc */, UINT c /* 0x10 */)
{ /* 0x1db */
  /* file mmsystem.c line 1621 addr 0x1db */
  /* file mmsystem.c line 1621 addr 0x1de */
} /* 0x1e2 */
MMRESULT midiOutUnprepareHeader (HMIDIOUT a /* 0x8 */, LPMIDIHDR b /* 0xc */, UINT c /* 0x10 */)
{ /* 0x1e2 */
  /* file mmsystem.c line 1622 addr 0x1e2 */
  /* file mmsystem.c line 1622 addr 0x1e5 */
} /* 0x1e9 */
MMRESULT midiOutShortMsg (HMIDIOUT a /* 0x8 */, DWORD b /* 0xc */)
{ /* 0x1e9 */
  /* file mmsystem.c line 1623 addr 0x1e9 */
  /* file mmsystem.c line 1623 addr 0x1ec */
} /* 0x1f0 */
MMRESULT midiOutLongMsg (HMIDIOUT a /* 0x8 */, LPMIDIHDR b /* 0xc */, UINT c /* 0x10 */)
{ /* 0x1f0 */
  /* file mmsystem.c line 1624 addr 0x1f0 */
  /* file mmsystem.c line 1624 addr 0x1f3 */
} /* 0x1f7 */
MMRESULT midiOutReset (HMIDIOUT a /* 0x8 */)
{ /* 0x1f7 */
  /* file mmsystem.c line 1625 addr 0x1f7 */
  /* file mmsystem.c line 1625 addr 0x1fa */
} /* 0x1fe */
MMRESULT midiOutCachePatches (HMIDIOUT a /* 0x8 */, UINT b /* 0xc */, LPWORD c /* 0x10 */, UINT d /* 0x14 */)
{ /* 0x1fe */
  /* file mmsystem.c line 1626 addr 0x1fe */
  /* file mmsystem.c line 1626 addr 0x201 */
} /* 0x205 */
MMRESULT midiOutCacheDrumPatches (HMIDIOUT a /* 0x8 */, UINT b /* 0xc */, LPWORD c /* 0x10 */, UINT d /* 0x14 */)
{ /* 0x205 */
  /* file mmsystem.c line 1627 addr 0x205 */
  /* file mmsystem.c line 1627 addr 0x208 */
} /* 0x20c */
MMRESULT midiOutGetID (HMIDIOUT a /* 0x8 */, LPUINT b /* 0xc */)
{ /* 0x20c */
  /* file mmsystem.c line 1628 addr 0x20c */
  /* file mmsystem.c line 1628 addr 0x20f */
} /* 0x213 */
MMRESULT midiOutMessage (HMIDIOUT a /* 0x8 */, UINT b /* 0xc */, DWORD c /* 0x10 */, DWORD d /* 0x14 */)
{ /* 0x213 */
  /* file mmsystem.c line 1629 addr 0x213 */
  /* file mmsystem.c line 1629 addr 0x216 */
} /* 0x21a */
UINT midiInGetNumDevs ()
{ /* 0x21a */
  /* file mmsystem.c line 1630 addr 0x21a */
  /* file mmsystem.c line 1630 addr 0x21d */
} /* 0x21f */
MMRESULT midiInGetDevCapsA (UINT a /* 0x8 */, LPMIDIINCAPSA b /* 0xc */, UINT c /* 0x10 */)
{ /* 0x21f */
  /* file mmsystem.c line 1631 addr 0x21f */
  /* file mmsystem.c line 1631 addr 0x222 */
} /* 0x226 */
MMRESULT midiInGetDevCapsW (UINT a /* 0x8 */, LPMIDIINCAPSW b /* 0xc */, UINT c /* 0x10 */)
{ /* 0x226 */
  /* file mmsystem.c line 1632 addr 0x226 */
  /* file mmsystem.c line 1632 addr 0x229 */
} /* 0x22d */
MMRESULT midiInGetErrorTextA (MMRESULT a /* 0x8 */, LPSTR b /* 0xc */, UINT c /* 0x10 */)
{ /* 0x22d */
  /* file mmsystem.c line 1633 addr 0x22d */
  /* file mmsystem.c line 1633 addr 0x230 */
} /* 0x234 */
MMRESULT midiInGetErrorTextW (MMRESULT a /* 0x8 */, LPWSTR b /* 0xc */, UINT c /* 0x10 */)
{ /* 0x234 */
  /* file mmsystem.c line 1634 addr 0x234 */
  /* file mmsystem.c line 1634 addr 0x237 */
} /* 0x23b */
MMRESULT midiInOpen (LPHMIDIIN a /* 0x8 */, UINT b /* 0xc */, DWORD c /* 0x10 */, DWORD d /* 0x14 */, DWORD e /* 0x18 */)
{ /* 0x23b */
  /* file mmsystem.c line 1635 addr 0x23b */
  /* file mmsystem.c line 1635 addr 0x23e */
} /* 0x242 */
MMRESULT midiInClose (HMIDIIN a /* 0x8 */)
{ /* 0x242 */
  /* file mmsystem.c line 1636 addr 0x242 */
  /* file mmsystem.c line 1636 addr 0x245 */
} /* 0x249 */
MMRESULT midiInPrepareHeader (HMIDIIN a /* 0x8 */, LPMIDIHDR b /* 0xc */, UINT c /* 0x10 */)
{ /* 0x249 */
  /* file mmsystem.c line 1637 addr 0x249 */
  /* file mmsystem.c line 1637 addr 0x24c */
} /* 0x250 */
MMRESULT midiInUnprepareHeader (HMIDIIN a /* 0x8 */, LPMIDIHDR b /* 0xc */, UINT c /* 0x10 */)
{ /* 0x250 */
  /* file mmsystem.c line 1638 addr 0x250 */
  /* file mmsystem.c line 1638 addr 0x253 */
} /* 0x257 */
MMRESULT midiInAddBuffer (HMIDIIN a /* 0x8 */, LPMIDIHDR b /* 0xc */, UINT c /* 0x10 */)
{ /* 0x257 */
  /* file mmsystem.c line 1639 addr 0x257 */
  /* file mmsystem.c line 1639 addr 0x25a */
} /* 0x25e */
MMRESULT midiInStart (HMIDIIN a /* 0x8 */)
{ /* 0x25e */
  /* file mmsystem.c line 1640 addr 0x25e */
  /* file mmsystem.c line 1640 addr 0x261 */
} /* 0x265 */
MMRESULT midiInStop (HMIDIIN a /* 0x8 */)
{ /* 0x265 */
  /* file mmsystem.c line 1641 addr 0x265 */
  /* file mmsystem.c line 1641 addr 0x268 */
} /* 0x26c */
MMRESULT midiInReset (HMIDIIN a /* 0x8 */)
{ /* 0x26c */
  /* file mmsystem.c line 1642 addr 0x26c */
  /* file mmsystem.c line 1642 addr 0x26f */
} /* 0x273 */
MMRESULT midiInGetID (HMIDIIN a /* 0x8 */, LPUINT b /* 0xc */)
{ /* 0x273 */
  /* file mmsystem.c line 1643 addr 0x273 */
  /* file mmsystem.c line 1643 addr 0x276 */
} /* 0x27a */
MMRESULT midiInMessage (HMIDIIN a /* 0x8 */, UINT b /* 0xc */, DWORD c /* 0x10 */, DWORD d /* 0x14 */)
{ /* 0x27a */
  /* file mmsystem.c line 1644 addr 0x27a */
  /* file mmsystem.c line 1644 addr 0x27d */
} /* 0x281 */
UINT auxGetNumDevs ()
{ /* 0x281 */
  /* file mmsystem.c line 1645 addr 0x281 */
  /* file mmsystem.c line 1645 addr 0x284 */
} /* 0x286 */
MMRESULT auxGetDevCapsA (UINT a /* 0x8 */, LPAUXCAPSA b /* 0xc */, UINT c /* 0x10 */)
{ /* 0x286 */
  /* file mmsystem.c line 1646 addr 0x286 */
  /* file mmsystem.c line 1646 addr 0x289 */
} /* 0x28d */
MMRESULT auxGetDevCapsW (UINT a /* 0x8 */, LPAUXCAPSW b /* 0xc */, UINT c /* 0x10 */)
{ /* 0x28d */
  /* file mmsystem.c line 1647 addr 0x28d */
  /* file mmsystem.c line 1647 addr 0x290 */
} /* 0x294 */
MMRESULT auxSetVolume (UINT a /* 0x8 */, DWORD b /* 0xc */)
{ /* 0x294 */
  /* file mmsystem.c line 1648 addr 0x294 */
  /* file mmsystem.c line 1648 addr 0x297 */
} /* 0x29b */
MMRESULT auxGetVolume (UINT a /* 0x8 */, PDWORD b /* 0xc */)
{ /* 0x29b */
  /* file mmsystem.c line 1649 addr 0x29b */
  /* file mmsystem.c line 1649 addr 0x29e */
} /* 0x2a2 */
MMRESULT auxOutMessage (UINT a /* 0x8 */, UINT b /* 0xc */, DWORD c /* 0x10 */, DWORD d /* 0x14 */)
{ /* 0x2a2 */
  /* file mmsystem.c line 1650 addr 0x2a2 */
  /* file mmsystem.c line 1650 addr 0x2a5 */
} /* 0x2a9 */
UINT mixerGetNumDevs ()
{ /* 0x2a9 */
  /* file mmsystem.c line 1651 addr 0x2a9 */
  /* file mmsystem.c line 1651 addr 0x2ac */
} /* 0x2ae */
MMRESULT mixerGetDevCapsA (UINT a /* 0x8 */, LPMIXERCAPSA b /* 0xc */, UINT c /* 0x10 */)
{ /* 0x2ae */
  /* file mmsystem.c line 1652 addr 0x2ae */
  /* file mmsystem.c line 1652 addr 0x2b1 */
} /* 0x2b5 */
MMRESULT mixerGetDevCapsW (UINT a /* 0x8 */, LPMIXERCAPSW b /* 0xc */, UINT c /* 0x10 */)
{ /* 0x2b5 */
  /* file mmsystem.c line 1653 addr 0x2b5 */
  /* file mmsystem.c line 1653 addr 0x2b8 */
} /* 0x2bc */
MMRESULT mixerOpen (LPHMIXER a /* 0x8 */, UINT b /* 0xc */, DWORD c /* 0x10 */, DWORD d /* 0x14 */, DWORD e /* 0x18 */)
{ /* 0x2bc */
  /* file mmsystem.c line 1654 addr 0x2bc */
  /* file mmsystem.c line 1654 addr 0x2bf */
} /* 0x2c3 */
MMRESULT mixerClose (HMIXER a /* 0x8 */)
{ /* 0x2c3 */
  /* file mmsystem.c line 1655 addr 0x2c3 */
  /* file mmsystem.c line 1655 addr 0x2c6 */
} /* 0x2ca */
DWORD mixerMessage (HMIXER a /* 0x8 */, UINT b /* 0xc */, DWORD c /* 0x10 */, DWORD d /* 0x14 */)
{ /* 0x2ca */
  /* file mmsystem.c line 1656 addr 0x2ca */
  /* file mmsystem.c line 1656 addr 0x2cd */
} /* 0x2d1 */
MMRESULT mixerGetLineInfoA (HMIXEROBJ a /* 0x8 */, LPMIXERLINEA b /* 0xc */, DWORD c /* 0x10 */)
{ /* 0x2d1 */
  /* file mmsystem.c line 1657 addr 0x2d1 */
  /* file mmsystem.c line 1657 addr 0x2d4 */
} /* 0x2d8 */
MMRESULT mixerGetLineInfoW (HMIXEROBJ a /* 0x8 */, LPMIXERLINEW b /* 0xc */, DWORD c /* 0x10 */)
{ /* 0x2d8 */
  /* file mmsystem.c line 1658 addr 0x2d8 */
  /* file mmsystem.c line 1658 addr 0x2db */
} /* 0x2df */
MMRESULT mixerGetID (HMIXEROBJ a /* 0x8 */, PUINT b /* 0xc */, DWORD c /* 0x10 */)
{ /* 0x2df */
  /* file mmsystem.c line 1659 addr 0x2df */
  /* file mmsystem.c line 1659 addr 0x2e2 */
} /* 0x2e6 */
MMRESULT mixerGetLineControlsA (HMIXEROBJ a /* 0x8 */, LPMIXERLINECONTROLSA b /* 0xc */, DWORD c /* 0x10 */)
{ /* 0x2e6 */
  /* file mmsystem.c line 1660 addr 0x2e6 */
  /* file mmsystem.c line 1660 addr 0x2e9 */
} /* 0x2ed */
MMRESULT mixerGetLineControlsW (HMIXEROBJ a /* 0x8 */, LPMIXERLINECONTROLSW b /* 0xc */, DWORD c /* 0x10 */)
{ /* 0x2ed */
  /* file mmsystem.c line 1661 addr 0x2ed */
  /* file mmsystem.c line 1661 addr 0x2f0 */
} /* 0x2f4 */
MMRESULT mixerGetControlDetailsA (HMIXEROBJ a /* 0x8 */, LPMIXERCONTROLDETAILS b /* 0xc */, DWORD c /* 0x10 */)
{ /* 0x2f4 */
  /* file mmsystem.c line 1662 addr 0x2f4 */
  /* file mmsystem.c line 1662 addr 0x2f7 */
} /* 0x2fb */
MMRESULT mixerGetControlDetailsW (HMIXEROBJ a /* 0x8 */, LPMIXERCONTROLDETAILS b /* 0xc */, DWORD c /* 0x10 */)
{ /* 0x2fb */
  /* file mmsystem.c line 1663 addr 0x2fb */
  /* file mmsystem.c line 1663 addr 0x2fe */
} /* 0x302 */
MMRESULT mixerSetControlDetails (HMIXEROBJ a /* 0x8 */, LPMIXERCONTROLDETAILS b /* 0xc */, DWORD c /* 0x10 */)
{ /* 0x302 */
  /* file mmsystem.c line 1664 addr 0x302 */
  /* file mmsystem.c line 1664 addr 0x305 */
} /* 0x309 */
MMRESULT timeGetSystemTime (LPMMTIME a /* 0x8 */, UINT b /* 0xc */)
{ /* 0x309 */
  /* file mmsystem.c line 1665 addr 0x309 */
  /* file mmsystem.c line 1665 addr 0x30c */
} /* 0x310 */
DWORD timeGetTime ()
{ /* 0x310 */
  /* file mmsystem.c line 1666 addr 0x310 */
  /* file mmsystem.c line 1666 addr 0x313 */
} /* 0x315 */
MMRESULT timeSetEvent (UINT a /* 0x8 */, UINT b /* 0xc */, LPTIMECALLBACK c /* 0x10 */, DWORD d /* 0x14 */, UINT e /* 0x18 */)
{ /* 0x315 */
  /* file mmsystem.c line 1667 addr 0x315 */
  /* file mmsystem.c line 1667 addr 0x318 */
} /* 0x31c */
MMRESULT timeKillEvent (UINT a /* 0x8 */)
{ /* 0x31c */
  /* file mmsystem.c line 1668 addr 0x31c */
  /* file mmsystem.c line 1668 addr 0x31f */
} /* 0x323 */
MMRESULT timeGetDevCaps (LPTIMECAPS a /* 0x8 */, UINT b /* 0xc */)
{ /* 0x323 */
  /* file mmsystem.c line 1669 addr 0x323 */
  /* file mmsystem.c line 1669 addr 0x326 */
} /* 0x32a */
MMRESULT timeBeginPeriod (UINT a /* 0x8 */)
{ /* 0x32a */
  /* file mmsystem.c line 1670 addr 0x32a */
  /* file mmsystem.c line 1670 addr 0x32d */
} /* 0x331 */
MMRESULT timeEndPeriod (UINT a /* 0x8 */)
{ /* 0x331 */
  /* file mmsystem.c line 1671 addr 0x331 */
  /* file mmsystem.c line 1671 addr 0x334 */
} /* 0x338 */
UINT joyGetNumDevs ()
{ /* 0x338 */
  /* file mmsystem.c line 1672 addr 0x338 */
  /* file mmsystem.c line 1672 addr 0x33b */
} /* 0x33d */
MMRESULT joyGetDevCapsA (UINT a /* 0x8 */, LPJOYCAPSA b /* 0xc */, UINT c /* 0x10 */)
{ /* 0x33d */
  /* file mmsystem.c line 1673 addr 0x33d */
  /* file mmsystem.c line 1673 addr 0x340 */
} /* 0x344 */
MMRESULT joyGetDevCapsW (UINT a /* 0x8 */, LPJOYCAPSW b /* 0xc */, UINT c /* 0x10 */)
{ /* 0x344 */
  /* file mmsystem.c line 1674 addr 0x344 */
  /* file mmsystem.c line 1674 addr 0x347 */
} /* 0x34b */
MMRESULT joyGetPos (UINT a /* 0x8 */, LPJOYINFO b /* 0xc */)
{ /* 0x34b */
  /* file mmsystem.c line 1675 addr 0x34b */
  /* file mmsystem.c line 1675 addr 0x34e */
} /* 0x352 */
MMRESULT joyGetPosEx (UINT a /* 0x8 */, LPJOYINFOEX b /* 0xc */)
{ /* 0x352 */
  /* file mmsystem.c line 1676 addr 0x352 */
  /* file mmsystem.c line 1676 addr 0x355 */
} /* 0x359 */
MMRESULT joyGetThreshold (UINT a /* 0x8 */, LPUINT b /* 0xc */)
{ /* 0x359 */
  /* file mmsystem.c line 1677 addr 0x359 */
  /* file mmsystem.c line 1677 addr 0x35c */
} /* 0x360 */
MMRESULT joyReleaseCapture (UINT a /* 0x8 */)
{ /* 0x360 */
  /* file mmsystem.c line 1678 addr 0x360 */
  /* file mmsystem.c line 1678 addr 0x363 */
} /* 0x367 */
MMRESULT joySetCapture (HWND a /* 0x8 */, UINT b /* 0xc */, UINT c /* 0x10 */, BOOL d /* 0x14 */)
{ /* 0x367 */
  /* file mmsystem.c line 1679 addr 0x367 */
  /* file mmsystem.c line 1679 addr 0x36a */
} /* 0x36e */
MMRESULT joySetThreshold (UINT a /* 0x8 */, UINT b /* 0xc */)
{ /* 0x36e */
  /* file mmsystem.c line 1680 addr 0x36e */
  /* file mmsystem.c line 1680 addr 0x371 */
} /* 0x375 */
FOURCC mmioStringToFOURCCA (LPCSTR a /* 0x8 */, UINT b /* 0xc */)
{ /* 0x375 */
  /* file mmsystem.c line 1681 addr 0x375 */
  /* file mmsystem.c line 1681 addr 0x378 */
} /* 0x37c */
FOURCC mmioStringToFOURCCW (LPCWSTR a /* 0x8 */, UINT b /* 0xc */)
{ /* 0x37c */
  /* file mmsystem.c line 1682 addr 0x37c */
  /* file mmsystem.c line 1682 addr 0x37f */
} /* 0x383 */
LPMMIOPROC mmioInstallIOProcA (FOURCC a /* 0x8 */, LPMMIOPROC b /* 0xc */, DWORD c /* 0x10 */)
{ /* 0x383 */
  /* file mmsystem.c line 1683 addr 0x383 */
  /* file mmsystem.c line 1683 addr 0x386 */
} /* 0x38a */
LPMMIOPROC mmioInstallIOProcW (FOURCC a /* 0x8 */, LPMMIOPROC b /* 0xc */, DWORD c /* 0x10 */)
{ /* 0x38a */
  /* file mmsystem.c line 1684 addr 0x38a */
  /* file mmsystem.c line 1684 addr 0x38d */
} /* 0x391 */
HMMIO mmioOpenA (LPSTR a /* 0x8 */, LPMMIOINFO b /* 0xc */, DWORD c /* 0x10 */)
{ /* 0x391 */
  /* file mmsystem.c line 1685 addr 0x391 */
  /* file mmsystem.c line 1685 addr 0x394 */
} /* 0x398 */
HMMIO mmioOpenW (LPWSTR a /* 0x8 */, LPMMIOINFO b /* 0xc */, DWORD c /* 0x10 */)
{ /* 0x398 */
  /* file mmsystem.c line 1686 addr 0x398 */
  /* file mmsystem.c line 1686 addr 0x39b */
} /* 0x39f */
MMRESULT mmioRenameA (LPCSTR a /* 0x8 */, LPCSTR b /* 0xc */, LPCMMIOINFO c /* 0x10 */, DWORD d /* 0x14 */)
{ /* 0x39f */
  /* file mmsystem.c line 1687 addr 0x39f */
  /* file mmsystem.c line 1687 addr 0x3a2 */
} /* 0x3a6 */
MMRESULT mmioRenameW (LPCWSTR a /* 0x8 */, LPCWSTR b /* 0xc */, LPCMMIOINFO c /* 0x10 */, DWORD d /* 0x14 */)
{ /* 0x3a6 */
  /* file mmsystem.c line 1688 addr 0x3a6 */
  /* file mmsystem.c line 1688 addr 0x3a9 */
} /* 0x3ad */
MMRESULT mmioClose (HMMIO a /* 0x8 */, UINT b /* 0xc */)
{ /* 0x3ad */
  /* file mmsystem.c line 1689 addr 0x3ad */
  /* file mmsystem.c line 1689 addr 0x3b0 */
} /* 0x3b4 */
LONG mmioRead (HMMIO a /* 0x8 */, HPSTR b /* 0xc */, LONG c /* 0x10 */)
{ /* 0x3b4 */
  /* file mmsystem.c line 1690 addr 0x3b4 */
  /* file mmsystem.c line 1690 addr 0x3b7 */
} /* 0x3bb */
LONG mmioWrite (HMMIO a /* 0x8 */, LPCSTR b /* 0xc */, LONG c /* 0x10 */)
{ /* 0x3bb */
  /* file mmsystem.c line 1691 addr 0x3bb */
  /* file mmsystem.c line 1691 addr 0x3be */
} /* 0x3c2 */
LONG mmioSeek (HMMIO a /* 0x8 */, LONG b /* 0xc */, int c /* 0x10 */)
{ /* 0x3c2 */
  /* file mmsystem.c line 1692 addr 0x3c2 */
  /* file mmsystem.c line 1692 addr 0x3c5 */
} /* 0x3c9 */
MMRESULT mmioGetInfo (HMMIO a /* 0x8 */, LPMMIOINFO b /* 0xc */, UINT c /* 0x10 */)
{ /* 0x3c9 */
  /* file mmsystem.c line 1693 addr 0x3c9 */
  /* file mmsystem.c line 1693 addr 0x3cc */
} /* 0x3d0 */
MMRESULT mmioSetInfo (HMMIO a /* 0x8 */, LPCMMIOINFO b /* 0xc */, UINT c /* 0x10 */)
{ /* 0x3d0 */
  /* file mmsystem.c line 1694 addr 0x3d0 */
  /* file mmsystem.c line 1694 addr 0x3d3 */
} /* 0x3d7 */
MMRESULT mmioSetBuffer (HMMIO a /* 0x8 */, LPSTR b /* 0xc */, LONG c /* 0x10 */, UINT d /* 0x14 */)
{ /* 0x3d7 */
  /* file mmsystem.c line 1695 addr 0x3d7 */
  /* file mmsystem.c line 1695 addr 0x3da */
} /* 0x3de */
MMRESULT mmioFlush (HMMIO a /* 0x8 */, UINT b /* 0xc */)
{ /* 0x3de */
  /* file mmsystem.c line 1696 addr 0x3de */
  /* file mmsystem.c line 1696 addr 0x3e1 */
} /* 0x3e5 */
MMRESULT mmioAdvance (HMMIO a /* 0x8 */, LPMMIOINFO b /* 0xc */, UINT c /* 0x10 */)
{ /* 0x3e5 */
  /* file mmsystem.c line 1697 addr 0x3e5 */
  /* file mmsystem.c line 1697 addr 0x3e8 */
} /* 0x3ec */
LRESULT mmioSendMessage (HMMIO a /* 0x8 */, UINT b /* 0xc */, LPARAM c /* 0x10 */, LPARAM d /* 0x14 */)
{ /* 0x3ec */
  /* file mmsystem.c line 1698 addr 0x3ec */
  /* file mmsystem.c line 1698 addr 0x3ef */
} /* 0x3f3 */
MMRESULT mmioDescend (HMMIO a /* 0x8 */, LPMMCKINFO b /* 0xc */, MMCKINFO const *c /* 0x10 */, UINT d /* 0x14 */)
{ /* 0x3f3 */
  /* file mmsystem.c line 1699 addr 0x3f3 */
  /* file mmsystem.c line 1699 addr 0x3f6 */
} /* 0x3fa */
MMRESULT mmioAscend (HMMIO a /* 0x8 */, LPMMCKINFO b /* 0xc */, UINT c /* 0x10 */)
{ /* 0x3fa */
  /* file mmsystem.c line 1700 addr 0x3fa */
  /* file mmsystem.c line 1700 addr 0x3fd */
} /* 0x401 */
MMRESULT mmioCreateChunk (HMMIO a /* 0x8 */, LPMMCKINFO b /* 0xc */, UINT c /* 0x10 */)
{ /* 0x401 */
  /* file mmsystem.c line 1701 addr 0x401 */
  /* file mmsystem.c line 1701 addr 0x404 */
} /* 0x408 */
MCIERROR mciSendCommandA (MCIDEVICEID a /* 0x8 */, UINT b /* 0xc */, DWORD c /* 0x10 */, DWORD d /* 0x14 */)
{ /* 0x408 */
  /* file mmsystem.c line 1702 addr 0x408 */
  /* file mmsystem.c line 1702 addr 0x40b */
} /* 0x40f */
MCIERROR mciSendCommandW (MCIDEVICEID a /* 0x8 */, UINT b /* 0xc */, DWORD c /* 0x10 */, DWORD d /* 0x14 */)
{ /* 0x40f */
  /* file mmsystem.c line 1703 addr 0x40f */
  /* file mmsystem.c line 1703 addr 0x412 */
} /* 0x416 */
MCIERROR mciSendStringA (LPCSTR a /* 0x8 */, LPSTR b /* 0xc */, UINT c /* 0x10 */, HWND d /* 0x14 */)
{ /* 0x416 */
  /* file mmsystem.c line 1704 addr 0x416 */
  /* file mmsystem.c line 1704 addr 0x419 */
} /* 0x41d */
MCIERROR mciSendStringW (LPCWSTR a /* 0x8 */, LPWSTR b /* 0xc */, UINT c /* 0x10 */, HWND d /* 0x14 */)
{ /* 0x41d */
  /* file mmsystem.c line 1705 addr 0x41d */
  /* file mmsystem.c line 1705 addr 0x420 */
} /* 0x424 */
MCIDEVICEID mciGetDeviceIDA (LPCSTR a /* 0x8 */)
{ /* 0x424 */
  /* file mmsystem.c line 1706 addr 0x424 */
  /* file mmsystem.c line 1706 addr 0x427 */
} /* 0x42b */
MCIDEVICEID mciGetDeviceIDW (LPCWSTR a /* 0x8 */)
{ /* 0x42b */
  /* file mmsystem.c line 1707 addr 0x42b */
  /* file mmsystem.c line 1707 addr 0x42e */
} /* 0x432 */
MCIDEVICEID mciGetDeviceIDFromElementIDA (DWORD a /* 0x8 */, LPCSTR b /* 0xc */)
{ /* 0x432 */
  /* file mmsystem.c line 1708 addr 0x432 */
  /* file mmsystem.c line 1708 addr 0x435 */
} /* 0x439 */
MCIDEVICEID mciGetDeviceIDFromElementIDW (DWORD a /* 0x8 */, LPCWSTR b /* 0xc */)
{ /* 0x439 */
  /* file mmsystem.c line 1709 addr 0x439 */
  /* file mmsystem.c line 1709 addr 0x43c */
} /* 0x440 */
BOOL mciGetErrorStringA (MCIERROR a /* 0x8 */, LPSTR b /* 0xc */, UINT c /* 0x10 */)
{ /* 0x440 */
  /* file mmsystem.c line 1710 addr 0x440 */
  /* file mmsystem.c line 1710 addr 0x443 */
} /* 0x447 */
BOOL mciGetErrorStringW (MCIERROR a /* 0x8 */, LPWSTR b /* 0xc */, UINT c /* 0x10 */)
{ /* 0x447 */
  /* file mmsystem.c line 1711 addr 0x447 */
  /* file mmsystem.c line 1711 addr 0x44a */
} /* 0x44e */
BOOL mciSetYieldProc (MCIDEVICEID a /* 0x8 */, YIELDPROC b /* 0xc */, DWORD c /* 0x10 */)
{ /* 0x44e */
  /* file mmsystem.c line 1712 addr 0x44e */
  /* file mmsystem.c line 1712 addr 0x451 */
} /* 0x455 */
HTASK mciGetCreatorTask (MCIDEVICEID a /* 0x8 */)
{ /* 0x455 */
  /* file mmsystem.c line 1713 addr 0x455 */
  /* file mmsystem.c line 1713 addr 0x458 */
} /* 0x45c */
YIELDPROC mciGetYieldProc (MCIDEVICEID a /* 0x8 */, PDWORD b /* 0xc */)
{ /* 0x45c */
  /* file mmsystem.c line 1714 addr 0x45c */
  /* file mmsystem.c line 1714 addr 0x45f */
} /* 0x463 */
struct tagMCI_SEQ_SET_PARMS { /* size 32 id 444 */
  DWORD dwCallback; /* bitsize 32, bitpos 0 */
  DWORD dwTimeFormat; /* bitsize 32, bitpos 32 */
  DWORD dwAudio; /* bitsize 32, bitpos 64 */
  DWORD dwTempo; /* bitsize 32, bitpos 96 */
  DWORD dwPort; /* bitsize 32, bitpos 128 */
  DWORD dwSlave; /* bitsize 32, bitpos 160 */
  DWORD dwMaster; /* bitsize 32, bitpos 192 */
  DWORD dwOffset; /* bitsize 32, bitpos 224 */
};
typedef struct tagMCI_SEQ_SET_PARMS /* id 444 */ MCI_SEQ_SET_PARMS;
typedef struct tagMCI_SEQ_SET_PARMS /* id 444 */ *PMCI_SEQ_SET_PARMS;
typedef struct tagMCI_SEQ_SET_PARMS /* id 444 */ *LPMCI_SEQ_SET_PARMS;
struct tagMCI_ANIM_OPEN_PARMSA { /* size 28 id 445 */
  DWORD dwCallback; /* bitsize 32, bitpos 0 */
  MCIDEVICEID wDeviceID; /* bitsize 32, bitpos 32 */
  LPCSTR lpstrDeviceType; /* bitsize 32, bitpos 64 */
  LPCSTR lpstrElementName; /* bitsize 32, bitpos 96 */
  LPCSTR lpstrAlias; /* bitsize 32, bitpos 128 */
  DWORD dwStyle; /* bitsize 32, bitpos 160 */
  HWND hWndParent; /* bitsize 32, bitpos 192 */
};
typedef struct tagMCI_ANIM_OPEN_PARMSA /* id 445 */ MCI_ANIM_OPEN_PARMSA;
typedef struct tagMCI_ANIM_OPEN_PARMSA /* id 445 */ *PMCI_ANIM_OPEN_PARMSA;
typedef struct tagMCI_ANIM_OPEN_PARMSA /* id 445 */ *LPMCI_ANIM_OPEN_PARMSA;
struct tagMCI_ANIM_OPEN_PARMSW { /* size 28 id 446 */
  DWORD dwCallback; /* bitsize 32, bitpos 0 */
  MCIDEVICEID wDeviceID; /* bitsize 32, bitpos 32 */
  LPCWSTR lpstrDeviceType; /* bitsize 32, bitpos 64 */
  LPCWSTR lpstrElementName; /* bitsize 32, bitpos 96 */
  LPCWSTR lpstrAlias; /* bitsize 32, bitpos 128 */
  DWORD dwStyle; /* bitsize 32, bitpos 160 */
  HWND hWndParent; /* bitsize 32, bitpos 192 */
};
typedef struct tagMCI_ANIM_OPEN_PARMSW /* id 446 */ MCI_ANIM_OPEN_PARMSW;
typedef struct tagMCI_ANIM_OPEN_PARMSW /* id 446 */ *PMCI_ANIM_OPEN_PARMSW;
typedef struct tagMCI_ANIM_OPEN_PARMSW /* id 446 */ *LPMCI_ANIM_OPEN_PARMSW;
struct tagMCI_ANIM_PLAY_PARMS { /* size 16 id 447 */
  DWORD dwCallback; /* bitsize 32, bitpos 0 */
  DWORD dwFrom; /* bitsize 32, bitpos 32 */
  DWORD dwTo; /* bitsize 32, bitpos 64 */
  DWORD dwSpeed; /* bitsize 32, bitpos 96 */
};
typedef struct tagMCI_ANIM_PLAY_PARMS /* id 447 */ MCI_ANIM_PLAY_PARMS;
typedef struct tagMCI_ANIM_PLAY_PARMS /* id 447 */ *PMCI_ANIM_PLAY_PARMS;
typedef struct tagMCI_ANIM_PLAY_PARMS /* id 447 */ *LPMCI_ANIM_PLAY_PARMS;
struct tagMCI_ANIM_STEP_PARMS { /* size 8 id 448 */
  DWORD dwCallback; /* bitsize 32, bitpos 0 */
  DWORD dwFrames; /* bitsize 32, bitpos 32 */
};
typedef struct tagMCI_ANIM_STEP_PARMS /* id 448 */ MCI_ANIM_STEP_PARMS;
typedef struct tagMCI_ANIM_STEP_PARMS /* id 448 */ *PMCI_ANIM_STEP_PARMS;
typedef struct tagMCI_ANIM_STEP_PARMS /* id 448 */ *LPMCI_ANIM_STEP_PARMS;
struct tagMCI_ANIM_WINDOW_PARMSA { /* size 16 id 449 */
  DWORD dwCallback; /* bitsize 32, bitpos 0 */
  HWND hWnd; /* bitsize 32, bitpos 32 */
  UINT nCmdShow; /* bitsize 32, bitpos 64 */
  LPCSTR lpstrText; /* bitsize 32, bitpos 96 */
};
typedef struct tagMCI_ANIM_WINDOW_PARMSA /* id 449 */ MCI_ANIM_WINDOW_PARMSA;
typedef struct tagMCI_ANIM_WINDOW_PARMSA /* id 449 */ *PMCI_ANIM_WINDOW_PARMSA;
typedef struct tagMCI_ANIM_WINDOW_PARMSA /* id 449 */ *LPMCI_ANIM_WINDOW_PARMSA;
struct tagMCI_ANIM_WINDOW_PARMSW { /* size 16 id 450 */
  DWORD dwCallback; /* bitsize 32, bitpos 0 */
  HWND hWnd; /* bitsize 32, bitpos 32 */
  UINT nCmdShow; /* bitsize 32, bitpos 64 */
  LPCWSTR lpstrText; /* bitsize 32, bitpos 96 */
};
typedef struct tagMCI_ANIM_WINDOW_PARMSW /* id 450 */ MCI_ANIM_WINDOW_PARMSW;
typedef struct tagMCI_ANIM_WINDOW_PARMSW /* id 450 */ *PMCI_ANIM_WINDOW_PARMSW;
typedef struct tagMCI_ANIM_WINDOW_PARMSW /* id 450 */ *LPMCI_ANIM_WINDOW_PARMSW;
struct tagMCI_ANIM_RECT_PARMS { /* size 20 id 451 */
  DWORD dwCallback; /* bitsize 32, bitpos 0 */
  RECT rc; /* bitsize 128, bitpos 32 */
};
typedef struct tagMCI_ANIM_RECT_PARMS /* id 451 */ MCI_ANIM_RECT_PARMS;
typedef struct tagMCI_ANIM_RECT_PARMS /* id 451 */ *PMCI_ANIM_RECT_PARMS;
typedef struct tagMCI_ANIM_RECT_PARMS /* id 451 */ *LPMCI_ANIM_RECT_PARMS;
struct tagMCI_ANIM_UPDATE_PARMS { /* size 24 id 452 */
  DWORD dwCallback; /* bitsize 32, bitpos 0 */
  RECT rc; /* bitsize 128, bitpos 32 */
  HDC hDC; /* bitsize 32, bitpos 160 */
};
typedef struct tagMCI_ANIM_UPDATE_PARMS /* id 452 */ MCI_ANIM_UPDATE_PARMS;
typedef struct tagMCI_ANIM_UPDATE_PARMS /* id 452 */ *PMCI_ANIM_UPDATE_PARMS;
typedef struct tagMCI_ANIM_UPDATE_PARMS /* id 452 */ *LPMCI_ANIM_UPDATE_PARMS;
struct tagMCI_OVLY_OPEN_PARMSA { /* size 28 id 453 */
  DWORD dwCallback; /* bitsize 32, bitpos 0 */
  MCIDEVICEID wDeviceID; /* bitsize 32, bitpos 32 */
  LPCSTR lpstrDeviceType; /* bitsize 32, bitpos 64 */
  LPCSTR lpstrElementName; /* bitsize 32, bitpos 96 */
  LPCSTR lpstrAlias; /* bitsize 32, bitpos 128 */
  DWORD dwStyle; /* bitsize 32, bitpos 160 */
  HWND hWndParent; /* bitsize 32, bitpos 192 */
};
typedef struct tagMCI_OVLY_OPEN_PARMSA /* id 453 */ MCI_OVLY_OPEN_PARMSA;
typedef struct tagMCI_OVLY_OPEN_PARMSA /* id 453 */ *PMCI_OVLY_OPEN_PARMSA;
typedef struct tagMCI_OVLY_OPEN_PARMSA /* id 453 */ *LPMCI_OVLY_OPEN_PARMSA;
struct tagMCI_OVLY_OPEN_PARMSW { /* size 28 id 454 */
  DWORD dwCallback; /* bitsize 32, bitpos 0 */
  MCIDEVICEID wDeviceID; /* bitsize 32, bitpos 32 */
  LPCWSTR lpstrDeviceType; /* bitsize 32, bitpos 64 */
  LPCWSTR lpstrElementName; /* bitsize 32, bitpos 96 */
  LPCWSTR lpstrAlias; /* bitsize 32, bitpos 128 */
  DWORD dwStyle; /* bitsize 32, bitpos 160 */
  HWND hWndParent; /* bitsize 32, bitpos 192 */
};
typedef struct tagMCI_OVLY_OPEN_PARMSW /* id 454 */ MCI_OVLY_OPEN_PARMSW;
typedef struct tagMCI_OVLY_OPEN_PARMSW /* id 454 */ *PMCI_OVLY_OPEN_PARMSW;
typedef struct tagMCI_OVLY_OPEN_PARMSW /* id 454 */ *LPMCI_OVLY_OPEN_PARMSW;
struct tagMCI_OVLY_WINDOW_PARMSA { /* size 16 id 455 */
  DWORD dwCallback; /* bitsize 32, bitpos 0 */
  HWND hWnd; /* bitsize 32, bitpos 32 */
  UINT nCmdShow; /* bitsize 32, bitpos 64 */
  LPCSTR lpstrText; /* bitsize 32, bitpos 96 */
};
typedef struct tagMCI_OVLY_WINDOW_PARMSA /* id 455 */ MCI_OVLY_WINDOW_PARMSA;
typedef struct tagMCI_OVLY_WINDOW_PARMSA /* id 455 */ *PMCI_OVLY_WINDOW_PARMSA;
typedef struct tagMCI_OVLY_WINDOW_PARMSA /* id 455 */ *LPMCI_OVLY_WINDOW_PARMSA;
struct tagMCI_OVLY_WINDOW_PARMSW { /* size 16 id 456 */
  DWORD dwCallback; /* bitsize 32, bitpos 0 */
  HWND hWnd; /* bitsize 32, bitpos 32 */
  UINT nCmdShow; /* bitsize 32, bitpos 64 */
  LPCWSTR lpstrText; /* bitsize 32, bitpos 96 */
};
typedef struct tagMCI_OVLY_WINDOW_PARMSW /* id 456 */ MCI_OVLY_WINDOW_PARMSW;
typedef struct tagMCI_OVLY_WINDOW_PARMSW /* id 456 */ *PMCI_OVLY_WINDOW_PARMSW;
typedef struct tagMCI_OVLY_WINDOW_PARMSW /* id 456 */ *LPMCI_OVLY_WINDOW_PARMSW;
struct tagMCI_OVLY_RECT_PARMS { /* size 20 id 457 */
  DWORD dwCallback; /* bitsize 32, bitpos 0 */
  RECT rc; /* bitsize 128, bitpos 32 */
};
typedef struct tagMCI_OVLY_RECT_PARMS /* id 457 */ MCI_OVLY_RECT_PARMS;
typedef struct tagMCI_OVLY_RECT_PARMS /* id 457 */ *PMCI_OVLY_RECT_PARMS;
typedef struct tagMCI_OVLY_RECT_PARMS /* id 457 */ *LPMCI_OVLY_RECT_PARMS;
struct tagMCI_OVLY_SAVE_PARMSA { /* size 24 id 458 */
  DWORD dwCallback; /* bitsize 32, bitpos 0 */
  LPCSTR lpfilename; /* bitsize 32, bitpos 32 */
  RECT rc; /* bitsize 128, bitpos 64 */
};
typedef struct tagMCI_OVLY_SAVE_PARMSA /* id 458 */ MCI_OVLY_SAVE_PARMSA;
typedef struct tagMCI_OVLY_SAVE_PARMSA /* id 458 */ *PMCI_OVLY_SAVE_PARMSA;
typedef struct tagMCI_OVLY_SAVE_PARMSA /* id 458 */ *LPMCI_OVLY_SAVE_PARMSA;
struct tagMCI_OVLY_SAVE_PARMSW { /* size 24 id 459 */
  DWORD dwCallback; /* bitsize 32, bitpos 0 */
  LPCWSTR lpfilename; /* bitsize 32, bitpos 32 */
  RECT rc; /* bitsize 128, bitpos 64 */
};
typedef struct tagMCI_OVLY_SAVE_PARMSW /* id 459 */ MCI_OVLY_SAVE_PARMSW;
typedef struct tagMCI_OVLY_SAVE_PARMSW /* id 459 */ *PMCI_OVLY_SAVE_PARMSW;
typedef struct tagMCI_OVLY_SAVE_PARMSW /* id 459 */ *LPMCI_OVLY_SAVE_PARMSW;
struct tagMCI_OVLY_LOAD_PARMSA { /* size 24 id 460 */
  DWORD dwCallback; /* bitsize 32, bitpos 0 */
  LPCSTR lpfilename; /* bitsize 32, bitpos 32 */
  RECT rc; /* bitsize 128, bitpos 64 */
};
typedef struct tagMCI_OVLY_LOAD_PARMSA /* id 460 */ MCI_OVLY_LOAD_PARMSA;
typedef struct tagMCI_OVLY_LOAD_PARMSA /* id 460 */ *PMCI_OVLY_LOAD_PARMSA;
typedef struct tagMCI_OVLY_LOAD_PARMSA /* id 460 */ *LPMCI_OVLY_LOAD_PARMSA;
struct tagMCI_OVLY_LOAD_PARMSW { /* size 24 id 461 */
  DWORD dwCallback; /* bitsize 32, bitpos 0 */
  LPCWSTR lpfilename; /* bitsize 32, bitpos 32 */
  RECT rc; /* bitsize 128, bitpos 64 */
};
typedef struct tagMCI_OVLY_LOAD_PARMSW /* id 461 */ MCI_OVLY_LOAD_PARMSW;
typedef struct tagMCI_OVLY_LOAD_PARMSW /* id 461 */ *PMCI_OVLY_LOAD_PARMSW;
typedef struct tagMCI_OVLY_LOAD_PARMSW /* id 461 */ *LPMCI_OVLY_LOAD_PARMSW;
typedef WAVEOUTCAPSA WAVEOUTCAPS;
typedef WAVEOUTCAPSA *PWAVEOUTCAPS;
typedef WAVEOUTCAPSA *LPWAVEOUTCAPS;
typedef WAVEINCAPSA WAVEINCAPS;
typedef WAVEINCAPSA *PWAVEINCAPS;
typedef WAVEINCAPSA *LPWAVEINCAPS;
typedef MIDIOUTCAPSA MIDIOUTCAPS;
typedef MIDIOUTCAPSA *PMIDIOUTCAPS;
typedef MIDIOUTCAPSA *LPMIDIOUTCAPS;
typedef MIDIINCAPSA MIDIINCAPS;
typedef MIDIINCAPSA *PMIDIINCAPS;
typedef MIDIINCAPSA *LPMIDIINCAPS;
typedef AUXCAPSA AUXCAPS;
typedef AUXCAPSA *PAUXCAPS;
typedef AUXCAPSA *LPAUXCAPS;
typedef MIXERCAPSA MIXERCAPS;
typedef MIXERCAPSA *PMIXERCAPS;
typedef MIXERCAPSA *LPMIXERCAPS;
typedef MIXERLINEA MIXERLINE;
typedef MIXERLINEA *PMIXERLINE;
typedef MIXERLINEA *LPMIXERLINE;
typedef MIXERCONTROLA MIXERCONTROL;
typedef MIXERCONTROLA *PMIXERCONTROL;
typedef MIXERCONTROLA *LPMIXERCONTROL;
typedef MIXERLINECONTROLSA MIXERLINECONTROLS;
typedef MIXERLINECONTROLSA *PMIXERLINECONTROLS;
typedef MIXERLINECONTROLSA *LPMIXERLINECONTROLS;
typedef MIXERCONTROLDETAILS_LISTTEXTA MIXERCONTROLDETAILS_LISTTEXT;
typedef MIXERCONTROLDETAILS_LISTTEXTA *PMIXERCONTROLDETAILS_LISTTEXT;
typedef MIXERCONTROLDETAILS_LISTTEXTA *LPMIXERCONTROLDETAILS_LISTTEXT;
typedef JOYCAPSA JOYCAPS;
typedef JOYCAPSA *PJOYCAPS;
typedef JOYCAPSA *LPJOYCAPS;
typedef MCI_OPEN_PARMSA MCI_OPEN_PARMS;
typedef MCI_OPEN_PARMSA *PMCI_OPEN_PARMS;
typedef MCI_OPEN_PARMSA *LPMCI_OPEN_PARMS;
typedef MCI_INFO_PARMSA MCI_INFO_PARMS;
typedef MCI_INFO_PARMSA *LPMCI_INFO_PARMS;
typedef MCI_SYSINFO_PARMSA MCI_SYSINFO_PARMS;
typedef MCI_SYSINFO_PARMSA *PMCI_SYSINFO_PARMS;
typedef MCI_SYSINFO_PARMSA *LPMCI_SYSINFO_PARMS;
typedef MCI_SAVE_PARMSA MCI_SAVE_PARMS;
typedef MCI_SAVE_PARMSA *PMCI_SAVE_PARMS;
typedef MCI_SAVE_PARMSA *LPMCI_SAVE_PARMS;
typedef MCI_LOAD_PARMSA MCI_LOAD_PARMS;
typedef MCI_LOAD_PARMSA *PMCI_LOAD_PARMS;
typedef MCI_LOAD_PARMSA *LPMCI_LOAD_PARMS;
typedef MCI_VD_ESCAPE_PARMSA MCI_VD_ESCAPE_PARMS;
typedef MCI_VD_ESCAPE_PARMSA *PMCI_VD_ESCAPE_PARMS;
typedef MCI_VD_ESCAPE_PARMSA *LPMCI_VD_ESCAPE_PARMS;
typedef MCI_WAVE_OPEN_PARMSA MCI_WAVE_OPEN_PARMS;
typedef MCI_WAVE_OPEN_PARMSA *PMCI_WAVE_OPEN_PARMS;
typedef MCI_WAVE_OPEN_PARMSA *LPMCI_WAVE_OPEN_PARMS;
typedef MCI_ANIM_OPEN_PARMSA MCI_ANIM_OPEN_PARMS;
typedef MCI_ANIM_OPEN_PARMSA *PMCI_ANIM_OPEN_PARMS;
typedef MCI_ANIM_OPEN_PARMSA *LPMCI_ANIM_OPEN_PARMS;
typedef MCI_ANIM_WINDOW_PARMSA MCI_ANIM_WINDOW_PARMS;
typedef MCI_ANIM_WINDOW_PARMSA *PMCI_ANIM_WINDOW_PARMS;
typedef MCI_ANIM_WINDOW_PARMSA *LPMCI_ANIM_WINDOW_PARMS;
typedef MCI_OVLY_OPEN_PARMSA MCI_OVLY_OPEN_PARMS;
typedef MCI_OVLY_OPEN_PARMSA *PMCI_OVLY_OPEN_PARMS;
typedef MCI_OVLY_OPEN_PARMSA *LPMCI_OVLY_OPEN_PARMS;
typedef MCI_OVLY_WINDOW_PARMSA MCI_OVLY_WINDOW_PARMS;
typedef MCI_OVLY_WINDOW_PARMSA *PMCI_OVLY_WINDOW_PARMS;
typedef MCI_OVLY_WINDOW_PARMSA *LPMCI_OVLY_WINDOW_PARMS;
typedef MCI_OVLY_SAVE_PARMSA MCI_OVLY_SAVE_PARMS;
typedef MCI_OVLY_SAVE_PARMSA *PMCI_OVLY_SAVE_PARMS;
typedef MCI_OVLY_SAVE_PARMSA *LPMCI_OVLY_SAVE_PARMS;
